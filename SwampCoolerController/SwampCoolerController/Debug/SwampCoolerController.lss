
SwampCoolerController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000f6  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008cf  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000020e  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000f5  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001cf  00000000  00000000  00000c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000123  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000f4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ConfigurePorts>:
//#include <avr/interrupt.h>
//#include "Atmega168DevBoardRev0.h"

void ConfigurePorts(void){
	
	DDRB = 0x20;		//all inputs except B5 output
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
	
	//configure PORTD for output
	//PD3, 5 & 6 will be used for PWM
	DDRD = 0xFF;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	8a b9       	out	0x0a, r24	; 10
  88:	08 95       	ret

0000008a <main>:



int main(void)
{
	ConfigurePorts();
  8a:	0e 94 40 00 	call	0x80	; 0x80 <ConfigurePorts>
		
	
	while(1)
	{
		PORTB ^= (1<<PB5);		//toggle LED
  8e:	80 e2       	ldi	r24, 0x20	; 32
  90:	95 b1       	in	r25, 0x05	; 5
  92:	98 27       	eor	r25, r24
  94:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	3d e3       	ldi	r19, 0x3D	; 61
  9a:	99 e4       	ldi	r25, 0x49	; 73
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	30 40       	sbci	r19, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x12>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x1c>
  a6:	00 00       	nop
		_delay_ms(3000);
		PORTD ^= (1<<PD5);		//toggle LED
  a8:	9b b1       	in	r25, 0x0b	; 11
  aa:	98 27       	eor	r25, r24
  ac:	9b b9       	out	0x0b, r25	; 11
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	3d e3       	ldi	r19, 0x3D	; 61
  b2:	99 e4       	ldi	r25, 0x49	; 73
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	30 40       	sbci	r19, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x2a>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x34>
  be:	00 00       	nop
		_delay_ms(3000);
		PORTB ^= (1<<PB5);		//toggle LED
  c0:	95 b1       	in	r25, 0x05	; 5
  c2:	98 27       	eor	r25, r24
  c4:	95 b9       	out	0x05, r25	; 5
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	3d e3       	ldi	r19, 0x3D	; 61
  ca:	99 e4       	ldi	r25, 0x49	; 73
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	30 40       	sbci	r19, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x42>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x4c>
  d6:	00 00       	nop
		_delay_ms(3000);
		PORTD ^= (1<<PD5);		//toggle LED
  d8:	9b b1       	in	r25, 0x0b	; 11
  da:	98 27       	eor	r25, r24
  dc:	9b b9       	out	0x0b, r25	; 11
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	3d e3       	ldi	r19, 0x3D	; 61
  e2:	99 e4       	ldi	r25, 0x49	; 73
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	30 40       	sbci	r19, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x5a>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x64>
  ee:	00 00       	nop
  f0:	cf cf       	rjmp	.-98     	; 0x90 <main+0x6>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
