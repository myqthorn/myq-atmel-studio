
DCIMultimeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  0000179c  00001830  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000179c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  00800184  00800184  000018b4  2**0
                  ALLOC
  3 .stab         00002e5c  00000000  00000000  000018b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bfe  00000000  00000000  00004710  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000530e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000238  00000000  00000000  0000533d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002875  00000000  00000000  00005575  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b0a  00000000  00000000  00007dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001019  00000000  00000000  000088f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000063c  00000000  00000000  00009910  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006b1  00000000  00000000  00009f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000019a6  00000000  00000000  0000a5fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001c8  00000000  00000000  0000bfa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e9       	ldi	r30, 0x9C	; 156
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 38       	cpi	r26, 0x84	; 132
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a4 e8       	ldi	r26, 0x84	; 132
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 33       	cpi	r26, 0x38	; 56
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 85 05 	call	0xb0a	; 0xb0a <main>
      9e:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcdWriteNybble>:

//writes nybble to LCD preserving RS's current value
void lcdWriteNybble(unsigned char nybble){
	unsigned char temp;
    
	temp = (PIND & 0x0F);
      a6:	29 b1       	in	r18, 0x09	; 9
    PORTD = (temp | (nybble<<4 & 0xF0));
      a8:	30 e1       	ldi	r19, 0x10	; 16
      aa:	83 9f       	mul	r24, r19
      ac:	c0 01       	movw	r24, r0
      ae:	11 24       	eor	r1, r1

//writes nybble to LCD preserving RS's current value
void lcdWriteNybble(unsigned char nybble){
	unsigned char temp;
    
	temp = (PIND & 0x0F);
      b0:	2f 70       	andi	r18, 0x0F	; 15
    PORTD = (temp | (nybble<<4 & 0xF0));
      b2:	82 2b       	or	r24, r18
      b4:	8b b9       	out	0x0b, r24	; 11
      b6:	08 95       	ret

000000b8 <lcdWrite>:
	//PORTD = nybble<<4 & 0xF0;
}

// write a byte to the LCD in 4 bit mode
void lcdWrite(unsigned char address, unsigned char c)
{
      b8:	cf 93       	push	r28
      ba:	c6 2f       	mov	r28, r22
    clockLow();
      bc:	28 98       	cbi	0x05, 0	; 5
    if (address == CMD_REG){
      be:	81 11       	cpse	r24, r1
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <lcdWrite+0xe>
        commandRegister();
      c2:	29 98       	cbi	0x05, 1	; 5
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <lcdWrite+0x10>
    }
    else dataRegister();
      c6:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c8:	85 e8       	ldi	r24, 0x85	; 133
      ca:	8a 95       	dec	r24
      cc:	f1 f7       	brne	.-4      	; 0xca <lcdWrite+0x12>
      ce:	00 00       	nop
    _delay_us(50);      //1 cycle = 62.5ns (nop)

    

    // Write the 4 bits non-destructively to the port
    lcdWriteNybble((c >> 4) & 0x0F);
      d0:	8c 2f       	mov	r24, r28
      d2:	82 95       	swap	r24
      d4:	8f 70       	andi	r24, 0x0F	; 15
      d6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdWriteNybble>
    
	clockHigh();
      da:	28 9a       	sbi	0x05, 0	; 5
      dc:	85 e8       	ldi	r24, 0x85	; 133
      de:	8a 95       	dec	r24
      e0:	f1 f7       	brne	.-4      	; 0xde <lcdWrite+0x26>
      e2:	00 00       	nop
	_delay_us(CLOCKDELAY);   
    clockLow();
      e4:	28 98       	cbi	0x05, 0	; 5

	//_delay_us(CLOCKDELAY);
    
    // Write the 4 bits non-destructively to the port
    lcdWriteNybble(c & 0x0F);
      e6:	8c 2f       	mov	r24, r28
      e8:	8f 70       	andi	r24, 0x0F	; 15
      ea:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdWriteNybble>
	
	clockHigh();
      ee:	28 9a       	sbi	0x05, 0	; 5
      f0:	85 e8       	ldi	r24, 0x85	; 133
      f2:	8a 95       	dec	r24
      f4:	f1 f7       	brne	.-4      	; 0xf2 <lcdWrite+0x3a>
      f6:	00 00       	nop
	_delay_us(CLOCKDELAY);    //~250ns
	clockLow();
      f8:	28 98       	cbi	0x05, 0	; 5
}
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <lcdClearDisplay>:

void lcdClearDisplay(void)
{
   
	//Clear display and home cursor (0,0)
    lcdWrite(CMD_REG, LCD_CLR);
      fe:	61 e0       	ldi	r22, 0x01	; 1
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcdWrite>

    // Reset our internal cursor position
    lcdX = 0;
     106:	10 92 8a 01 	sts	0x018A, r1
    lcdY = 0;
     10a:	10 92 8b 01 	sts	0x018B, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     10e:	2f e7       	ldi	r18, 0x7F	; 127
     110:	88 e3       	ldi	r24, 0x38	; 56
     112:	91 e0       	ldi	r25, 0x01	; 1
     114:	21 50       	subi	r18, 0x01	; 1
     116:	80 40       	sbci	r24, 0x00	; 0
     118:	90 40       	sbci	r25, 0x00	; 0
     11a:	e1 f7       	brne	.-8      	; 0x114 <lcdClearDisplay+0x16>
     11c:	00 c0       	rjmp	.+0      	; 0x11e <lcdClearDisplay+0x20>
     11e:	00 00       	nop
     120:	08 95       	ret

00000122 <lcdInit>:
// Initialize the LCD
void lcdInit(void){   	
	
	//initialize PORTD for 4-bit interface
	//DDRD = DDRD | 0xF0;		//Set PD7:4 to output
	PORTD &= 0x0F;		//Clear PD7:4 to low (preserving PD3:0)
     122:	8b b1       	in	r24, 0x0b	; 11
     124:	8f 70       	andi	r24, 0x0F	; 15
     126:	8b b9       	out	0x0b, r24	; 11

	//initialize PB1 for RS, PB0 for E
	DDRB |= 0x03;		//Set PB1:0 to output
     128:	84 b1       	in	r24, 0x04	; 4
     12a:	83 60       	ori	r24, 0x03	; 3
     12c:	84 b9       	out	0x04, r24	; 4
	PORTB &= 0xFC;		//Clear pins PB1:0 (preserving PB7:2)
     12e:	85 b1       	in	r24, 0x05	; 5
     130:	8c 7f       	andi	r24, 0xFC	; 252
     132:	85 b9       	out	0x05, r24	; 5
     134:	8f e2       	ldi	r24, 0x2F	; 47
     136:	95 e7       	ldi	r25, 0x75	; 117
     138:	01 97       	sbiw	r24, 0x01	; 1
     13a:	f1 f7       	brne	.-4      	; 0x138 <lcdInit+0x16>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <lcdInit+0x1c>
     13e:	00 00       	nop
	
    // Power up delay
    _delay_ms(15);


    clockLow();
     140:	28 98       	cbi	0x05, 0	; 5
    commandRegister();
     142:	29 98       	cbi	0x05, 1	; 5
    //Set up the 4-bit interface.
    //The LCD is defaulted into 8-bit mode.
    //lcdWriteNybble() is set up for sending the less significant nybble of
    //the byte (bits3-0) in 4-bit mode (DB7-4).  Shifting it 4 bits to the
    //right ensures that the more significant nybble will be sent to DB7-4.
    lcdWriteNybble(LCD_4BIT>>4);
     144:	82 e0       	ldi	r24, 0x02	; 2
     146:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdWriteNybble>
    
	clockHigh();
     14a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     14c:	95 e8       	ldi	r25, 0x85	; 133
     14e:	9a 95       	dec	r25
     150:	f1 f7       	brne	.-4      	; 0x14e <lcdInit+0x2c>
     152:	00 00       	nop
	_delay_us(CLOCKDELAY);
	clockLow();
     154:	28 98       	cbi	0x05, 0	; 5

    //set it to 4 bit mode, 2 lines, 5x8 pixels
    lcdWrite(CMD_REG, LCD_4BIT | LCD_2LINES |LCD_5X8);
     156:	68 e2       	ldi	r22, 0x28	; 40
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcdWrite>

    //display on, cursor off, blinking off
    lcdWrite(CMD_REG, LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
     15e:	6c e0       	ldi	r22, 0x0C	; 12
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcdWrite>

    //Increments ddram address, shift cursor
    lcdWrite(CMD_REG, LCD_INCREMENT | LCD_CURSOR_SHIFT);
     166:	66 e0       	ldi	r22, 0x06	; 6
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcdWrite>

    // Reset our internal cursor position
    lcdX = 0;
     16e:	10 92 8a 01 	sts	0x018A, r1
    lcdY = 0;
     172:	10 92 8b 01 	sts	0x018B, r1
     176:	08 95       	ret

00000178 <lcdGoto>:
                else lcdWrite(CMD_REG, LCD_DISPLAY_OFF);
}

// Move the cursor to the specified X,Y
void lcdGoto(int x, int y)
{
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	8c 01       	movw	r16, r24
     182:	eb 01       	movw	r28, r22
        int offset=0;

        // Select the correct line of the display
        switch (y)
     184:	62 30       	cpi	r22, 0x02	; 2
     186:	71 05       	cpc	r23, r1
     188:	49 f0       	breq	.+18     	; 0x19c <lcdGoto+0x24>
     18a:	63 30       	cpi	r22, 0x03	; 3
     18c:	71 05       	cpc	r23, r1
     18e:	49 f0       	breq	.+18     	; 0x1a2 <lcdGoto+0x2a>
     190:	61 30       	cpi	r22, 0x01	; 1
     192:	71 05       	cpc	r23, r1
     194:	49 f0       	breq	.+18     	; 0x1a8 <lcdGoto+0x30>
}

// Move the cursor to the specified X,Y
void lcdGoto(int x, int y)
{
        int offset=0;
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	08 c0       	rjmp	.+16     	; 0x1ac <lcdGoto+0x34>
        {
                case 0: offset = 0x00;
                                break;
                case 1: offset = 0x40;
                                break;
                case 2: offset = 0x14;  //for a 16 digit display, this should be 0x10
     19c:	64 e1       	ldi	r22, 0x14	; 20
     19e:	70 e0       	ldi	r23, 0x00	; 0
                                break;
     1a0:	05 c0       	rjmp	.+10     	; 0x1ac <lcdGoto+0x34>
                case 3: offset = 0x54;	//0x50
     1a2:	64 e5       	ldi	r22, 0x54	; 84
     1a4:	70 e0       	ldi	r23, 0x00	; 0
                                break;
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <lcdGoto+0x34>
        // Select the correct line of the display
        switch (y)
        {
                case 0: offset = 0x00;
                                break;
                case 1: offset = 0x40;
     1a8:	60 e4       	ldi	r22, 0x40	; 64
     1aa:	70 e0       	ldi	r23, 0x00	; 0
                case 3: offset = 0x54;	//0x50
                                break;
        }

        // Select the correct character of the line
        offset += x;
     1ac:	60 0f       	add	r22, r16
     1ae:	71 1f       	adc	r23, r17

        // Send the command to the LCD
        lcdWrite(CMD_REG, LCD_SET_DDRAM | offset);
     1b0:	60 68       	ori	r22, 0x80	; 128
     1b2:	7f 6f       	ori	r23, 0xFF	; 255
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcdWrite>

        // Reset our internal cursor position
        lcdX = x;
     1ba:	00 93 8a 01 	sts	0x018A, r16
        lcdY = y;
     1be:	c0 93 8b 01 	sts	0x018B, r28
}
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	08 95       	ret

000001cc <lcdPuts>:

// Output a string of characters to the display
void lcdPuts(const char *string)
{
     1cc:	ef 92       	push	r14
     1ce:	ff 92       	push	r15
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	e8 2e       	mov	r14, r24
     1da:	f9 2e       	mov	r15, r25
     1dc:	08 2f       	mov	r16, r24
     1de:	19 2f       	mov	r17, r25
        // Since the 4 line display is in the order line 1, line 3, line 2, line 4
        // we need to read the current cursor position and control how the text is
        // output, adjusting the cursor position as we go
        int loop;

        for (loop = 0; loop < strlen(string); loop++)
     1e0:	c0 e0       	ldi	r28, 0x00	; 0
     1e2:	d0 e0       	ldi	r29, 0x00	; 0
     1e4:	22 c0       	rjmp	.+68     	; 0x22a <lcdPuts+0x5e>
        {
                // Write the character to the LCD
                lcdWrite(DATA_REG, string[loop]);
     1e6:	f8 01       	movw	r30, r16
     1e8:	61 91       	ld	r22, Z+
     1ea:	8f 01       	movw	r16, r30
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcdWrite>
                lcdX++;
     1f2:	20 91 8a 01 	lds	r18, 0x018A
     1f6:	2f 5f       	subi	r18, 0xFF	; 255

                // Have we reached the end of the line?
                if (lcdX == 40)
     1f8:	28 32       	cpi	r18, 0x28	; 40
     1fa:	19 f0       	breq	.+6      	; 0x202 <lcdPuts+0x36>

        for (loop = 0; loop < strlen(string); loop++)
        {
                // Write the character to the LCD
                lcdWrite(DATA_REG, string[loop]);
                lcdX++;
     1fc:	20 93 8a 01 	sts	0x018A, r18
     200:	13 c0       	rjmp	.+38     	; 0x228 <lcdPuts+0x5c>

                // Have we reached the end of the line?
                if (lcdX == 40)
                {
                        // Move to the start of the next line
                        lcdX = 0;
     202:	10 92 8a 01 	sts	0x018A, r1
                        lcdY++;
     206:	80 91 8b 01 	lds	r24, 0x018B
     20a:	8f 5f       	subi	r24, 0xFF	; 255

                        // If we are off the bottom of the screen
                        // go back to the top line
                        if (lcdY == 2) lcdY = 0;
     20c:	82 30       	cpi	r24, 0x02	; 2
     20e:	19 f0       	breq	.+6      	; 0x216 <lcdPuts+0x4a>
                // Have we reached the end of the line?
                if (lcdX == 40)
                {
                        // Move to the start of the next line
                        lcdX = 0;
                        lcdY++;
     210:	80 93 8b 01 	sts	0x018B, r24
     214:	02 c0       	rjmp	.+4      	; 0x21a <lcdPuts+0x4e>

                        // If we are off the bottom of the screen
                        // go back to the top line
                        if (lcdY == 2) lcdY = 0;
     216:	10 92 8b 01 	sts	0x018B, r1

                        // Adjust the cursor position on the LCD
                        lcdGoto(lcdX, lcdY);
     21a:	60 91 8b 01 	lds	r22, 0x018B
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 bc 00 	call	0x178	; 0x178 <lcdGoto>
        // Since the 4 line display is in the order line 1, line 3, line 2, line 4
        // we need to read the current cursor position and control how the text is
        // output, adjusting the cursor position as we go
        int loop;

        for (loop = 0; loop < strlen(string); loop++)
     228:	21 96       	adiw	r28, 0x01	; 1
     22a:	ee 2d       	mov	r30, r14
     22c:	ff 2d       	mov	r31, r15
     22e:	df 01       	movw	r26, r30
     230:	0d 90       	ld	r0, X+
     232:	00 20       	and	r0, r0
     234:	e9 f7       	brne	.-6      	; 0x230 <lcdPuts+0x64>
     236:	11 97       	sbiw	r26, 0x01	; 1
     238:	ae 1b       	sub	r26, r30
     23a:	bf 0b       	sbc	r27, r31
     23c:	ca 17       	cp	r28, r26
     23e:	db 07       	cpc	r29, r27
     240:	90 f2       	brcs	.-92     	; 0x1e6 <lcdPuts+0x1a>

                        // Adjust the cursor position on the LCD
                        lcdGoto(lcdX, lcdY);
                }
        }
}
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28
     246:	1f 91       	pop	r17
     248:	0f 91       	pop	r16
     24a:	ff 90       	pop	r15
     24c:	ef 90       	pop	r14
     24e:	08 95       	ret

00000250 <i2c_init>:
*************************************************************************/ 
void i2c_init(void) 
{ 
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */ 
  
  TWSR = 0;                         /* no prescaler */ 
     250:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */ 
     254:	8c e0       	ldi	r24, 0x0C	; 12
     256:	80 93 b8 00 	sts	0x00B8, r24
     25a:	08 95       	ret

0000025c <i2c_start>:
unsigned char i2c_start(unsigned char address) 
{ 
    uint8_t   twst; 

   // send START condition 
   TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); 
     25c:	94 ea       	ldi	r25, 0xA4	; 164
     25e:	90 93 bc 00 	sts	0x00BC, r25

   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 
     262:	ec eb       	ldi	r30, 0xBC	; 188
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	90 81       	ld	r25, Z
     268:	99 23       	and	r25, r25
     26a:	ec f7       	brge	.-6      	; 0x266 <i2c_start+0xa>

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
     26c:	90 91 b9 00 	lds	r25, 0x00B9
     270:	98 7f       	andi	r25, 0xF8	; 248
   if ( (twst != TW_START) && (twst != TW_REP_START)) return 1; 
     272:	98 30       	cpi	r25, 0x08	; 8
     274:	11 f0       	breq	.+4      	; 0x27a <i2c_start+0x1e>
     276:	90 31       	cpi	r25, 0x10	; 16
     278:	a1 f4       	brne	.+40     	; 0x2a2 <i2c_start+0x46>

   // send device address 
   TWDR = address; 
     27a:	80 93 bb 00 	sts	0x00BB, r24
   TWCR = (1<<TWINT) | (1<<TWEN); 
     27e:	84 e8       	ldi	r24, 0x84	; 132
     280:	80 93 bc 00 	sts	0x00BC, r24

   // wail until transmission completed and ACK/NACK has been received 
   while(!(TWCR & (1<<TWINT))); 
     284:	ec eb       	ldi	r30, 0xBC	; 188
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	88 23       	and	r24, r24
     28c:	ec f7       	brge	.-6      	; 0x288 <i2c_start+0x2c>

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
     28e:	90 91 b9 00 	lds	r25, 0x00B9
     292:	98 7f       	andi	r25, 0xF8	; 248
   if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1; 
     294:	98 31       	cpi	r25, 0x18	; 24
     296:	39 f0       	breq	.+14     	; 0x2a6 <i2c_start+0x4a>
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	90 34       	cpi	r25, 0x40	; 64
     29c:	29 f4       	brne	.+10     	; 0x2a8 <i2c_start+0x4c>
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	08 95       	ret
   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
   if ( (twst != TW_START) && (twst != TW_REP_START)) return 1; 
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	08 95       	ret

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
   if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1; 

   return 0; 
     2a6:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */ 
     2a8:	08 95       	ret

000002aa <i2c_stop>:
 Terminates the data transfer and releases the I2C bus 
*************************************************************************/ 
void i2c_stop(void) 
{ 
    /* send stop condition */ 
   TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); 
     2aa:	84 e9       	ldi	r24, 0x94	; 148
     2ac:	80 93 bc 00 	sts	0x00BC, r24
    
   // wait until stop condition is executed and bus released 
   while(TWCR & (1<<TWSTO)); 
     2b0:	ec eb       	ldi	r30, 0xBC	; 188
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	84 fd       	sbrc	r24, 4
     2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <i2c_stop+0xa>

}/* i2c_stop */ 
     2ba:	08 95       	ret

000002bc <i2c_write>:
unsigned char i2c_write( unsigned char data ) 
{    
    uint8_t   twst; 
    
   // send data to the previously addressed device 
   TWDR = data; 
     2bc:	80 93 bb 00 	sts	0x00BB, r24
   TWCR = (1<<TWINT) | (1<<TWEN); 
     2c0:	84 e8       	ldi	r24, 0x84	; 132
     2c2:	80 93 bc 00 	sts	0x00BC, r24

   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 
     2c6:	ec eb       	ldi	r30, 0xBC	; 188
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	88 23       	and	r24, r24
     2ce:	ec f7       	brge	.-6      	; 0x2ca <i2c_write+0xe>

   // check value of TWI Status Register. Mask prescaler bits 
   twst = TW_STATUS & 0xF8; 
     2d0:	90 91 b9 00 	lds	r25, 0x00B9
     2d4:	98 7f       	andi	r25, 0xF8	; 248
   if( twst != TW_MT_DATA_ACK) return 1; 
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	98 32       	cpi	r25, 0x28	; 40
     2da:	09 f4       	brne	.+2      	; 0x2de <i2c_write+0x22>
     2dc:	80 e0       	ldi	r24, 0x00	; 0
   return 0; 

}/* i2c_write */ 
     2de:	08 95       	ret

000002e0 <SI5351_init>:

#define READ 0x01
#define WRITE 0x00

void SI5351_init(){
	i2c_init();
     2e0:	0e 94 28 01 	call	0x250	; 0x250 <i2c_init>
     2e4:	08 95       	ret

000002e6 <SI5351_write>:
	return data;
}

///@brief
///@returns 0 if device was addressed properly
unsigned char SI5351_write(uint8_t address, uint8_t data){
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	f8 2e       	mov	r15, r24
     2f2:	06 2f       	mov	r16, r22
     2f4:	c2 e3       	ldi	r28, 0x32	; 50
     2f6:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char result;
	
	//try to address the device up to 50 times
	for (int i =0;i<50;i++){
		result = i2c_start(SI5351_ADDRESS);
     2f8:	80 ec       	ldi	r24, 0xC0	; 192
     2fa:	0e 94 2e 01 	call	0x25c	; 0x25c <i2c_start>
     2fe:	18 2f       	mov	r17, r24
		
		if (result == 0){
     300:	81 11       	cpse	r24, r1
     302:	09 c0       	rjmp	.+18     	; 0x316 <SI5351_write+0x30>
			i2c_write(address);
     304:	8f 2d       	mov	r24, r15
     306:	0e 94 5e 01 	call	0x2bc	; 0x2bc <i2c_write>
			i2c_write(data);
     30a:	80 2f       	mov	r24, r16
     30c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <i2c_write>
			i2c_stop();
     310:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_stop>
			continue;
     314:	02 c0       	rjmp	.+4      	; 0x31a <SI5351_write+0x34>
		}
		i2c_stop();
     316:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_stop>
     31a:	21 97       	sbiw	r28, 0x01	; 1
///@returns 0 if device was addressed properly
unsigned char SI5351_write(uint8_t address, uint8_t data){
	unsigned char result;
	
	//try to address the device up to 50 times
	for (int i =0;i<50;i++){
     31c:	69 f7       	brne	.-38     	; 0x2f8 <SI5351_write+0x12>
		i2c_stop();
	}
	
	
	return (result);
}
     31e:	81 2f       	mov	r24, r17
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	ff 90       	pop	r15
     32a:	08 95       	ret

0000032c <SI5351_configureMultisynth>:
///Configures Multisynth
///assigns 32-bit values (p1, p2, p3) to their appropriate 8-bit registers
//rdiv is the output divider
///@returns 0 is address is accessible, 1 if not

unsigned char SI5351_configureMultisynth(uint8_t ms, uint32_t p1,  uint32_t p2, uint32_t p3, uint8_t rdiv){
     32c:	4f 92       	push	r4
     32e:	5f 92       	push	r5
     330:	6f 92       	push	r6
     332:	7f 92       	push	r7
     334:	af 92       	push	r10
     336:	bf 92       	push	r11
     338:	cf 92       	push	r12
     33a:	df 92       	push	r13
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	00 d0       	rcall	.+0      	; 0x34a <SI5351_configureMultisynth+0x1e>
     34a:	00 d0       	rcall	.+0      	; 0x34c <SI5351_configureMultisynth+0x20>
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	b8 2e       	mov	r11, r24
     352:	2a 01       	movw	r4, r20
     354:	3b 01       	movw	r6, r22
     356:	09 83       	std	Y+1, r16	; 0x01
     358:	1a 83       	std	Y+2, r17	; 0x02
     35a:	2b 83       	std	Y+3, r18	; 0x03
     35c:	3c 83       	std	Y+4, r19	; 0x04
	if (i2c_start(SI5351_ADDRESS) != 1){
     35e:	80 ec       	ldi	r24, 0xC0	; 192
     360:	0e 94 2e 01 	call	0x25c	; 0x25c <i2c_start>
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	09 f4       	brne	.+2      	; 0x36a <SI5351_configureMultisynth+0x3e>
     368:	49 c0       	rjmp	.+146    	; 0x3fc <SI5351_configureMultisynth+0xd0>
		SI5351_write(42+ms*8+0, (p3>>8 ) & 0xFF);								//MSx_P3H_1
     36a:	1b 2d       	mov	r17, r11
     36c:	11 0f       	add	r17, r17
     36e:	11 0f       	add	r17, r17
     370:	11 0f       	add	r17, r17
     372:	99 27       	eor	r25, r25
     374:	8f 2d       	mov	r24, r15
     376:	7e 2d       	mov	r23, r14
     378:	6d 2d       	mov	r22, r13
     37a:	81 2f       	mov	r24, r17
     37c:	86 5d       	subi	r24, 0xD6	; 214
     37e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
		SI5351_write(42+ms*8+1, (p3    ) & 0xFF);								//MSx_P3L
     382:	6c 2d       	mov	r22, r12
     384:	81 2f       	mov	r24, r17
     386:	85 5d       	subi	r24, 0xD5	; 213
     388:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
		SI5351_write(42+ms*8+2, ((p1>>16) & 0x03) | ((rdiv & 0x07) <<4) );								//MSx_P1H_2
     38c:	8a 2d       	mov	r24, r10
     38e:	87 70       	andi	r24, 0x07	; 7
     390:	a8 2e       	mov	r10, r24
     392:	aa 0c       	add	r10, r10
     394:	aa 0c       	add	r10, r10
     396:	aa 0c       	add	r10, r10
     398:	aa 0c       	add	r10, r10
     39a:	66 2d       	mov	r22, r6
     39c:	63 70       	andi	r22, 0x03	; 3
     39e:	6a 29       	or	r22, r10
     3a0:	81 2f       	mov	r24, r17
     3a2:	84 5d       	subi	r24, 0xD4	; 212
     3a4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
		SI5351_write(42+ms*8+3, (p1>> 8) & 0xFF);								//MSx_P1H_1
     3a8:	99 27       	eor	r25, r25
     3aa:	87 2d       	mov	r24, r7
     3ac:	76 2d       	mov	r23, r6
     3ae:	65 2d       	mov	r22, r5
     3b0:	81 2f       	mov	r24, r17
     3b2:	83 5d       	subi	r24, 0xD3	; 211
     3b4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
		SI5351_write(42+ms*8+4, (p1    ) & 0xFF);								//MSx_P1L
     3b8:	64 2d       	mov	r22, r4
     3ba:	81 2f       	mov	r24, r17
     3bc:	82 5d       	subi	r24, 0xD2	; 210
     3be:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
		SI5351_write(42+ms*8+5, (((p3>>16) & 0xF)<<4) | ((p2>>16) & 0xF) );		//MSx_P3H_2 & MSx_P2H_2
     3c2:	8e 2d       	mov	r24, r14
     3c4:	82 95       	swap	r24
     3c6:	80 7f       	andi	r24, 0xF0	; 240
     3c8:	6b 81       	ldd	r22, Y+3	; 0x03
     3ca:	6f 70       	andi	r22, 0x0F	; 15
     3cc:	68 2b       	or	r22, r24
     3ce:	81 2f       	mov	r24, r17
     3d0:	81 5d       	subi	r24, 0xD1	; 209
     3d2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
		SI5351_write(42+ms*8+6, (p2>> 8) & 0xFF);								//MSx_P2H_1
     3d6:	29 81       	ldd	r18, Y+1	; 0x01
     3d8:	3a 81       	ldd	r19, Y+2	; 0x02
     3da:	4b 81       	ldd	r20, Y+3	; 0x03
     3dc:	5c 81       	ldd	r21, Y+4	; 0x04
     3de:	99 27       	eor	r25, r25
     3e0:	85 2f       	mov	r24, r21
     3e2:	74 2f       	mov	r23, r20
     3e4:	63 2f       	mov	r22, r19
     3e6:	81 2f       	mov	r24, r17
     3e8:	80 5d       	subi	r24, 0xD0	; 208
     3ea:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
		SI5351_write(42+ms*8+7, (p1    ) & 0xFF);								//MSx_P2L
     3ee:	64 2d       	mov	r22, r4
     3f0:	81 2f       	mov	r24, r17
     3f2:	8f 5c       	subi	r24, 0xCF	; 207
     3f4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
		return 0;
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <SI5351_configureMultisynth+0xd2>
	}else
		return 1;	
     3fc:	81 e0       	ldi	r24, 0x01	; 1
									
}
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	bf 90       	pop	r11
     418:	af 90       	pop	r10
     41a:	7f 90       	pop	r7
     41c:	6f 90       	pop	r6
     41e:	5f 90       	pop	r5
     420:	4f 90       	pop	r4
     422:	08 95       	ret

00000424 <SI5351_configureMultisynthNA>:

//configure the PLLA Feedback Multisynth divider (MSNA)
void SI5351_configureMultisynthNA(uint32_t p1,  uint32_t p2, uint32_t p3){
     424:	4f 92       	push	r4
     426:	5f 92       	push	r5
     428:	6f 92       	push	r6
     42a:	7f 92       	push	r7
     42c:	8f 92       	push	r8
     42e:	9f 92       	push	r9
     430:	af 92       	push	r10
     432:	bf 92       	push	r11
     434:	cf 92       	push	r12
     436:	df 92       	push	r13
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	4b 01       	movw	r8, r22
     442:	5c 01       	movw	r10, r24
     444:	29 01       	movw	r4, r18
     446:	3a 01       	movw	r6, r20
     448:	67 01       	movw	r12, r14
     44a:	78 01       	movw	r14, r16
	
	i2c_start(SI5351_ADDRESS);
     44c:	80 ec       	ldi	r24, 0xC0	; 192
     44e:	0e 94 2e 01 	call	0x25c	; 0x25c <i2c_start>
	SI5351_write(26, (p3>>8 ) & 0xFF);								//MSx_P3H_1
     452:	99 27       	eor	r25, r25
     454:	8f 2d       	mov	r24, r15
     456:	7e 2d       	mov	r23, r14
     458:	6d 2d       	mov	r22, r13
     45a:	8a e1       	ldi	r24, 0x1A	; 26
     45c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	SI5351_write(27, (p3    ) & 0xFF);								//MSx_P3L
     460:	6c 2d       	mov	r22, r12
     462:	8b e1       	ldi	r24, 0x1B	; 27
     464:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	SI5351_write(28, (p1>>16) & 0x03);								//MSx_P1H_2
     468:	c5 01       	movw	r24, r10
     46a:	aa 27       	eor	r26, r26
     46c:	bb 27       	eor	r27, r27
     46e:	bc 01       	movw	r22, r24
     470:	cd 01       	movw	r24, r26
     472:	63 70       	andi	r22, 0x03	; 3
     474:	77 27       	eor	r23, r23
     476:	88 27       	eor	r24, r24
     478:	99 27       	eor	r25, r25
     47a:	8c e1       	ldi	r24, 0x1C	; 28
     47c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	SI5351_write(29, (p1>> 8) & 0xFF);								//MSx_P1H_1
     480:	99 27       	eor	r25, r25
     482:	8b 2d       	mov	r24, r11
     484:	7a 2d       	mov	r23, r10
     486:	69 2d       	mov	r22, r9
     488:	8d e1       	ldi	r24, 0x1D	; 29
     48a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	SI5351_write(30, (p1    ) & 0xFF);								//MSx_P1L
     48e:	68 2d       	mov	r22, r8
     490:	8e e1       	ldi	r24, 0x1E	; 30
     492:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	SI5351_write(31, (((p3>>16) & 0xF)<<4) | ((p2>>16) & 0xF) );		//MSx_P3H_2 & MSx_P2H_2
     496:	8e 2d       	mov	r24, r14
     498:	82 95       	swap	r24
     49a:	80 7f       	andi	r24, 0xF0	; 240
     49c:	66 2d       	mov	r22, r6
     49e:	6f 70       	andi	r22, 0x0F	; 15
     4a0:	68 2b       	or	r22, r24
     4a2:	8f e1       	ldi	r24, 0x1F	; 31
     4a4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	SI5351_write(32, (p2>> 8) & 0xFF);								//MSx_P2H_1
     4a8:	99 27       	eor	r25, r25
     4aa:	87 2d       	mov	r24, r7
     4ac:	76 2d       	mov	r23, r6
     4ae:	65 2d       	mov	r22, r5
     4b0:	80 e2       	ldi	r24, 0x20	; 32
     4b2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	SI5351_write(33, (p1    ) & 0xFF);
     4b6:	68 2d       	mov	r22, r8
     4b8:	81 e2       	ldi	r24, 0x21	; 33
     4ba:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
}
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	bf 90       	pop	r11
     4cc:	af 90       	pop	r10
     4ce:	9f 90       	pop	r9
     4d0:	8f 90       	pop	r8
     4d2:	7f 90       	pop	r7
     4d4:	6f 90       	pop	r6
     4d6:	5f 90       	pop	r5
     4d8:	4f 90       	pop	r4
     4da:	08 95       	ret

000004dc <SI4341_setXTALcapacitance>:
void SI4341_setXTALcapacitance(uint8_t capacitance){
	//mask capacitance to be 2 bits
	//shift capacitance to the left into correct position
	//append 0x12 to bits 5:0 as the datasheet specifies
	
	capacitance &= 0b11;
     4dc:	83 70       	andi	r24, 0x03	; 3
	
	SI5351_write(SI5351_REG_XTAL_INTERNAL_LOAD_CAP, (((capacitance)<<SI5351_XTAL_CL) | 0x12) );
     4de:	90 e4       	ldi	r25, 0x40	; 64
     4e0:	89 9f       	mul	r24, r25
     4e2:	b0 01       	movw	r22, r0
     4e4:	11 24       	eor	r1, r1
     4e6:	62 61       	ori	r22, 0x12	; 18
     4e8:	87 eb       	ldi	r24, 0xB7	; 183
     4ea:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
     4ee:	08 95       	ret

000004f0 <initADC>:

//@brief initialize AD converter on Atmega168 for
void initADC(){
	
	//Power reduction ADC bit must be zero to enable ADC
	PRR &= ~(1<<PRADC);
     4f0:	e4 e6       	ldi	r30, 0x64	; 100
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	8e 7f       	andi	r24, 0xFE	; 254
     4f8:	80 83       	st	Z, r24
	
	//ENABLE, ADC PRESCALER = 64
	//ADC clock needs to be between 50kHz and 200kHz
	//8MHz/64 = 125kHz
	//ADCSRA = (1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 0<<ADPS0);
	ADCSRA = 0x86;
     4fa:	86 e8       	ldi	r24, 0x86	; 134
     4fc:	80 93 7a 00 	sts	0x007A, r24
     500:	08 95       	ret

00000502 <initTimer>:
	//INT0 is on PD2 pin, enable as input, turn on pullup(0=input, 1=output)
	//DDRD &= ~(1<<PD2);		//make PD2 an input
	
	//Set up Interrupts--------------------------------------------------------------------------------------
	//External Interrupt Mask Register
	EIMSK |= (1<<INT0);	//turn on interrupt 0 (PD2)
     502:	e8 9a       	sbi	0x1d, 0	; 29
	
	////External Interrupt Control Register A
	//EICRA = (0b10<<ISC00);		//Interrupt on falling edge of INT0
	EICRA = (0b11<<ISC00);		//Interrupt on rising edge of INT0
     504:	83 e0       	ldi	r24, 0x03	; 3
     506:	80 93 69 00 	sts	0x0069, r24
	
	//Setup Timer1 for frequency counter--------------------------------------------------------
	//disconnect OC1A, OC1B, count up, no prescalar, clock stopped
	TCCR1A = 0x00;
     50a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x00;
     50e:	10 92 81 00 	sts	0x0081, r1
     512:	08 95       	ret

00000514 <displayLCD>:

#pragma region display functions

///@brief writes to LCD
void displayLCD(void){
	lcdGoto(0,0);
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 bc 00 	call	0x178	; 0x178 <lcdGoto>
	lcdPuts(line1);		// Display line 1
     520:	80 ec       	ldi	r24, 0xC0	; 192
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcdPuts>
	lcdGoto(0,1);		// Skip to next line
     528:	61 e0       	ldi	r22, 0x01	; 1
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 bc 00 	call	0x178	; 0x178 <lcdGoto>
	lcdPuts(line2);
     534:	80 e1       	ldi	r24, 0x10	; 16
     536:	92 e0       	ldi	r25, 0x02	; 2
     538:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcdPuts>
	lcdGoto(0,2);
     53c:	62 e0       	ldi	r22, 0x02	; 2
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 bc 00 	call	0x178	; 0x178 <lcdGoto>
	lcdPuts(line3);		// Display line 1
     548:	88 ee       	ldi	r24, 0xE8	; 232
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcdPuts>
	lcdGoto(0,3);		// Skip to next line
     550:	63 e0       	ldi	r22, 0x03	; 3
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 bc 00 	call	0x178	; 0x178 <lcdGoto>
	lcdPuts(line4);
     55c:	84 e9       	ldi	r24, 0x94	; 148
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcdPuts>
     564:	08 95       	ret

00000566 <splashScreen>:
	
}

void splashScreen(void){
	//display Name and number and pause
	sprintf(line1, "Design Criteria Inc");
     566:	84 e1       	ldi	r24, 0x14	; 20
     568:	ec e2       	ldi	r30, 0x2C	; 44
     56a:	f1 e0       	ldi	r31, 0x01	; 1
     56c:	a0 ec       	ldi	r26, 0xC0	; 192
     56e:	b1 e0       	ldi	r27, 0x01	; 1
     570:	01 90       	ld	r0, Z+
     572:	0d 92       	st	X+, r0
     574:	8a 95       	dec	r24
     576:	e1 f7       	brne	.-8      	; 0x570 <splashScreen+0xa>
	sprintf(line2, "(801) 393-1414");
     578:	8f e0       	ldi	r24, 0x0F	; 15
     57a:	e0 e4       	ldi	r30, 0x40	; 64
     57c:	f1 e0       	ldi	r31, 0x01	; 1
     57e:	a0 e1       	ldi	r26, 0x10	; 16
     580:	b2 e0       	ldi	r27, 0x02	; 2
     582:	01 90       	ld	r0, Z+
     584:	0d 92       	st	X+, r0
     586:	8a 95       	dec	r24
     588:	e1 f7       	brne	.-8      	; 0x582 <splashScreen+0x1c>
	displayLCD();
     58a:	0e 94 8a 02 	call	0x514	; 0x514 <displayLCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58e:	2f ef       	ldi	r18, 0xFF	; 255
     590:	84 e3       	ldi	r24, 0x34	; 52
     592:	9c e0       	ldi	r25, 0x0C	; 12
     594:	21 50       	subi	r18, 0x01	; 1
     596:	80 40       	sbci	r24, 0x00	; 0
     598:	90 40       	sbci	r25, 0x00	; 0
     59a:	e1 f7       	brne	.-8      	; 0x594 <splashScreen+0x2e>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <splashScreen+0x38>
     59e:	00 00       	nop
	_delay_ms(500);
	lcdClearDisplay();
     5a0:	0e 94 7f 00 	call	0xfe	; 0xfe <lcdClearDisplay>
     5a4:	08 95       	ret

000005a6 <ftoa>:
}

///@brief converts a double to a string
char *ftoa(char *a, double f, int precision){
     5a6:	4f 92       	push	r4
     5a8:	5f 92       	push	r5
     5aa:	6f 92       	push	r6
     5ac:	7f 92       	push	r7
     5ae:	8f 92       	push	r8
     5b0:	9f 92       	push	r9
     5b2:	af 92       	push	r10
     5b4:	bf 92       	push	r11
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	a4 97       	sbiw	r28, 0x24	; 36
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	88 2e       	mov	r8, r24
     5d8:	99 2e       	mov	r9, r25
     5da:	2a 01       	movw	r4, r20
     5dc:	3b 01       	movw	r6, r22
     5de:	59 01       	movw	r10, r18
	long p[] = {0,10,100,1000,10000,100000,1000000,10000000,100000000};
     5e0:	84 e2       	ldi	r24, 0x24	; 36
     5e2:	e8 e0       	ldi	r30, 0x08	; 8
     5e4:	f1 e0       	ldi	r31, 0x01	; 1
     5e6:	de 01       	movw	r26, r28
     5e8:	11 96       	adiw	r26, 0x01	; 1
     5ea:	01 90       	ld	r0, Z+
     5ec:	0d 92       	st	X+, r0
     5ee:	8a 95       	dec	r24
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <ftoa+0x44>
	char *ret = a;
	long wholeNum = (long)f;
     5f2:	cb 01       	movw	r24, r22
     5f4:	ba 01       	movw	r22, r20
     5f6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fixsfsi>
     5fa:	c6 2e       	mov	r12, r22
     5fc:	d7 2e       	mov	r13, r23
     5fe:	e8 2e       	mov	r14, r24
     600:	f9 2e       	mov	r15, r25
	
	if (wholeNum<10) *a++ = ' ';
     602:	8a e0       	ldi	r24, 0x0A	; 10
     604:	c8 16       	cp	r12, r24
     606:	d1 04       	cpc	r13, r1
     608:	e1 04       	cpc	r14, r1
     60a:	f1 04       	cpc	r15, r1
     60c:	3c f4       	brge	.+14     	; 0x61c <ftoa+0x76>
     60e:	08 2d       	mov	r16, r8
     610:	19 2d       	mov	r17, r9
     612:	80 e2       	ldi	r24, 0x20	; 32
     614:	f8 01       	movw	r30, r16
     616:	81 93       	st	Z+, r24
     618:	8f 01       	movw	r16, r30
     61a:	02 c0       	rjmp	.+4      	; 0x620 <ftoa+0x7a>
     61c:	08 2d       	mov	r16, r8
     61e:	19 2d       	mov	r17, r9
	itoa(wholeNum, a, 10);
     620:	4a e0       	ldi	r20, 0x0A	; 10
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	b8 01       	movw	r22, r16
     626:	c6 01       	movw	r24, r12
     628:	0e 94 b2 08 	call	0x1164	; 0x1164 <itoa>
	while (*a != '\0') a++;
     62c:	f8 01       	movw	r30, r16
     62e:	80 81       	ld	r24, Z
     630:	88 23       	and	r24, r24
     632:	41 f0       	breq	.+16     	; 0x644 <ftoa+0x9e>
	_delay_ms(500);
	lcdClearDisplay();
}

///@brief converts a double to a string
char *ftoa(char *a, double f, int precision){
     634:	c8 01       	movw	r24, r16
     636:	01 96       	adiw	r24, 0x01	; 1
	char *ret = a;
	long wholeNum = (long)f;
	
	if (wholeNum<10) *a++ = ' ';
	itoa(wholeNum, a, 10);
	while (*a != '\0') a++;
     638:	8c 01       	movw	r16, r24
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	f8 01       	movw	r30, r16
     63e:	20 81       	ld	r18, Z
     640:	21 11       	cpse	r18, r1
     642:	fa cf       	rjmp	.-12     	; 0x638 <ftoa+0x92>
	*a++ = '.';
     644:	8e e2       	ldi	r24, 0x2E	; 46
     646:	f8 01       	movw	r30, r16
     648:	81 93       	st	Z+, r24
     64a:	8f 01       	movw	r16, r30
	long decimal = abs((long)((f - wholeNum) * p[precision]));
     64c:	c7 01       	movw	r24, r14
     64e:	b6 01       	movw	r22, r12
     650:	0e 94 70 07 	call	0xee0	; 0xee0 <__floatsisf>
     654:	9b 01       	movw	r18, r22
     656:	ac 01       	movw	r20, r24
     658:	c3 01       	movw	r24, r6
     65a:	b2 01       	movw	r22, r4
     65c:	0e 94 70 06 	call	0xce0	; 0xce0 <__subsf3>
     660:	6b 01       	movw	r12, r22
     662:	7c 01       	movw	r14, r24
     664:	f5 01       	movw	r30, r10
     666:	ee 0f       	add	r30, r30
     668:	ff 1f       	adc	r31, r31
     66a:	ee 0f       	add	r30, r30
     66c:	ff 1f       	adc	r31, r31
     66e:	ec 0f       	add	r30, r28
     670:	fd 1f       	adc	r31, r29
     672:	61 81       	ldd	r22, Z+1	; 0x01
     674:	72 81       	ldd	r23, Z+2	; 0x02
     676:	83 81       	ldd	r24, Z+3	; 0x03
     678:	94 81       	ldd	r25, Z+4	; 0x04
     67a:	0e 94 70 07 	call	0xee0	; 0xee0 <__floatsisf>
     67e:	9b 01       	movw	r18, r22
     680:	ac 01       	movw	r20, r24
     682:	c7 01       	movw	r24, r14
     684:	b6 01       	movw	r22, r12
     686:	0e 94 4f 08 	call	0x109e	; 0x109e <__mulsf3>
     68a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fixsfsi>
     68e:	cb 01       	movw	r24, r22
     690:	99 23       	and	r25, r25
     692:	1c f4       	brge	.+6      	; 0x69a <ftoa+0xf4>
     694:	91 95       	neg	r25
     696:	81 95       	neg	r24
     698:	91 09       	sbc	r25, r1
	itoa(decimal, a, 10);
     69a:	4a e0       	ldi	r20, 0x0A	; 10
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	b8 01       	movw	r22, r16
     6a0:	0e 94 b2 08 	call	0x1164	; 0x1164 <itoa>
	return ret;
}
     6a4:	88 2d       	mov	r24, r8
     6a6:	99 2d       	mov	r25, r9
     6a8:	a4 96       	adiw	r28, 0x24	; 36
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	df 90       	pop	r13
     6c2:	cf 90       	pop	r12
     6c4:	bf 90       	pop	r11
     6c6:	af 90       	pop	r10
     6c8:	9f 90       	pop	r9
     6ca:	8f 90       	pop	r8
     6cc:	7f 90       	pop	r7
     6ce:	6f 90       	pop	r6
     6d0:	5f 90       	pop	r5
     6d2:	4f 90       	pop	r4
     6d4:	08 95       	ret

000006d6 <prepareDisplay>:
	lcdGoto(0,3);		// Skip to next line
	lcdPuts(line4);
}


void prepareDisplay(float voltage, float current, uint16_t frequencySetting, double f){
     6d6:	8f 92       	push	r8
     6d8:	9f 92       	push	r9
     6da:	af 92       	push	r10
     6dc:	bf 92       	push	r11
     6de:	cf 92       	push	r12
     6e0:	df 92       	push	r13
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	a8 97       	sbiw	r28, 0x28	; 40
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	cd bf       	out	0x3d, r28	; 61
     6fe:	49 01       	movw	r8, r18
     700:	5a 01       	movw	r10, r20
	char someString[40] = "";
     702:	19 82       	std	Y+1, r1	; 0x01
     704:	1a 82       	std	Y+2, r1	; 0x02
     706:	1b 82       	std	Y+3, r1	; 0x03
     708:	1c 82       	std	Y+4, r1	; 0x04
     70a:	fe 01       	movw	r30, r28
     70c:	35 96       	adiw	r30, 0x05	; 5
     70e:	24 e2       	ldi	r18, 0x24	; 36
     710:	df 01       	movw	r26, r30
     712:	1d 92       	st	X+, r1
     714:	2a 95       	dec	r18
     716:	e9 f7       	brne	.-6      	; 0x712 <prepareDisplay+0x3c>
	double temp =0.0;
	//voltage
	ftoa(someString, voltage, 2);
     718:	22 e0       	ldi	r18, 0x02	; 2
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	ab 01       	movw	r20, r22
     71e:	bc 01       	movw	r22, r24
     720:	8e 01       	movw	r16, r28
     722:	0f 5f       	subi	r16, 0xFF	; 255
     724:	1f 4f       	sbci	r17, 0xFF	; 255
     726:	c8 01       	movw	r24, r16
     728:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <ftoa>
	sprintf(line1, "Voltage:  %s V ",someString);
     72c:	1f 93       	push	r17
     72e:	0f 93       	push	r16
     730:	8f e4       	ldi	r24, 0x4F	; 79
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	9f 93       	push	r25
     736:	8f 93       	push	r24
     738:	80 ec       	ldi	r24, 0xC0	; 192
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	9f 93       	push	r25
     73e:	8f 93       	push	r24
     740:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sprintf>
	
	//current
	ftoa(someString, current, 2);
     744:	22 e0       	ldi	r18, 0x02	; 2
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	b5 01       	movw	r22, r10
     74a:	a4 01       	movw	r20, r8
     74c:	c8 01       	movw	r24, r16
     74e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <ftoa>
	sprintf(line2, "Current:   %s mA ",someString);
     752:	1f 93       	push	r17
     754:	0f 93       	push	r16
     756:	8f e5       	ldi	r24, 0x5F	; 95
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	9f 93       	push	r25
     75c:	8f 93       	push	r24
     75e:	80 e1       	ldi	r24, 0x10	; 16
     760:	92 e0       	ldi	r25, 0x02	; 2
     762:	9f 93       	push	r25
     764:	8f 93       	push	r24
     766:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sprintf>
	
	
	//frequencyRead
	sprintf(line3, "Reading: %4ld kHz ", (long)f );
     76a:	c7 01       	movw	r24, r14
     76c:	b6 01       	movw	r22, r12
     76e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fixsfsi>
     772:	9f 93       	push	r25
     774:	8f 93       	push	r24
     776:	7f 93       	push	r23
     778:	6f 93       	push	r22
     77a:	81 e7       	ldi	r24, 0x71	; 113
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	9f 93       	push	r25
     780:	8f 93       	push	r24
     782:	88 ee       	ldi	r24, 0xE8	; 232
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	9f 93       	push	r25
     788:	8f 93       	push	r24
     78a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sprintf>
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	de bf       	out	0x3e, r29	; 62
     794:	0f be       	out	0x3f, r0	; 63
     796:	cd bf       	out	0x3d, r28	; 61
	//sprintf(line4, "Setting: %4ld kHz ", (long)FREQUENCY );
	
	//ftoa(someString, f, 0);
	//sprintf(line4, " %4ld", someString);
	
}
     798:	a8 96       	adiw	r28, 0x28	; 40
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	df 90       	pop	r13
     7b2:	cf 90       	pop	r12
     7b4:	bf 90       	pop	r11
     7b6:	af 90       	pop	r10
     7b8:	9f 90       	pop	r9
     7ba:	8f 90       	pop	r8
     7bc:	08 95       	ret

000007be <led1on>:

#pragma region LED functions

void led1on(void){
	//set one high and the other low
	PORTD |= (1<<PD1); 
     7be:	59 9a       	sbi	0x0b, 1	; 11
	PORTD &= ~(1<<PD0);
     7c0:	58 98       	cbi	0x0b, 0	; 11
     7c2:	08 95       	ret

000007c4 <setFrequency>:
#pragma region Frequency and ADC functions

///@description:	sets Si5351 frequency to the
///@returns 0 if i2c device is accessible, 1 if not
///@param f is a 10-bit number read from the ADC to set the frequency
uint8_t setFrequency(uint16_t f){
     7c4:	8f 92       	push	r8
     7c6:	9f 92       	push	r9
     7c8:	af 92       	push	r10
     7ca:	bf 92       	push	r11
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
	M0 = 9 + (f*deltaM0);
     7dc:	bc 01       	movw	r22, r24
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 6e 07 	call	0xedc	; 0xedc <__floatunsisf>
     7e6:	20 91 04 01 	lds	r18, 0x0104
     7ea:	30 91 05 01 	lds	r19, 0x0105
     7ee:	40 91 06 01 	lds	r20, 0x0106
     7f2:	50 91 07 01 	lds	r21, 0x0107
     7f6:	0e 94 4f 08 	call	0x109e	; 0x109e <__mulsf3>
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	40 e1       	ldi	r20, 0x10	; 16
     800:	51 e4       	ldi	r21, 0x41	; 65
     802:	0e 94 71 06 	call	0xce2	; 0xce2 <__addsf3>
     806:	06 2f       	mov	r16, r22
     808:	17 2f       	mov	r17, r23
     80a:	d8 2f       	mov	r29, r24
     80c:	c9 2f       	mov	r28, r25
     80e:	86 2f       	mov	r24, r22
     810:	91 2f       	mov	r25, r17
     812:	ad 2f       	mov	r26, r29
     814:	bc 2f       	mov	r27, r28
     816:	80 93 bc 01 	sts	0x01BC, r24
     81a:	90 93 bd 01 	sts	0x01BD, r25
     81e:	a0 93 be 01 	sts	0x01BE, r26
     822:	b0 93 bf 01 	sts	0x01BF, r27
	double a = floor(M0);
     826:	60 2f       	mov	r22, r16
     828:	71 2f       	mov	r23, r17
     82a:	8d 2f       	mov	r24, r29
     82c:	9c 2f       	mov	r25, r28
     82e:	0e 94 ab 07 	call	0xf56	; 0xf56 <floor>
     832:	4b 01       	movw	r8, r22
     834:	5c 01       	movw	r10, r24
	double b = floor((M0-a)*p3);
     836:	60 91 00 01 	lds	r22, 0x0100
     83a:	70 91 01 01 	lds	r23, 0x0101
     83e:	80 91 02 01 	lds	r24, 0x0102
     842:	90 91 03 01 	lds	r25, 0x0103
     846:	0e 94 6e 07 	call	0xedc	; 0xedc <__floatunsisf>
     84a:	6b 01       	movw	r12, r22
     84c:	7c 01       	movw	r14, r24
     84e:	a5 01       	movw	r20, r10
     850:	94 01       	movw	r18, r8
     852:	60 2f       	mov	r22, r16
     854:	71 2f       	mov	r23, r17
     856:	8d 2f       	mov	r24, r29
     858:	9c 2f       	mov	r25, r28
     85a:	0e 94 70 06 	call	0xce0	; 0xce0 <__subsf3>
     85e:	a7 01       	movw	r20, r14
     860:	96 01       	movw	r18, r12
     862:	0e 94 4f 08 	call	0x109e	; 0x109e <__mulsf3>
     866:	0e 94 ab 07 	call	0xf56	; 0xf56 <floor>
	uint8_t status = 1;
	
	p1 = (uint32_t)(128 * a + floor(128*b/p3)-512);
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	53 e4       	ldi	r21, 0x43	; 67
     872:	0e 94 4f 08 	call	0x109e	; 0x109e <__mulsf3>
     876:	06 2f       	mov	r16, r22
     878:	17 2f       	mov	r17, r23
     87a:	d8 2f       	mov	r29, r24
     87c:	c9 2f       	mov	r28, r25
     87e:	a7 01       	movw	r20, r14
     880:	96 01       	movw	r18, r12
     882:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__divsf3>
     886:	0e 94 ab 07 	call	0xf56	; 0xf56 <floor>
     88a:	6b 01       	movw	r12, r22
     88c:	7c 01       	movw	r14, r24
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	53 e4       	ldi	r21, 0x43	; 67
     896:	c5 01       	movw	r24, r10
     898:	b4 01       	movw	r22, r8
     89a:	0e 94 4f 08 	call	0x109e	; 0x109e <__mulsf3>
     89e:	a7 01       	movw	r20, r14
     8a0:	96 01       	movw	r18, r12
     8a2:	0e 94 71 06 	call	0xce2	; 0xce2 <__addsf3>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	54 e4       	ldi	r21, 0x44	; 68
     8ae:	0e 94 70 06 	call	0xce0	; 0xce0 <__subsf3>
     8b2:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
     8b6:	60 93 90 01 	sts	0x0190, r22
     8ba:	70 93 91 01 	sts	0x0191, r23
     8be:	80 93 92 01 	sts	0x0192, r24
     8c2:	90 93 93 01 	sts	0x0193, r25
	p2 = (uint32_t)(128 * b + floor(128*b));
     8c6:	60 2f       	mov	r22, r16
     8c8:	71 2f       	mov	r23, r17
     8ca:	8d 2f       	mov	r24, r29
     8cc:	9c 2f       	mov	r25, r28
     8ce:	0e 94 ab 07 	call	0xf56	; 0xf56 <floor>
     8d2:	9b 01       	movw	r18, r22
     8d4:	ac 01       	movw	r20, r24
     8d6:	60 2f       	mov	r22, r16
     8d8:	71 2f       	mov	r23, r17
     8da:	8d 2f       	mov	r24, r29
     8dc:	9c 2f       	mov	r25, r28
     8de:	0e 94 71 06 	call	0xce2	; 0xce2 <__addsf3>
     8e2:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
     8e6:	60 93 8c 01 	sts	0x018C, r22
     8ea:	70 93 8d 01 	sts	0x018D, r23
     8ee:	80 93 8e 01 	sts	0x018E, r24
     8f2:	90 93 8f 01 	sts	0x018F, r25
	
	
	//Disable outputs 1=disable
	SI5351_write(SI5351_REG_OUTPUT_ENABLE_CONTROL, 0xFF);
     8f6:	6f ef       	ldi	r22, 0xFF	; 255
     8f8:	83 e0       	ldi	r24, 0x03	; 3
     8fa:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	
	
	status |= (SI5351_configureMultisynth(1, p1, p2, p3, R0));
     8fe:	c0 90 00 01 	lds	r12, 0x0100
     902:	d0 90 01 01 	lds	r13, 0x0101
     906:	e0 90 02 01 	lds	r14, 0x0102
     90a:	f0 90 03 01 	lds	r15, 0x0103
     90e:	00 91 8c 01 	lds	r16, 0x018C
     912:	10 91 8d 01 	lds	r17, 0x018D
     916:	20 91 8e 01 	lds	r18, 0x018E
     91a:	30 91 8f 01 	lds	r19, 0x018F
     91e:	40 91 90 01 	lds	r20, 0x0190
     922:	50 91 91 01 	lds	r21, 0x0191
     926:	60 91 92 01 	lds	r22, 0x0192
     92a:	70 91 93 01 	lds	r23, 0x0193
     92e:	0f 2e       	mov	r0, r31
     930:	f5 e0       	ldi	r31, 0x05	; 5
     932:	af 2e       	mov	r10, r31
     934:	f0 2d       	mov	r31, r0
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	0e 94 96 01 	call	0x32c	; 0x32c <SI5351_configureMultisynth>
     93c:	c8 2f       	mov	r28, r24
	status |= (SI5351_configureMultisynth(0, p1, p2, p3, R0));
     93e:	c0 90 00 01 	lds	r12, 0x0100
     942:	d0 90 01 01 	lds	r13, 0x0101
     946:	e0 90 02 01 	lds	r14, 0x0102
     94a:	f0 90 03 01 	lds	r15, 0x0103
     94e:	00 91 8c 01 	lds	r16, 0x018C
     952:	10 91 8d 01 	lds	r17, 0x018D
     956:	20 91 8e 01 	lds	r18, 0x018E
     95a:	30 91 8f 01 	lds	r19, 0x018F
     95e:	40 91 90 01 	lds	r20, 0x0190
     962:	50 91 91 01 	lds	r21, 0x0191
     966:	60 91 92 01 	lds	r22, 0x0192
     96a:	70 91 93 01 	lds	r23, 0x0193
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	0e 94 96 01 	call	0x32c	; 0x32c <SI5351_configureMultisynth>
	
	//Disable outputs 1=disable
	SI5351_write(SI5351_REG_OUTPUT_ENABLE_CONTROL, 0xFF);
	
	
	status |= (SI5351_configureMultisynth(1, p1, p2, p3, R0));
     974:	c8 2b       	or	r28, r24
	status |= (SI5351_configureMultisynth(0, p1, p2, p3, R0));
	
	//Apply PLLA & PLLB soft reset
	SI5351_write(SI5351_REG_PLL_RESET, 0xA0);
     976:	60 ea       	ldi	r22, 0xA0	; 160
     978:	81 eb       	ldi	r24, 0xB1	; 177
     97a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	
	//Enable outputs 1=disable 0=enable
	SI5351_write(SI5351_REG_OUTPUT_ENABLE_CONTROL, 0x00);
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	83 e0       	ldi	r24, 0x03	; 3
     982:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	//deltaM0 = 95/1024 = .0927734
	//R0 = 0b101 = 5
	//Output Frequency = Fvco / (M0*R0) = 600MHz / (M0 * 5)
	//
	
}
     986:	8c 2f       	mov	r24, r28
     988:	81 60       	ori	r24, 0x01	; 1
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	bf 90       	pop	r11
     99c:	af 90       	pop	r10
     99e:	9f 90       	pop	r9
     9a0:	8f 90       	pop	r8
     9a2:	08 95       	ret

000009a4 <readFrequency>:

void readFrequency(void){
	
	//initialize
	TCCR1B = 0x00;		//stop counter
     9a4:	10 92 81 00 	sts	0x0081, r1
	TCNT1  = 0x0000;	//reset counter
     9a8:	10 92 85 00 	sts	0x0085, r1
     9ac:	10 92 84 00 	sts	0x0084, r1
	EIFR = (1<<INTF0);		//Reset flag
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	8c bb       	out	0x1c, r24	; 28
	
	//wait for edge detect
	//EIFR is the External Interrupt Flag Register
	//INTF0 is the interrupt flag for INT0
	while ((EIFR & 0x01) != (0x01));
     9b4:	e0 9b       	sbis	0x1c, 0	; 28
     9b6:	fe cf       	rjmp	.-4      	; 0x9b4 <readFrequency+0x10>
	
	//start timer
	TCCR1B = 0x01;		//start counter
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	80 93 81 00 	sts	0x0081, r24
	EIFR = (1<<INTF0);		//Reset flag
     9be:	8c bb       	out	0x1c, r24	; 28
     9c0:	88 ec       	ldi	r24, 0xC8	; 200
     9c2:	90 e0       	ldi	r25, 0x00	; 0
	
	//wait for edge detect
	for(int i=0;i<200;i++){
		while ((EIFR & 0x01) != (0x01));
		EIFR = (1<<INTF0);
     9c4:	21 e0       	ldi	r18, 0x01	; 1
	TCCR1B = 0x01;		//start counter
	EIFR = (1<<INTF0);		//Reset flag
	
	//wait for edge detect
	for(int i=0;i<200;i++){
		while ((EIFR & 0x01) != (0x01));
     9c6:	e0 9b       	sbis	0x1c, 0	; 28
     9c8:	fe cf       	rjmp	.-4      	; 0x9c6 <readFrequency+0x22>
		EIFR = (1<<INTF0);
     9ca:	2c bb       	out	0x1c, r18	; 28
     9cc:	01 97       	sbiw	r24, 0x01	; 1
	//start timer
	TCCR1B = 0x01;		//start counter
	EIFR = (1<<INTF0);		//Reset flag
	
	//wait for edge detect
	for(int i=0;i<200;i++){
     9ce:	d9 f7       	brne	.-10     	; 0x9c6 <readFrequency+0x22>
		while ((EIFR & 0x01) != (0x01));
		EIFR = (1<<INTF0);
	}
	
	//stop timer and record value into freqCount
	TCCR1B = 0x00;		//stop counter
     9d0:	10 92 81 00 	sts	0x0081, r1
	freqCount = TCNT1;
     9d4:	80 91 84 00 	lds	r24, 0x0084
     9d8:	90 91 85 00 	lds	r25, 0x0085
     9dc:	90 93 89 01 	sts	0x0189, r25
     9e0:	80 93 88 01 	sts	0x0188, r24
     9e4:	08 95       	ret

000009e6 <calculateFrequency>:
	
	// frequency = 1/period
	// frequency = 1/(62.5E-9 * (freqCount/100) * 0.978 * 1000)
	
	// 100/(62.5E-9 * 0.978 * 1000) = 1635991.82
	return (1635992/(double)freq);
     9e6:	bc 01       	movw	r22, r24
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 6e 07 	call	0xedc	; 0xedc <__floatunsisf>
     9f0:	9b 01       	movw	r18, r22
     9f2:	ac 01       	movw	r20, r24
     9f4:	60 ec       	ldi	r22, 0xC0	; 192
     9f6:	74 eb       	ldi	r23, 0xB4	; 180
     9f8:	87 ec       	ldi	r24, 0xC7	; 199
     9fa:	99 e4       	ldi	r25, 0x49	; 73
     9fc:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__divsf3>
	
	
}
     a00:	08 95       	ret

00000a02 <readADC>:
///@param		channel		The channel to perform the conversion on.
///@returns		Nothing, but ADCH and ADCL should contain the 10-bit value of the conversion upon exit.
void readADC(uint8_t channel){
	
	//set ADC channel
	ADMUX = (0x40) | channel;
     a02:	80 64       	ori	r24, 0x40	; 64
     a04:	80 93 7c 00 	sts	0x007C, r24
	
	//start conversion
	ADCSRA |= (1<<ADSC);
     a08:	ea e7       	ldi	r30, 0x7A	; 122
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	80 64       	ori	r24, 0x40	; 64
     a10:	80 83       	st	Z, r24
	
	//wait for conversion to finish (interrupt flag is set)
	while( !(ADCSRA & (1<<ADIF)) );
     a12:	80 81       	ld	r24, Z
     a14:	84 ff       	sbrs	r24, 4
     a16:	fd cf       	rjmp	.-6      	; 0xa12 <readADC+0x10>
	//while (ADCSRA & (1<<ADSC));
	
	//clear interrupt by setting ADIF to 1
	ADCSRA |= (1<<ADIF);
     a18:	ea e7       	ldi	r30, 0x7A	; 122
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	80 61       	ori	r24, 0x10	; 16
     a20:	80 83       	st	Z, r24
     a22:	08 95       	ret

00000a24 <customSetup>:
	TCCR1A = 0x00;
	TCCR1B = 0x00;
}

///Custom initialization written by my interpretation of the datasheet
void customSetup(void){
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
	//Input source select for PLLA, PLLB (0=XTAL, 1 = CLKIN)
	//SI5351_write(SI5351_REG_PLL_INPUT_SOURCE,(0<<SI5351_PLLA_SRC | 0<<SI5351_PLLB_SRC);
	
	//configure PLL Feedback Multisynth Dividers
	//Fvco needs to be between 600MHz and 900MHz
	SI5351_configureMultisynthNA(2560,0,1); //600MHz
     a2c:	e1 2c       	mov	r14, r1
     a2e:	f1 2c       	mov	r15, r1
     a30:	87 01       	movw	r16, r14
     a32:	e3 94       	inc	r14
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	a9 01       	movw	r20, r18
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	7a e0       	ldi	r23, 0x0A	; 10
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 12 02 	call	0x424	; 0x424 <SI5351_configureMultisynthNA>
	
	//set FBA_INT and FBB_INT to improve jitter since the divider is an integer
	//CLK6 and CLK7 control registers
	
	//read frequency setting from pot(10-bit) and send value to Si5351
	readADC(FREQ_SET);
     a46:	86 e0       	ldi	r24, 0x06	; 6
     a48:	0e 94 01 05 	call	0xa02	; 0xa02 <readADC>
	setFrequency(ADC);
     a4c:	80 91 78 00 	lds	r24, 0x0078
     a50:	90 91 79 00 	lds	r25, 0x0079
     a54:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <setFrequency>
	
	//SI5351_configureMultisynth(0, p1, p2, p3, R0); //
	//SI5351_configureMultisynth(1, p1, p2, p3, R0);
	
	//set the internal capacitance for the crystal 6,8, or 10pF
	SI4341_setXTALcapacitance(SI5351_XTAL_10PF);
     a58:	83 e0       	ldi	r24, 0x03	; 3
     a5a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SI4341_setXTALcapacitance>
	
	//Additional setup code would go above here before we turn on the clocks
	
	//Select MS0 as source for CLK0
	//0x0F = MS0, 8mA
	SI5351_write(SI5351_REG_CLK0_CONTROL, 0x0F);
     a5e:	6f e0       	ldi	r22, 0x0F	; 15
     a60:	80 e1       	ldi	r24, 0x10	; 16
     a62:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	
	//Select MS0 as source for CLK1, Invert the output
	//0001 1011 0x1B - MS0
	//0001 1111 0x1F - MS1
	SI5351_write(SI5351_REG_CLK1_CONTROL, 0x1F);
     a66:	6f e1       	ldi	r22, 0x1F	; 31
     a68:	81 e1       	ldi	r24, 0x11	; 17
     a6a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	
}
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	08 95       	ret

00000a78 <initXTAL>:

///@brief initialize Si5351
uint8_t initXTAL(){
     a78:	cf 93       	push	r28
	
	uint8_t result;
	SI5351_init();
     a7a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <SI5351_init>
	
	//disable outputs
	result = SI5351_write(SI5351_REG_OUTPUT_ENABLE_CONTROL, 0xFF);
     a7e:	6f ef       	ldi	r22, 0xFF	; 255
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
     a86:	c8 2f       	mov	r28, r24
	
	//powerdown all output drivers
	SI5351_write(SI5351_REG_CLK0_CONTROL, 0x80);
     a88:	60 e8       	ldi	r22, 0x80	; 128
     a8a:	80 e1       	ldi	r24, 0x10	; 16
     a8c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	SI5351_write(SI5351_REG_CLK1_CONTROL, 0x80);
     a90:	60 e8       	ldi	r22, 0x80	; 128
     a92:	81 e1       	ldi	r24, 0x11	; 17
     a94:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	SI5351_write(SI5351_REG_CLK2_CONTROL, 0x80);
     a98:	60 e8       	ldi	r22, 0x80	; 128
     a9a:	82 e1       	ldi	r24, 0x12	; 18
     a9c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	SI5351_write(SI5351_REG_CLK3_CONTROL, 0x80);
     aa0:	60 e8       	ldi	r22, 0x80	; 128
     aa2:	83 e1       	ldi	r24, 0x13	; 19
     aa4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	SI5351_write(SI5351_REG_CLK4_CONTROL, 0x80);
     aa8:	60 e8       	ldi	r22, 0x80	; 128
     aaa:	84 e1       	ldi	r24, 0x14	; 20
     aac:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	SI5351_write(SI5351_REG_CLK5_CONTROL, 0x80);
     ab0:	60 e8       	ldi	r22, 0x80	; 128
     ab2:	85 e1       	ldi	r24, 0x15	; 21
     ab4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	SI5351_write(SI5351_REG_CLK6_CONTROL, 0x80);
     ab8:	60 e8       	ldi	r22, 0x80	; 128
     aba:	86 e1       	ldi	r24, 0x16	; 22
     abc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	SI5351_write(SI5351_REG_CLK7_CONTROL, 0x80);
     ac0:	60 e8       	ldi	r22, 0x80	; 128
     ac2:	87 e1       	ldi	r24, 0x17	; 23
     ac4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	
	//Set interrupt masks (register 2)
	SI5351_write(SI5351_REG_INTERRUPT_STATUS_MASK, 0x00);
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	
	//Write new configuration
	customSetup();
     ad0:	0e 94 12 05 	call	0xa24	; 0xa24 <customSetup>
	
	
	//Apply PLLA & PLLB soft reset
	SI5351_write(SI5351_REG_PLL_RESET, 0xA0);
     ad4:	60 ea       	ldi	r22, 0xA0	; 160
     ad6:	81 eb       	ldi	r24, 0xB1	; 177
     ad8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	
	//Enable outputs CLK0 & CLK1
	//1=disable
	SI5351_write(SI5351_REG_OUTPUT_ENABLE_CONTROL, 0x00);
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	83 e0       	ldi	r24, 0x03	; 3
     ae0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <SI5351_write>
	
	return result;
}
     ae4:	8c 2f       	mov	r24, r28
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <init>:
	
	
	//LCD (outputs) on PD7:4
	//make pins outputs for bicolor LED (on pins PD1:0)
	//Frequency sense (input) on PD2
	PORTD = 0x00;
     aea:	1b b8       	out	0x0b, r1	; 11
	DDRD = 0xF3;//F0, F1, F2, F3, F4 WORKS! F8 fails
     aec:	83 ef       	ldi	r24, 0xF3	; 243
     aee:	8a b9       	out	0x0a, r24	; 10
	
	
	//turn LED on
	led1on();
     af0:	0e 94 df 03 	call	0x7be	; 0x7be <led1on>
	
	//LCD init///////////////////////////////////////////////
	lcdInit();
     af4:	0e 94 91 00 	call	0x122	; 0x122 <lcdInit>
	lcdClearDisplay();
     af8:	0e 94 7f 00 	call	0xfe	; 0xfe <lcdClearDisplay>
	
	initADC();
     afc:	0e 94 78 02 	call	0x4f0	; 0x4f0 <initADC>
	initTimer();
     b00:	0e 94 81 02 	call	0x502	; 0x502 <initTimer>
	
	return (initXTAL());
     b04:	0e 94 3c 05 	call	0xa78	; 0xa78 <initXTAL>
}
     b08:	08 95       	ret

00000b0a <main>:
     b0a:	2f ef       	ldi	r18, 0xFF	; 255
     b0c:	80 e7       	ldi	r24, 0x70	; 112
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	21 50       	subi	r18, 0x01	; 1
     b12:	80 40       	sbci	r24, 0x00	; 0
     b14:	90 40       	sbci	r25, 0x00	; 0
     b16:	e1 f7       	brne	.-8      	; 0xb10 <main+0x6>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <main+0x10>
     b1a:	00 00       	nop
	uint8_t		displaycount = 16;
	uint8_t		mode = FREQ_MODE2;
	//startup delay for LCD, etc.
	_delay_ms(100);
	
	init();
     b1c:	0e 94 75 05 	call	0xaea	; 0xaea <init>
	
	splashScreen();
     b20:	0e 94 b3 02 	call	0x566	; 0x566 <splashScreen>
	
	float		current=0.0;
	float		voltage=0.0;
	uint16_t	temp = 0,
				frequencySetting = 0,
				oldFreq = 0;
     b24:	a1 2c       	mov	r10, r1
     b26:	b1 2c       	mov	r11, r1
    {		
		
		//Voltage Sense--------------------------------------------
		//read voltage(10-bit) and prepare for LCD
		readADC(VOLTAGE_SENSE);		
		voltage = (float)ADC * Vref / 1024L;
     b28:	c8 e7       	ldi	r28, 0x78	; 120
     b2a:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {		
		
		//Voltage Sense--------------------------------------------
		//read voltage(10-bit) and prepare for LCD
		readADC(VOLTAGE_SENSE);		
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	0e 94 01 05 	call	0xa02	; 0xa02 <readADC>
		voltage = (float)ADC * Vref / 1024L;
     b32:	68 81       	ld	r22, Y
     b34:	79 81       	ldd	r23, Y+1	; 0x01
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0e 94 6e 07 	call	0xedc	; 0xedc <__floatunsisf>
     b3e:	23 e3       	ldi	r18, 0x33	; 51
     b40:	33 e3       	ldi	r19, 0x33	; 51
     b42:	43 e5       	ldi	r20, 0x53	; 83
     b44:	50 e4       	ldi	r21, 0x40	; 64
     b46:	0e 94 4f 08 	call	0x109e	; 0x109e <__mulsf3>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e8       	ldi	r20, 0x80	; 128
     b50:	5a e3       	ldi	r21, 0x3A	; 58
     b52:	0e 94 4f 08 	call	0x109e	; 0x109e <__mulsf3>
		
		
		//voltage *= 16.19;		
		voltage *= 24.86;
     b56:	28 e4       	ldi	r18, 0x48	; 72
     b58:	31 ee       	ldi	r19, 0xE1	; 225
     b5a:	46 ec       	ldi	r20, 0xC6	; 198
     b5c:	51 e4       	ldi	r21, 0x41	; 65
     b5e:	0e 94 4f 08 	call	0x109e	; 0x109e <__mulsf3>
     b62:	66 2e       	mov	r6, r22
     b64:	77 2e       	mov	r7, r23
     b66:	88 2e       	mov	r8, r24
     b68:	99 2e       	mov	r9, r25
			
		//current sense--------------------------------------------
		//read current(10-bit) 
		readADC(CURRENT_SENSE);
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	0e 94 01 05 	call	0xa02	; 0xa02 <readADC>
		current = (float)ADC * Vref / 1024L;
     b70:	68 81       	ld	r22, Y
     b72:	79 81       	ldd	r23, Y+1	; 0x01
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 6e 07 	call	0xedc	; 0xedc <__floatunsisf>
     b7c:	23 e3       	ldi	r18, 0x33	; 51
     b7e:	33 e3       	ldi	r19, 0x33	; 51
     b80:	43 e5       	ldi	r20, 0x53	; 83
     b82:	50 e4       	ldi	r21, 0x40	; 64
     b84:	0e 94 4f 08 	call	0x109e	; 0x109e <__mulsf3>
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	40 e8       	ldi	r20, 0x80	; 128
     b8e:	5a e3       	ldi	r21, 0x3A	; 58
     b90:	0e 94 4f 08 	call	0x109e	; 0x109e <__mulsf3>
		
		//convert from Voltage to Current through 0.1 ohm resistor
		current *= 225.0;	
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	41 e6       	ldi	r20, 0x61	; 97
     b9a:	53 e4       	ldi	r21, 0x43	; 67
     b9c:	0e 94 4f 08 	call	0x109e	; 0x109e <__mulsf3>
     ba0:	26 2e       	mov	r2, r22
     ba2:	37 2e       	mov	r3, r23
     ba4:	48 2e       	mov	r4, r24
     ba6:	59 2e       	mov	r5, r25
				
		//Frequency pot--------------------------------------------
		//read frequency setting from pot(10-bit) and send value to Si5351
		
		readADC(FREQ_SET);
     ba8:	86 e0       	ldi	r24, 0x06	; 6
     baa:	0e 94 01 05 	call	0xa02	; 0xa02 <readADC>
		frequencySetting = ADC;
     bae:	08 81       	ld	r16, Y
     bb0:	19 81       	ldd	r17, Y+1	; 0x01
		
		//only change Frequency of Si5351 when the pot changes
		if (abs(frequencySetting - oldFreq)>1){
     bb2:	c8 01       	movw	r24, r16
     bb4:	8a 19       	sub	r24, r10
     bb6:	9b 09       	sbc	r25, r11
     bb8:	1a f4       	brpl	.+6      	; 0xbc0 <main+0xb6>
     bba:	91 95       	neg	r25
     bbc:	81 95       	neg	r24
     bbe:	91 09       	sbc	r25, r1
     bc0:	02 97       	sbiw	r24, 0x02	; 2
     bc2:	0c f4       	brge	.+2      	; 0xbc6 <main+0xbc>
     bc4:	63 c0       	rjmp	.+198    	; 0xc8c <main+0x182>
			
			
			//Set up different scales for resolution
			if (frequencySetting<500)
     bc6:	04 3f       	cpi	r16, 0xF4	; 244
     bc8:	21 e0       	ldi	r18, 0x01	; 1
     bca:	12 07       	cpc	r17, r18
     bcc:	a0 f4       	brcc	.+40     	; 0xbf6 <main+0xec>
				temp = ((long)((double)frequencySetting*100.0/500.0));	
     bce:	b8 01       	movw	r22, r16
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 6e 07 	call	0xedc	; 0xedc <__floatunsisf>
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	48 ec       	ldi	r20, 0xC8	; 200
     bde:	52 e4       	ldi	r21, 0x42	; 66
     be0:	0e 94 4f 08 	call	0x109e	; 0x109e <__mulsf3>
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	4a ef       	ldi	r20, 0xFA	; 250
     bea:	53 e4       	ldi	r21, 0x43	; 67
     bec:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__divsf3>
     bf0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fixsfsi>
     bf4:	3b c0       	rjmp	.+118    	; 0xc6c <main+0x162>
			else if (frequencySetting<800)
     bf6:	00 32       	cpi	r16, 0x20	; 32
     bf8:	83 e0       	ldi	r24, 0x03	; 3
     bfa:	18 07       	cpc	r17, r24
     bfc:	e0 f4       	brcc	.+56     	; 0xc36 <main+0x12c>
				temp = (100 + (long)( (double)(frequencySetting-500.0)*500.0/300.0));
     bfe:	b8 01       	movw	r22, r16
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 6e 07 	call	0xedc	; 0xedc <__floatunsisf>
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	4a ef       	ldi	r20, 0xFA	; 250
     c0e:	53 e4       	ldi	r21, 0x43	; 67
     c10:	0e 94 70 06 	call	0xce0	; 0xce0 <__subsf3>
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	4a ef       	ldi	r20, 0xFA	; 250
     c1a:	53 e4       	ldi	r21, 0x43	; 67
     c1c:	0e 94 4f 08 	call	0x109e	; 0x109e <__mulsf3>
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	46 e9       	ldi	r20, 0x96	; 150
     c26:	53 e4       	ldi	r21, 0x43	; 67
     c28:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__divsf3>
     c2c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fixsfsi>
     c30:	6c 59       	subi	r22, 0x9C	; 156
     c32:	7f 4f       	sbci	r23, 0xFF	; 255
     c34:	1b c0       	rjmp	.+54     	; 0xc6c <main+0x162>
			else 
				temp = (600 + (long)( (double)(frequencySetting-800.0)*400.0/200.0));
     c36:	b8 01       	movw	r22, r16
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 6e 07 	call	0xedc	; 0xedc <__floatunsisf>
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	48 e4       	ldi	r20, 0x48	; 72
     c46:	54 e4       	ldi	r21, 0x44	; 68
     c48:	0e 94 70 06 	call	0xce0	; 0xce0 <__subsf3>
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	48 ec       	ldi	r20, 0xC8	; 200
     c52:	53 e4       	ldi	r21, 0x43	; 67
     c54:	0e 94 4f 08 	call	0x109e	; 0x109e <__mulsf3>
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	48 e4       	ldi	r20, 0x48	; 72
     c5e:	53 e4       	ldi	r21, 0x43	; 67
     c60:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__divsf3>
     c64:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__fixsfsi>
     c68:	68 5a       	subi	r22, 0xA8	; 168
     c6a:	7d 4f       	sbci	r23, 0xFD	; 253
			//from about 750kHz to 2 MHz
			else if (mode == FREQ_MODE2){
				//dividing by	6:		792k to 2M
				//dividing by	5:		704k
				//				5.5:	748k
				temp /= 5.5;
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 6e 07 	call	0xedc	; 0xedc <__floatunsisf>
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	40 eb       	ldi	r20, 0xB0	; 176
     c7a:	50 e4       	ldi	r21, 0x40	; 64
     c7c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__divsf3>
     c80:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
			}else temp = frequencySetting;
			//frequencySetting = temp;
			setFrequency(temp);	
     c84:	cb 01       	movw	r24, r22
     c86:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <setFrequency>
			oldFreq = frequencySetting;
     c8a:	58 01       	movw	r10, r16
			
		//////////////////////////////////////////////////////////////////////////				
		//Frequency Sense
		//////////////////////////////////////////////////////////////////////////
		
		readFrequency();
     c8c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <readFrequency>
		
		//////////////////////////////////////////////////////////////////////////
		frequency = calculateFrequency(freqCount);
     c90:	80 91 88 01 	lds	r24, 0x0188
     c94:	90 91 89 01 	lds	r25, 0x0189
     c98:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <calculateFrequency>
     c9c:	6b 01       	movw	r12, r22
     c9e:	7c 01       	movw	r14, r24
     ca0:	60 93 84 01 	sts	0x0184, r22
     ca4:	70 93 85 01 	sts	0x0185, r23
     ca8:	80 93 86 01 	sts	0x0186, r24
     cac:	90 93 87 01 	sts	0x0187, r25
		prepareDisplay(voltage, current, M0, frequency );
     cb0:	60 91 bc 01 	lds	r22, 0x01BC
     cb4:	70 91 bd 01 	lds	r23, 0x01BD
     cb8:	80 91 be 01 	lds	r24, 0x01BE
     cbc:	90 91 bf 01 	lds	r25, 0x01BF
     cc0:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
     cc4:	8b 01       	movw	r16, r22
     cc6:	22 2d       	mov	r18, r2
     cc8:	33 2d       	mov	r19, r3
     cca:	44 2d       	mov	r20, r4
     ccc:	55 2d       	mov	r21, r5
     cce:	66 2d       	mov	r22, r6
     cd0:	77 2d       	mov	r23, r7
     cd2:	88 2d       	mov	r24, r8
     cd4:	99 2d       	mov	r25, r9
     cd6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <prepareDisplay>
		
		//sprintf(line3, "FreqRead: %04d %03X ", freqCount, frequencySetting );
		
		displayLCD();
     cda:	0e 94 8a 02 	call	0x514	; 0x514 <displayLCD>
		
	}
     cde:	26 cf       	rjmp	.-436    	; 0xb2c <main+0x22>

00000ce0 <__subsf3>:
     ce0:	50 58       	subi	r21, 0x80	; 128

00000ce2 <__addsf3>:
     ce2:	bb 27       	eor	r27, r27
     ce4:	aa 27       	eor	r26, r26
     ce6:	0e d0       	rcall	.+28     	; 0xd04 <__addsf3x>
     ce8:	89 c1       	rjmp	.+786    	; 0xffc <__fp_round>
     cea:	7a d1       	rcall	.+756    	; 0xfe0 <__fp_pscA>
     cec:	30 f0       	brcs	.+12     	; 0xcfa <__addsf3+0x18>
     cee:	7f d1       	rcall	.+766    	; 0xfee <__fp_pscB>
     cf0:	20 f0       	brcs	.+8      	; 0xcfa <__addsf3+0x18>
     cf2:	31 f4       	brne	.+12     	; 0xd00 <__addsf3+0x1e>
     cf4:	9f 3f       	cpi	r25, 0xFF	; 255
     cf6:	11 f4       	brne	.+4      	; 0xcfc <__addsf3+0x1a>
     cf8:	1e f4       	brtc	.+6      	; 0xd00 <__addsf3+0x1e>
     cfa:	6f c1       	rjmp	.+734    	; 0xfda <__fp_nan>
     cfc:	0e f4       	brtc	.+2      	; 0xd00 <__addsf3+0x1e>
     cfe:	e0 95       	com	r30
     d00:	e7 fb       	bst	r30, 7
     d02:	3c c1       	rjmp	.+632    	; 0xf7c <__fp_inf>

00000d04 <__addsf3x>:
     d04:	e9 2f       	mov	r30, r25
     d06:	8b d1       	rcall	.+790    	; 0x101e <__fp_split3>
     d08:	80 f3       	brcs	.-32     	; 0xcea <__addsf3+0x8>
     d0a:	ba 17       	cp	r27, r26
     d0c:	62 07       	cpc	r22, r18
     d0e:	73 07       	cpc	r23, r19
     d10:	84 07       	cpc	r24, r20
     d12:	95 07       	cpc	r25, r21
     d14:	18 f0       	brcs	.+6      	; 0xd1c <__addsf3x+0x18>
     d16:	71 f4       	brne	.+28     	; 0xd34 <__addsf3x+0x30>
     d18:	9e f5       	brtc	.+102    	; 0xd80 <__addsf3x+0x7c>
     d1a:	ba c1       	rjmp	.+884    	; 0x1090 <__fp_zero>
     d1c:	0e f4       	brtc	.+2      	; 0xd20 <__addsf3x+0x1c>
     d1e:	e0 95       	com	r30
     d20:	0b 2e       	mov	r0, r27
     d22:	ba 2f       	mov	r27, r26
     d24:	a0 2d       	mov	r26, r0
     d26:	0b 01       	movw	r0, r22
     d28:	b9 01       	movw	r22, r18
     d2a:	90 01       	movw	r18, r0
     d2c:	0c 01       	movw	r0, r24
     d2e:	ca 01       	movw	r24, r20
     d30:	a0 01       	movw	r20, r0
     d32:	11 24       	eor	r1, r1
     d34:	ff 27       	eor	r31, r31
     d36:	59 1b       	sub	r21, r25
     d38:	99 f0       	breq	.+38     	; 0xd60 <__addsf3x+0x5c>
     d3a:	59 3f       	cpi	r21, 0xF9	; 249
     d3c:	50 f4       	brcc	.+20     	; 0xd52 <__addsf3x+0x4e>
     d3e:	50 3e       	cpi	r21, 0xE0	; 224
     d40:	68 f1       	brcs	.+90     	; 0xd9c <__addsf3x+0x98>
     d42:	1a 16       	cp	r1, r26
     d44:	f0 40       	sbci	r31, 0x00	; 0
     d46:	a2 2f       	mov	r26, r18
     d48:	23 2f       	mov	r18, r19
     d4a:	34 2f       	mov	r19, r20
     d4c:	44 27       	eor	r20, r20
     d4e:	58 5f       	subi	r21, 0xF8	; 248
     d50:	f3 cf       	rjmp	.-26     	; 0xd38 <__addsf3x+0x34>
     d52:	46 95       	lsr	r20
     d54:	37 95       	ror	r19
     d56:	27 95       	ror	r18
     d58:	a7 95       	ror	r26
     d5a:	f0 40       	sbci	r31, 0x00	; 0
     d5c:	53 95       	inc	r21
     d5e:	c9 f7       	brne	.-14     	; 0xd52 <__addsf3x+0x4e>
     d60:	7e f4       	brtc	.+30     	; 0xd80 <__addsf3x+0x7c>
     d62:	1f 16       	cp	r1, r31
     d64:	ba 0b       	sbc	r27, r26
     d66:	62 0b       	sbc	r22, r18
     d68:	73 0b       	sbc	r23, r19
     d6a:	84 0b       	sbc	r24, r20
     d6c:	ba f0       	brmi	.+46     	; 0xd9c <__addsf3x+0x98>
     d6e:	91 50       	subi	r25, 0x01	; 1
     d70:	a1 f0       	breq	.+40     	; 0xd9a <__addsf3x+0x96>
     d72:	ff 0f       	add	r31, r31
     d74:	bb 1f       	adc	r27, r27
     d76:	66 1f       	adc	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	88 1f       	adc	r24, r24
     d7c:	c2 f7       	brpl	.-16     	; 0xd6e <__addsf3x+0x6a>
     d7e:	0e c0       	rjmp	.+28     	; 0xd9c <__addsf3x+0x98>
     d80:	ba 0f       	add	r27, r26
     d82:	62 1f       	adc	r22, r18
     d84:	73 1f       	adc	r23, r19
     d86:	84 1f       	adc	r24, r20
     d88:	48 f4       	brcc	.+18     	; 0xd9c <__addsf3x+0x98>
     d8a:	87 95       	ror	r24
     d8c:	77 95       	ror	r23
     d8e:	67 95       	ror	r22
     d90:	b7 95       	ror	r27
     d92:	f7 95       	ror	r31
     d94:	9e 3f       	cpi	r25, 0xFE	; 254
     d96:	08 f0       	brcs	.+2      	; 0xd9a <__addsf3x+0x96>
     d98:	b3 cf       	rjmp	.-154    	; 0xd00 <__addsf3+0x1e>
     d9a:	93 95       	inc	r25
     d9c:	88 0f       	add	r24, r24
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <__addsf3x+0x9e>
     da0:	99 27       	eor	r25, r25
     da2:	ee 0f       	add	r30, r30
     da4:	97 95       	ror	r25
     da6:	87 95       	ror	r24
     da8:	08 95       	ret

00000daa <__divsf3>:
     daa:	0c d0       	rcall	.+24     	; 0xdc4 <__divsf3x>
     dac:	27 c1       	rjmp	.+590    	; 0xffc <__fp_round>
     dae:	1f d1       	rcall	.+574    	; 0xfee <__fp_pscB>
     db0:	40 f0       	brcs	.+16     	; 0xdc2 <__divsf3+0x18>
     db2:	16 d1       	rcall	.+556    	; 0xfe0 <__fp_pscA>
     db4:	30 f0       	brcs	.+12     	; 0xdc2 <__divsf3+0x18>
     db6:	21 f4       	brne	.+8      	; 0xdc0 <__divsf3+0x16>
     db8:	5f 3f       	cpi	r21, 0xFF	; 255
     dba:	19 f0       	breq	.+6      	; 0xdc2 <__divsf3+0x18>
     dbc:	df c0       	rjmp	.+446    	; 0xf7c <__fp_inf>
     dbe:	51 11       	cpse	r21, r1
     dc0:	68 c1       	rjmp	.+720    	; 0x1092 <__fp_szero>
     dc2:	0b c1       	rjmp	.+534    	; 0xfda <__fp_nan>

00000dc4 <__divsf3x>:
     dc4:	2c d1       	rcall	.+600    	; 0x101e <__fp_split3>
     dc6:	98 f3       	brcs	.-26     	; 0xdae <__divsf3+0x4>

00000dc8 <__divsf3_pse>:
     dc8:	99 23       	and	r25, r25
     dca:	c9 f3       	breq	.-14     	; 0xdbe <__divsf3+0x14>
     dcc:	55 23       	and	r21, r21
     dce:	b1 f3       	breq	.-20     	; 0xdbc <__divsf3+0x12>
     dd0:	95 1b       	sub	r25, r21
     dd2:	55 0b       	sbc	r21, r21
     dd4:	bb 27       	eor	r27, r27
     dd6:	aa 27       	eor	r26, r26
     dd8:	62 17       	cp	r22, r18
     dda:	73 07       	cpc	r23, r19
     ddc:	84 07       	cpc	r24, r20
     dde:	38 f0       	brcs	.+14     	; 0xdee <__divsf3_pse+0x26>
     de0:	9f 5f       	subi	r25, 0xFF	; 255
     de2:	5f 4f       	sbci	r21, 0xFF	; 255
     de4:	22 0f       	add	r18, r18
     de6:	33 1f       	adc	r19, r19
     de8:	44 1f       	adc	r20, r20
     dea:	aa 1f       	adc	r26, r26
     dec:	a9 f3       	breq	.-22     	; 0xdd8 <__divsf3_pse+0x10>
     dee:	33 d0       	rcall	.+102    	; 0xe56 <__divsf3_pse+0x8e>
     df0:	0e 2e       	mov	r0, r30
     df2:	3a f0       	brmi	.+14     	; 0xe02 <__divsf3_pse+0x3a>
     df4:	e0 e8       	ldi	r30, 0x80	; 128
     df6:	30 d0       	rcall	.+96     	; 0xe58 <__divsf3_pse+0x90>
     df8:	91 50       	subi	r25, 0x01	; 1
     dfa:	50 40       	sbci	r21, 0x00	; 0
     dfc:	e6 95       	lsr	r30
     dfe:	00 1c       	adc	r0, r0
     e00:	ca f7       	brpl	.-14     	; 0xdf4 <__divsf3_pse+0x2c>
     e02:	29 d0       	rcall	.+82     	; 0xe56 <__divsf3_pse+0x8e>
     e04:	fe 2f       	mov	r31, r30
     e06:	27 d0       	rcall	.+78     	; 0xe56 <__divsf3_pse+0x8e>
     e08:	66 0f       	add	r22, r22
     e0a:	77 1f       	adc	r23, r23
     e0c:	88 1f       	adc	r24, r24
     e0e:	bb 1f       	adc	r27, r27
     e10:	26 17       	cp	r18, r22
     e12:	37 07       	cpc	r19, r23
     e14:	48 07       	cpc	r20, r24
     e16:	ab 07       	cpc	r26, r27
     e18:	b0 e8       	ldi	r27, 0x80	; 128
     e1a:	09 f0       	breq	.+2      	; 0xe1e <__divsf3_pse+0x56>
     e1c:	bb 0b       	sbc	r27, r27
     e1e:	80 2d       	mov	r24, r0
     e20:	bf 01       	movw	r22, r30
     e22:	ff 27       	eor	r31, r31
     e24:	93 58       	subi	r25, 0x83	; 131
     e26:	5f 4f       	sbci	r21, 0xFF	; 255
     e28:	2a f0       	brmi	.+10     	; 0xe34 <__divsf3_pse+0x6c>
     e2a:	9e 3f       	cpi	r25, 0xFE	; 254
     e2c:	51 05       	cpc	r21, r1
     e2e:	68 f0       	brcs	.+26     	; 0xe4a <__divsf3_pse+0x82>
     e30:	a5 c0       	rjmp	.+330    	; 0xf7c <__fp_inf>
     e32:	2f c1       	rjmp	.+606    	; 0x1092 <__fp_szero>
     e34:	5f 3f       	cpi	r21, 0xFF	; 255
     e36:	ec f3       	brlt	.-6      	; 0xe32 <__divsf3_pse+0x6a>
     e38:	98 3e       	cpi	r25, 0xE8	; 232
     e3a:	dc f3       	brlt	.-10     	; 0xe32 <__divsf3_pse+0x6a>
     e3c:	86 95       	lsr	r24
     e3e:	77 95       	ror	r23
     e40:	67 95       	ror	r22
     e42:	b7 95       	ror	r27
     e44:	f7 95       	ror	r31
     e46:	9f 5f       	subi	r25, 0xFF	; 255
     e48:	c9 f7       	brne	.-14     	; 0xe3c <__divsf3_pse+0x74>
     e4a:	88 0f       	add	r24, r24
     e4c:	91 1d       	adc	r25, r1
     e4e:	96 95       	lsr	r25
     e50:	87 95       	ror	r24
     e52:	97 f9       	bld	r25, 7
     e54:	08 95       	ret
     e56:	e1 e0       	ldi	r30, 0x01	; 1
     e58:	66 0f       	add	r22, r22
     e5a:	77 1f       	adc	r23, r23
     e5c:	88 1f       	adc	r24, r24
     e5e:	bb 1f       	adc	r27, r27
     e60:	62 17       	cp	r22, r18
     e62:	73 07       	cpc	r23, r19
     e64:	84 07       	cpc	r24, r20
     e66:	ba 07       	cpc	r27, r26
     e68:	20 f0       	brcs	.+8      	; 0xe72 <__divsf3_pse+0xaa>
     e6a:	62 1b       	sub	r22, r18
     e6c:	73 0b       	sbc	r23, r19
     e6e:	84 0b       	sbc	r24, r20
     e70:	ba 0b       	sbc	r27, r26
     e72:	ee 1f       	adc	r30, r30
     e74:	88 f7       	brcc	.-30     	; 0xe58 <__divsf3_pse+0x90>
     e76:	e0 95       	com	r30
     e78:	08 95       	ret

00000e7a <__fixsfsi>:
     e7a:	04 d0       	rcall	.+8      	; 0xe84 <__fixunssfsi>
     e7c:	68 94       	set
     e7e:	b1 11       	cpse	r27, r1
     e80:	08 c1       	rjmp	.+528    	; 0x1092 <__fp_szero>
     e82:	08 95       	ret

00000e84 <__fixunssfsi>:
     e84:	d4 d0       	rcall	.+424    	; 0x102e <__fp_splitA>
     e86:	88 f0       	brcs	.+34     	; 0xeaa <__fixunssfsi+0x26>
     e88:	9f 57       	subi	r25, 0x7F	; 127
     e8a:	90 f0       	brcs	.+36     	; 0xeb0 <__fixunssfsi+0x2c>
     e8c:	b9 2f       	mov	r27, r25
     e8e:	99 27       	eor	r25, r25
     e90:	b7 51       	subi	r27, 0x17	; 23
     e92:	a0 f0       	brcs	.+40     	; 0xebc <__fixunssfsi+0x38>
     e94:	d1 f0       	breq	.+52     	; 0xeca <__fixunssfsi+0x46>
     e96:	66 0f       	add	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	88 1f       	adc	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	1a f0       	brmi	.+6      	; 0xea6 <__fixunssfsi+0x22>
     ea0:	ba 95       	dec	r27
     ea2:	c9 f7       	brne	.-14     	; 0xe96 <__fixunssfsi+0x12>
     ea4:	12 c0       	rjmp	.+36     	; 0xeca <__fixunssfsi+0x46>
     ea6:	b1 30       	cpi	r27, 0x01	; 1
     ea8:	81 f0       	breq	.+32     	; 0xeca <__fixunssfsi+0x46>
     eaa:	f2 d0       	rcall	.+484    	; 0x1090 <__fp_zero>
     eac:	b1 e0       	ldi	r27, 0x01	; 1
     eae:	08 95       	ret
     eb0:	ef c0       	rjmp	.+478    	; 0x1090 <__fp_zero>
     eb2:	67 2f       	mov	r22, r23
     eb4:	78 2f       	mov	r23, r24
     eb6:	88 27       	eor	r24, r24
     eb8:	b8 5f       	subi	r27, 0xF8	; 248
     eba:	39 f0       	breq	.+14     	; 0xeca <__fixunssfsi+0x46>
     ebc:	b9 3f       	cpi	r27, 0xF9	; 249
     ebe:	cc f3       	brlt	.-14     	; 0xeb2 <__fixunssfsi+0x2e>
     ec0:	86 95       	lsr	r24
     ec2:	77 95       	ror	r23
     ec4:	67 95       	ror	r22
     ec6:	b3 95       	inc	r27
     ec8:	d9 f7       	brne	.-10     	; 0xec0 <__fixunssfsi+0x3c>
     eca:	3e f4       	brtc	.+14     	; 0xeda <__fixunssfsi+0x56>
     ecc:	90 95       	com	r25
     ece:	80 95       	com	r24
     ed0:	70 95       	com	r23
     ed2:	61 95       	neg	r22
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	8f 4f       	sbci	r24, 0xFF	; 255
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	08 95       	ret

00000edc <__floatunsisf>:
     edc:	e8 94       	clt
     ede:	09 c0       	rjmp	.+18     	; 0xef2 <__floatsisf+0x12>

00000ee0 <__floatsisf>:
     ee0:	97 fb       	bst	r25, 7
     ee2:	3e f4       	brtc	.+14     	; 0xef2 <__floatsisf+0x12>
     ee4:	90 95       	com	r25
     ee6:	80 95       	com	r24
     ee8:	70 95       	com	r23
     eea:	61 95       	neg	r22
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	8f 4f       	sbci	r24, 0xFF	; 255
     ef0:	9f 4f       	sbci	r25, 0xFF	; 255
     ef2:	99 23       	and	r25, r25
     ef4:	a9 f0       	breq	.+42     	; 0xf20 <__floatsisf+0x40>
     ef6:	f9 2f       	mov	r31, r25
     ef8:	96 e9       	ldi	r25, 0x96	; 150
     efa:	bb 27       	eor	r27, r27
     efc:	93 95       	inc	r25
     efe:	f6 95       	lsr	r31
     f00:	87 95       	ror	r24
     f02:	77 95       	ror	r23
     f04:	67 95       	ror	r22
     f06:	b7 95       	ror	r27
     f08:	f1 11       	cpse	r31, r1
     f0a:	f8 cf       	rjmp	.-16     	; 0xefc <__floatsisf+0x1c>
     f0c:	fa f4       	brpl	.+62     	; 0xf4c <__floatsisf+0x6c>
     f0e:	bb 0f       	add	r27, r27
     f10:	11 f4       	brne	.+4      	; 0xf16 <__floatsisf+0x36>
     f12:	60 ff       	sbrs	r22, 0
     f14:	1b c0       	rjmp	.+54     	; 0xf4c <__floatsisf+0x6c>
     f16:	6f 5f       	subi	r22, 0xFF	; 255
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	8f 4f       	sbci	r24, 0xFF	; 255
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	16 c0       	rjmp	.+44     	; 0xf4c <__floatsisf+0x6c>
     f20:	88 23       	and	r24, r24
     f22:	11 f0       	breq	.+4      	; 0xf28 <__floatsisf+0x48>
     f24:	96 e9       	ldi	r25, 0x96	; 150
     f26:	11 c0       	rjmp	.+34     	; 0xf4a <__floatsisf+0x6a>
     f28:	77 23       	and	r23, r23
     f2a:	21 f0       	breq	.+8      	; 0xf34 <__floatsisf+0x54>
     f2c:	9e e8       	ldi	r25, 0x8E	; 142
     f2e:	87 2f       	mov	r24, r23
     f30:	76 2f       	mov	r23, r22
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <__floatsisf+0x5e>
     f34:	66 23       	and	r22, r22
     f36:	71 f0       	breq	.+28     	; 0xf54 <__floatsisf+0x74>
     f38:	96 e8       	ldi	r25, 0x86	; 134
     f3a:	86 2f       	mov	r24, r22
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	2a f0       	brmi	.+10     	; 0xf4c <__floatsisf+0x6c>
     f42:	9a 95       	dec	r25
     f44:	66 0f       	add	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	88 1f       	adc	r24, r24
     f4a:	da f7       	brpl	.-10     	; 0xf42 <__floatsisf+0x62>
     f4c:	88 0f       	add	r24, r24
     f4e:	96 95       	lsr	r25
     f50:	87 95       	ror	r24
     f52:	97 f9       	bld	r25, 7
     f54:	08 95       	ret

00000f56 <floor>:
     f56:	85 d0       	rcall	.+266    	; 0x1062 <__fp_trunc>
     f58:	80 f0       	brcs	.+32     	; 0xf7a <floor+0x24>
     f5a:	9f 37       	cpi	r25, 0x7F	; 127
     f5c:	40 f4       	brcc	.+16     	; 0xf6e <floor+0x18>
     f5e:	91 11       	cpse	r25, r1
     f60:	0e f0       	brts	.+2      	; 0xf64 <floor+0xe>
     f62:	97 c0       	rjmp	.+302    	; 0x1092 <__fp_szero>
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	80 e8       	ldi	r24, 0x80	; 128
     f6a:	9f eb       	ldi	r25, 0xBF	; 191
     f6c:	08 95       	ret
     f6e:	26 f4       	brtc	.+8      	; 0xf78 <floor+0x22>
     f70:	1b 16       	cp	r1, r27
     f72:	61 1d       	adc	r22, r1
     f74:	71 1d       	adc	r23, r1
     f76:	81 1d       	adc	r24, r1
     f78:	07 c0       	rjmp	.+14     	; 0xf88 <__fp_mintl>
     f7a:	21 c0       	rjmp	.+66     	; 0xfbe <__fp_mpack>

00000f7c <__fp_inf>:
     f7c:	97 f9       	bld	r25, 7
     f7e:	9f 67       	ori	r25, 0x7F	; 127
     f80:	80 e8       	ldi	r24, 0x80	; 128
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	08 95       	ret

00000f88 <__fp_mintl>:
     f88:	88 23       	and	r24, r24
     f8a:	71 f4       	brne	.+28     	; 0xfa8 <__fp_mintl+0x20>
     f8c:	77 23       	and	r23, r23
     f8e:	21 f0       	breq	.+8      	; 0xf98 <__fp_mintl+0x10>
     f90:	98 50       	subi	r25, 0x08	; 8
     f92:	87 2b       	or	r24, r23
     f94:	76 2f       	mov	r23, r22
     f96:	07 c0       	rjmp	.+14     	; 0xfa6 <__fp_mintl+0x1e>
     f98:	66 23       	and	r22, r22
     f9a:	11 f4       	brne	.+4      	; 0xfa0 <__fp_mintl+0x18>
     f9c:	99 27       	eor	r25, r25
     f9e:	0d c0       	rjmp	.+26     	; 0xfba <__fp_mintl+0x32>
     fa0:	90 51       	subi	r25, 0x10	; 16
     fa2:	86 2b       	or	r24, r22
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	2a f0       	brmi	.+10     	; 0xfb4 <__fp_mintl+0x2c>
     faa:	9a 95       	dec	r25
     fac:	66 0f       	add	r22, r22
     fae:	77 1f       	adc	r23, r23
     fb0:	88 1f       	adc	r24, r24
     fb2:	da f7       	brpl	.-10     	; 0xfaa <__fp_mintl+0x22>
     fb4:	88 0f       	add	r24, r24
     fb6:	96 95       	lsr	r25
     fb8:	87 95       	ror	r24
     fba:	97 f9       	bld	r25, 7
     fbc:	08 95       	ret

00000fbe <__fp_mpack>:
     fbe:	9f 3f       	cpi	r25, 0xFF	; 255
     fc0:	31 f0       	breq	.+12     	; 0xfce <__fp_mpack_finite+0xc>

00000fc2 <__fp_mpack_finite>:
     fc2:	91 50       	subi	r25, 0x01	; 1
     fc4:	20 f4       	brcc	.+8      	; 0xfce <__fp_mpack_finite+0xc>
     fc6:	87 95       	ror	r24
     fc8:	77 95       	ror	r23
     fca:	67 95       	ror	r22
     fcc:	b7 95       	ror	r27
     fce:	88 0f       	add	r24, r24
     fd0:	91 1d       	adc	r25, r1
     fd2:	96 95       	lsr	r25
     fd4:	87 95       	ror	r24
     fd6:	97 f9       	bld	r25, 7
     fd8:	08 95       	ret

00000fda <__fp_nan>:
     fda:	9f ef       	ldi	r25, 0xFF	; 255
     fdc:	80 ec       	ldi	r24, 0xC0	; 192
     fde:	08 95       	ret

00000fe0 <__fp_pscA>:
     fe0:	00 24       	eor	r0, r0
     fe2:	0a 94       	dec	r0
     fe4:	16 16       	cp	r1, r22
     fe6:	17 06       	cpc	r1, r23
     fe8:	18 06       	cpc	r1, r24
     fea:	09 06       	cpc	r0, r25
     fec:	08 95       	ret

00000fee <__fp_pscB>:
     fee:	00 24       	eor	r0, r0
     ff0:	0a 94       	dec	r0
     ff2:	12 16       	cp	r1, r18
     ff4:	13 06       	cpc	r1, r19
     ff6:	14 06       	cpc	r1, r20
     ff8:	05 06       	cpc	r0, r21
     ffa:	08 95       	ret

00000ffc <__fp_round>:
     ffc:	09 2e       	mov	r0, r25
     ffe:	03 94       	inc	r0
    1000:	00 0c       	add	r0, r0
    1002:	11 f4       	brne	.+4      	; 0x1008 <__fp_round+0xc>
    1004:	88 23       	and	r24, r24
    1006:	52 f0       	brmi	.+20     	; 0x101c <__fp_round+0x20>
    1008:	bb 0f       	add	r27, r27
    100a:	40 f4       	brcc	.+16     	; 0x101c <__fp_round+0x20>
    100c:	bf 2b       	or	r27, r31
    100e:	11 f4       	brne	.+4      	; 0x1014 <__fp_round+0x18>
    1010:	60 ff       	sbrs	r22, 0
    1012:	04 c0       	rjmp	.+8      	; 0x101c <__fp_round+0x20>
    1014:	6f 5f       	subi	r22, 0xFF	; 255
    1016:	7f 4f       	sbci	r23, 0xFF	; 255
    1018:	8f 4f       	sbci	r24, 0xFF	; 255
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	08 95       	ret

0000101e <__fp_split3>:
    101e:	57 fd       	sbrc	r21, 7
    1020:	90 58       	subi	r25, 0x80	; 128
    1022:	44 0f       	add	r20, r20
    1024:	55 1f       	adc	r21, r21
    1026:	59 f0       	breq	.+22     	; 0x103e <__fp_splitA+0x10>
    1028:	5f 3f       	cpi	r21, 0xFF	; 255
    102a:	71 f0       	breq	.+28     	; 0x1048 <__fp_splitA+0x1a>
    102c:	47 95       	ror	r20

0000102e <__fp_splitA>:
    102e:	88 0f       	add	r24, r24
    1030:	97 fb       	bst	r25, 7
    1032:	99 1f       	adc	r25, r25
    1034:	61 f0       	breq	.+24     	; 0x104e <__fp_splitA+0x20>
    1036:	9f 3f       	cpi	r25, 0xFF	; 255
    1038:	79 f0       	breq	.+30     	; 0x1058 <__fp_splitA+0x2a>
    103a:	87 95       	ror	r24
    103c:	08 95       	ret
    103e:	12 16       	cp	r1, r18
    1040:	13 06       	cpc	r1, r19
    1042:	14 06       	cpc	r1, r20
    1044:	55 1f       	adc	r21, r21
    1046:	f2 cf       	rjmp	.-28     	; 0x102c <__fp_split3+0xe>
    1048:	46 95       	lsr	r20
    104a:	f1 df       	rcall	.-30     	; 0x102e <__fp_splitA>
    104c:	08 c0       	rjmp	.+16     	; 0x105e <__fp_splitA+0x30>
    104e:	16 16       	cp	r1, r22
    1050:	17 06       	cpc	r1, r23
    1052:	18 06       	cpc	r1, r24
    1054:	99 1f       	adc	r25, r25
    1056:	f1 cf       	rjmp	.-30     	; 0x103a <__fp_splitA+0xc>
    1058:	86 95       	lsr	r24
    105a:	71 05       	cpc	r23, r1
    105c:	61 05       	cpc	r22, r1
    105e:	08 94       	sec
    1060:	08 95       	ret

00001062 <__fp_trunc>:
    1062:	e5 df       	rcall	.-54     	; 0x102e <__fp_splitA>
    1064:	a0 f0       	brcs	.+40     	; 0x108e <__fp_trunc+0x2c>
    1066:	be e7       	ldi	r27, 0x7E	; 126
    1068:	b9 17       	cp	r27, r25
    106a:	88 f4       	brcc	.+34     	; 0x108e <__fp_trunc+0x2c>
    106c:	bb 27       	eor	r27, r27
    106e:	9f 38       	cpi	r25, 0x8F	; 143
    1070:	60 f4       	brcc	.+24     	; 0x108a <__fp_trunc+0x28>
    1072:	16 16       	cp	r1, r22
    1074:	b1 1d       	adc	r27, r1
    1076:	67 2f       	mov	r22, r23
    1078:	78 2f       	mov	r23, r24
    107a:	88 27       	eor	r24, r24
    107c:	98 5f       	subi	r25, 0xF8	; 248
    107e:	f7 cf       	rjmp	.-18     	; 0x106e <__fp_trunc+0xc>
    1080:	86 95       	lsr	r24
    1082:	77 95       	ror	r23
    1084:	67 95       	ror	r22
    1086:	b1 1d       	adc	r27, r1
    1088:	93 95       	inc	r25
    108a:	96 39       	cpi	r25, 0x96	; 150
    108c:	c8 f3       	brcs	.-14     	; 0x1080 <__fp_trunc+0x1e>
    108e:	08 95       	ret

00001090 <__fp_zero>:
    1090:	e8 94       	clt

00001092 <__fp_szero>:
    1092:	bb 27       	eor	r27, r27
    1094:	66 27       	eor	r22, r22
    1096:	77 27       	eor	r23, r23
    1098:	cb 01       	movw	r24, r22
    109a:	97 f9       	bld	r25, 7
    109c:	08 95       	ret

0000109e <__mulsf3>:
    109e:	0b d0       	rcall	.+22     	; 0x10b6 <__mulsf3x>
    10a0:	ad cf       	rjmp	.-166    	; 0xffc <__fp_round>
    10a2:	9e df       	rcall	.-196    	; 0xfe0 <__fp_pscA>
    10a4:	28 f0       	brcs	.+10     	; 0x10b0 <__mulsf3+0x12>
    10a6:	a3 df       	rcall	.-186    	; 0xfee <__fp_pscB>
    10a8:	18 f0       	brcs	.+6      	; 0x10b0 <__mulsf3+0x12>
    10aa:	95 23       	and	r25, r21
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <__mulsf3+0x12>
    10ae:	66 cf       	rjmp	.-308    	; 0xf7c <__fp_inf>
    10b0:	94 cf       	rjmp	.-216    	; 0xfda <__fp_nan>
    10b2:	11 24       	eor	r1, r1
    10b4:	ee cf       	rjmp	.-36     	; 0x1092 <__fp_szero>

000010b6 <__mulsf3x>:
    10b6:	b3 df       	rcall	.-154    	; 0x101e <__fp_split3>
    10b8:	a0 f3       	brcs	.-24     	; 0x10a2 <__mulsf3+0x4>

000010ba <__mulsf3_pse>:
    10ba:	95 9f       	mul	r25, r21
    10bc:	d1 f3       	breq	.-12     	; 0x10b2 <__mulsf3+0x14>
    10be:	95 0f       	add	r25, r21
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	55 1f       	adc	r21, r21
    10c4:	62 9f       	mul	r22, r18
    10c6:	f0 01       	movw	r30, r0
    10c8:	72 9f       	mul	r23, r18
    10ca:	bb 27       	eor	r27, r27
    10cc:	f0 0d       	add	r31, r0
    10ce:	b1 1d       	adc	r27, r1
    10d0:	63 9f       	mul	r22, r19
    10d2:	aa 27       	eor	r26, r26
    10d4:	f0 0d       	add	r31, r0
    10d6:	b1 1d       	adc	r27, r1
    10d8:	aa 1f       	adc	r26, r26
    10da:	64 9f       	mul	r22, r20
    10dc:	66 27       	eor	r22, r22
    10de:	b0 0d       	add	r27, r0
    10e0:	a1 1d       	adc	r26, r1
    10e2:	66 1f       	adc	r22, r22
    10e4:	82 9f       	mul	r24, r18
    10e6:	22 27       	eor	r18, r18
    10e8:	b0 0d       	add	r27, r0
    10ea:	a1 1d       	adc	r26, r1
    10ec:	62 1f       	adc	r22, r18
    10ee:	73 9f       	mul	r23, r19
    10f0:	b0 0d       	add	r27, r0
    10f2:	a1 1d       	adc	r26, r1
    10f4:	62 1f       	adc	r22, r18
    10f6:	83 9f       	mul	r24, r19
    10f8:	a0 0d       	add	r26, r0
    10fa:	61 1d       	adc	r22, r1
    10fc:	22 1f       	adc	r18, r18
    10fe:	74 9f       	mul	r23, r20
    1100:	33 27       	eor	r19, r19
    1102:	a0 0d       	add	r26, r0
    1104:	61 1d       	adc	r22, r1
    1106:	23 1f       	adc	r18, r19
    1108:	84 9f       	mul	r24, r20
    110a:	60 0d       	add	r22, r0
    110c:	21 1d       	adc	r18, r1
    110e:	82 2f       	mov	r24, r18
    1110:	76 2f       	mov	r23, r22
    1112:	6a 2f       	mov	r22, r26
    1114:	11 24       	eor	r1, r1
    1116:	9f 57       	subi	r25, 0x7F	; 127
    1118:	50 40       	sbci	r21, 0x00	; 0
    111a:	8a f0       	brmi	.+34     	; 0x113e <__mulsf3_pse+0x84>
    111c:	e1 f0       	breq	.+56     	; 0x1156 <__mulsf3_pse+0x9c>
    111e:	88 23       	and	r24, r24
    1120:	4a f0       	brmi	.+18     	; 0x1134 <__mulsf3_pse+0x7a>
    1122:	ee 0f       	add	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	bb 1f       	adc	r27, r27
    1128:	66 1f       	adc	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	91 50       	subi	r25, 0x01	; 1
    1130:	50 40       	sbci	r21, 0x00	; 0
    1132:	a9 f7       	brne	.-22     	; 0x111e <__mulsf3_pse+0x64>
    1134:	9e 3f       	cpi	r25, 0xFE	; 254
    1136:	51 05       	cpc	r21, r1
    1138:	70 f0       	brcs	.+28     	; 0x1156 <__mulsf3_pse+0x9c>
    113a:	20 cf       	rjmp	.-448    	; 0xf7c <__fp_inf>
    113c:	aa cf       	rjmp	.-172    	; 0x1092 <__fp_szero>
    113e:	5f 3f       	cpi	r21, 0xFF	; 255
    1140:	ec f3       	brlt	.-6      	; 0x113c <__mulsf3_pse+0x82>
    1142:	98 3e       	cpi	r25, 0xE8	; 232
    1144:	dc f3       	brlt	.-10     	; 0x113c <__mulsf3_pse+0x82>
    1146:	86 95       	lsr	r24
    1148:	77 95       	ror	r23
    114a:	67 95       	ror	r22
    114c:	b7 95       	ror	r27
    114e:	f7 95       	ror	r31
    1150:	e7 95       	ror	r30
    1152:	9f 5f       	subi	r25, 0xFF	; 255
    1154:	c1 f7       	brne	.-16     	; 0x1146 <__mulsf3_pse+0x8c>
    1156:	fe 2b       	or	r31, r30
    1158:	88 0f       	add	r24, r24
    115a:	91 1d       	adc	r25, r1
    115c:	96 95       	lsr	r25
    115e:	87 95       	ror	r24
    1160:	97 f9       	bld	r25, 7
    1162:	08 95       	ret

00001164 <itoa>:
    1164:	fb 01       	movw	r30, r22
    1166:	9f 01       	movw	r18, r30
    1168:	e8 94       	clt
    116a:	42 30       	cpi	r20, 0x02	; 2
    116c:	c4 f0       	brlt	.+48     	; 0x119e <itoa+0x3a>
    116e:	45 32       	cpi	r20, 0x25	; 37
    1170:	b4 f4       	brge	.+44     	; 0x119e <itoa+0x3a>
    1172:	4a 30       	cpi	r20, 0x0A	; 10
    1174:	29 f4       	brne	.+10     	; 0x1180 <itoa+0x1c>
    1176:	97 fb       	bst	r25, 7
    1178:	1e f4       	brtc	.+6      	; 0x1180 <itoa+0x1c>
    117a:	90 95       	com	r25
    117c:	81 95       	neg	r24
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	64 2f       	mov	r22, r20
    1182:	77 27       	eor	r23, r23
    1184:	0e 94 81 0b 	call	0x1702	; 0x1702 <__udivmodhi4>
    1188:	80 5d       	subi	r24, 0xD0	; 208
    118a:	8a 33       	cpi	r24, 0x3A	; 58
    118c:	0c f0       	brlt	.+2      	; 0x1190 <itoa+0x2c>
    118e:	89 5d       	subi	r24, 0xD9	; 217
    1190:	81 93       	st	Z+, r24
    1192:	cb 01       	movw	r24, r22
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	a1 f7       	brne	.-24     	; 0x1180 <itoa+0x1c>
    1198:	16 f4       	brtc	.+4      	; 0x119e <itoa+0x3a>
    119a:	5d e2       	ldi	r21, 0x2D	; 45
    119c:	51 93       	st	Z+, r21
    119e:	10 82       	st	Z, r1
    11a0:	c9 01       	movw	r24, r18
    11a2:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <strrev>

000011a6 <sprintf>:
    11a6:	ae e0       	ldi	r26, 0x0E	; 14
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e9 ed       	ldi	r30, 0xD9	; 217
    11ac:	f8 e0       	ldi	r31, 0x08	; 8
    11ae:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__prologue_saves__+0x1c>
    11b2:	0d 89       	ldd	r16, Y+21	; 0x15
    11b4:	1e 89       	ldd	r17, Y+22	; 0x16
    11b6:	86 e0       	ldi	r24, 0x06	; 6
    11b8:	8c 83       	std	Y+4, r24	; 0x04
    11ba:	1a 83       	std	Y+2, r17	; 0x02
    11bc:	09 83       	std	Y+1, r16	; 0x01
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	9f e7       	ldi	r25, 0x7F	; 127
    11c2:	9e 83       	std	Y+6, r25	; 0x06
    11c4:	8d 83       	std	Y+5, r24	; 0x05
    11c6:	ce 01       	movw	r24, r28
    11c8:	49 96       	adiw	r24, 0x19	; 25
    11ca:	ac 01       	movw	r20, r24
    11cc:	6f 89       	ldd	r22, Y+23	; 0x17
    11ce:	78 8d       	ldd	r23, Y+24	; 0x18
    11d0:	ce 01       	movw	r24, r28
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <vfprintf>
    11d8:	ef 81       	ldd	r30, Y+7	; 0x07
    11da:	f8 85       	ldd	r31, Y+8	; 0x08
    11dc:	e0 0f       	add	r30, r16
    11de:	f1 1f       	adc	r31, r17
    11e0:	10 82       	st	Z, r1
    11e2:	2e 96       	adiw	r28, 0x0e	; 14
    11e4:	e4 e0       	ldi	r30, 0x04	; 4
    11e6:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__epilogue_restores__+0x1c>

000011ea <vfprintf>:
    11ea:	ac e0       	ldi	r26, 0x0C	; 12
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	eb ef       	ldi	r30, 0xFB	; 251
    11f0:	f8 e0       	ldi	r31, 0x08	; 8
    11f2:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__prologue_saves__>
    11f6:	7c 01       	movw	r14, r24
    11f8:	6b 01       	movw	r12, r22
    11fa:	8a 01       	movw	r16, r20
    11fc:	fc 01       	movw	r30, r24
    11fe:	17 82       	std	Z+7, r1	; 0x07
    1200:	16 82       	std	Z+6, r1	; 0x06
    1202:	83 81       	ldd	r24, Z+3	; 0x03
    1204:	81 ff       	sbrs	r24, 1
    1206:	c6 c1       	rjmp	.+908    	; 0x1594 <vfprintf+0x3aa>
    1208:	88 24       	eor	r8, r8
    120a:	83 94       	inc	r8
    120c:	91 2c       	mov	r9, r1
    120e:	8c 0e       	add	r8, r28
    1210:	9d 1e       	adc	r9, r29
    1212:	f7 01       	movw	r30, r14
    1214:	93 81       	ldd	r25, Z+3	; 0x03
    1216:	f6 01       	movw	r30, r12
    1218:	93 fd       	sbrc	r25, 3
    121a:	85 91       	lpm	r24, Z+
    121c:	93 ff       	sbrs	r25, 3
    121e:	81 91       	ld	r24, Z+
    1220:	6f 01       	movw	r12, r30
    1222:	88 23       	and	r24, r24
    1224:	09 f4       	brne	.+2      	; 0x1228 <vfprintf+0x3e>
    1226:	b2 c1       	rjmp	.+868    	; 0x158c <vfprintf+0x3a2>
    1228:	85 32       	cpi	r24, 0x25	; 37
    122a:	39 f4       	brne	.+14     	; 0x123a <vfprintf+0x50>
    122c:	93 fd       	sbrc	r25, 3
    122e:	85 91       	lpm	r24, Z+
    1230:	93 ff       	sbrs	r25, 3
    1232:	81 91       	ld	r24, Z+
    1234:	6f 01       	movw	r12, r30
    1236:	85 32       	cpi	r24, 0x25	; 37
    1238:	29 f4       	brne	.+10     	; 0x1244 <vfprintf+0x5a>
    123a:	b7 01       	movw	r22, r14
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <fputc>
    1242:	e7 cf       	rjmp	.-50     	; 0x1212 <vfprintf+0x28>
    1244:	51 2c       	mov	r5, r1
    1246:	31 2c       	mov	r3, r1
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	20 32       	cpi	r18, 0x20	; 32
    124c:	a8 f4       	brcc	.+42     	; 0x1278 <vfprintf+0x8e>
    124e:	8b 32       	cpi	r24, 0x2B	; 43
    1250:	61 f0       	breq	.+24     	; 0x126a <vfprintf+0x80>
    1252:	28 f4       	brcc	.+10     	; 0x125e <vfprintf+0x74>
    1254:	80 32       	cpi	r24, 0x20	; 32
    1256:	51 f0       	breq	.+20     	; 0x126c <vfprintf+0x82>
    1258:	83 32       	cpi	r24, 0x23	; 35
    125a:	71 f4       	brne	.+28     	; 0x1278 <vfprintf+0x8e>
    125c:	0b c0       	rjmp	.+22     	; 0x1274 <vfprintf+0x8a>
    125e:	8d 32       	cpi	r24, 0x2D	; 45
    1260:	39 f0       	breq	.+14     	; 0x1270 <vfprintf+0x86>
    1262:	80 33       	cpi	r24, 0x30	; 48
    1264:	49 f4       	brne	.+18     	; 0x1278 <vfprintf+0x8e>
    1266:	21 60       	ori	r18, 0x01	; 1
    1268:	28 c0       	rjmp	.+80     	; 0x12ba <vfprintf+0xd0>
    126a:	22 60       	ori	r18, 0x02	; 2
    126c:	24 60       	ori	r18, 0x04	; 4
    126e:	25 c0       	rjmp	.+74     	; 0x12ba <vfprintf+0xd0>
    1270:	28 60       	ori	r18, 0x08	; 8
    1272:	23 c0       	rjmp	.+70     	; 0x12ba <vfprintf+0xd0>
    1274:	20 61       	ori	r18, 0x10	; 16
    1276:	21 c0       	rjmp	.+66     	; 0x12ba <vfprintf+0xd0>
    1278:	27 fd       	sbrc	r18, 7
    127a:	27 c0       	rjmp	.+78     	; 0x12ca <vfprintf+0xe0>
    127c:	38 2f       	mov	r19, r24
    127e:	30 53       	subi	r19, 0x30	; 48
    1280:	3a 30       	cpi	r19, 0x0A	; 10
    1282:	78 f4       	brcc	.+30     	; 0x12a2 <vfprintf+0xb8>
    1284:	26 ff       	sbrs	r18, 6
    1286:	06 c0       	rjmp	.+12     	; 0x1294 <vfprintf+0xaa>
    1288:	fa e0       	ldi	r31, 0x0A	; 10
    128a:	5f 9e       	mul	r5, r31
    128c:	30 0d       	add	r19, r0
    128e:	11 24       	eor	r1, r1
    1290:	53 2e       	mov	r5, r19
    1292:	13 c0       	rjmp	.+38     	; 0x12ba <vfprintf+0xd0>
    1294:	8a e0       	ldi	r24, 0x0A	; 10
    1296:	38 9e       	mul	r3, r24
    1298:	30 0d       	add	r19, r0
    129a:	11 24       	eor	r1, r1
    129c:	33 2e       	mov	r3, r19
    129e:	20 62       	ori	r18, 0x20	; 32
    12a0:	0c c0       	rjmp	.+24     	; 0x12ba <vfprintf+0xd0>
    12a2:	8e 32       	cpi	r24, 0x2E	; 46
    12a4:	21 f4       	brne	.+8      	; 0x12ae <vfprintf+0xc4>
    12a6:	26 fd       	sbrc	r18, 6
    12a8:	71 c1       	rjmp	.+738    	; 0x158c <vfprintf+0x3a2>
    12aa:	20 64       	ori	r18, 0x40	; 64
    12ac:	06 c0       	rjmp	.+12     	; 0x12ba <vfprintf+0xd0>
    12ae:	8c 36       	cpi	r24, 0x6C	; 108
    12b0:	11 f4       	brne	.+4      	; 0x12b6 <vfprintf+0xcc>
    12b2:	20 68       	ori	r18, 0x80	; 128
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <vfprintf+0xd0>
    12b6:	88 36       	cpi	r24, 0x68	; 104
    12b8:	41 f4       	brne	.+16     	; 0x12ca <vfprintf+0xe0>
    12ba:	f6 01       	movw	r30, r12
    12bc:	93 fd       	sbrc	r25, 3
    12be:	85 91       	lpm	r24, Z+
    12c0:	93 ff       	sbrs	r25, 3
    12c2:	81 91       	ld	r24, Z+
    12c4:	6f 01       	movw	r12, r30
    12c6:	81 11       	cpse	r24, r1
    12c8:	c0 cf       	rjmp	.-128    	; 0x124a <vfprintf+0x60>
    12ca:	98 2f       	mov	r25, r24
    12cc:	95 54       	subi	r25, 0x45	; 69
    12ce:	93 30       	cpi	r25, 0x03	; 3
    12d0:	18 f0       	brcs	.+6      	; 0x12d8 <vfprintf+0xee>
    12d2:	90 52       	subi	r25, 0x20	; 32
    12d4:	93 30       	cpi	r25, 0x03	; 3
    12d6:	28 f4       	brcc	.+10     	; 0x12e2 <vfprintf+0xf8>
    12d8:	0c 5f       	subi	r16, 0xFC	; 252
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
    12dc:	ff e3       	ldi	r31, 0x3F	; 63
    12de:	f9 83       	std	Y+1, r31	; 0x01
    12e0:	0d c0       	rjmp	.+26     	; 0x12fc <vfprintf+0x112>
    12e2:	83 36       	cpi	r24, 0x63	; 99
    12e4:	31 f0       	breq	.+12     	; 0x12f2 <vfprintf+0x108>
    12e6:	83 37       	cpi	r24, 0x73	; 115
    12e8:	71 f0       	breq	.+28     	; 0x1306 <vfprintf+0x11c>
    12ea:	83 35       	cpi	r24, 0x53	; 83
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <vfprintf+0x106>
    12ee:	5e c0       	rjmp	.+188    	; 0x13ac <vfprintf+0x1c2>
    12f0:	23 c0       	rjmp	.+70     	; 0x1338 <vfprintf+0x14e>
    12f2:	f8 01       	movw	r30, r16
    12f4:	80 81       	ld	r24, Z
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	0e 5f       	subi	r16, 0xFE	; 254
    12fa:	1f 4f       	sbci	r17, 0xFF	; 255
    12fc:	44 24       	eor	r4, r4
    12fe:	43 94       	inc	r4
    1300:	51 2c       	mov	r5, r1
    1302:	54 01       	movw	r10, r8
    1304:	15 c0       	rjmp	.+42     	; 0x1330 <vfprintf+0x146>
    1306:	38 01       	movw	r6, r16
    1308:	f2 e0       	ldi	r31, 0x02	; 2
    130a:	6f 0e       	add	r6, r31
    130c:	71 1c       	adc	r7, r1
    130e:	f8 01       	movw	r30, r16
    1310:	a0 80       	ld	r10, Z
    1312:	b1 80       	ldd	r11, Z+1	; 0x01
    1314:	26 ff       	sbrs	r18, 6
    1316:	03 c0       	rjmp	.+6      	; 0x131e <vfprintf+0x134>
    1318:	65 2d       	mov	r22, r5
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <vfprintf+0x138>
    131e:	6f ef       	ldi	r22, 0xFF	; 255
    1320:	7f ef       	ldi	r23, 0xFF	; 255
    1322:	c5 01       	movw	r24, r10
    1324:	2c 87       	std	Y+12, r18	; 0x0c
    1326:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <strnlen>
    132a:	2c 01       	movw	r4, r24
    132c:	83 01       	movw	r16, r6
    132e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1330:	6f e7       	ldi	r22, 0x7F	; 127
    1332:	26 2e       	mov	r2, r22
    1334:	22 22       	and	r2, r18
    1336:	18 c0       	rjmp	.+48     	; 0x1368 <vfprintf+0x17e>
    1338:	38 01       	movw	r6, r16
    133a:	f2 e0       	ldi	r31, 0x02	; 2
    133c:	6f 0e       	add	r6, r31
    133e:	71 1c       	adc	r7, r1
    1340:	f8 01       	movw	r30, r16
    1342:	a0 80       	ld	r10, Z
    1344:	b1 80       	ldd	r11, Z+1	; 0x01
    1346:	26 ff       	sbrs	r18, 6
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <vfprintf+0x166>
    134a:	65 2d       	mov	r22, r5
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <vfprintf+0x16a>
    1350:	6f ef       	ldi	r22, 0xFF	; 255
    1352:	7f ef       	ldi	r23, 0xFF	; 255
    1354:	c5 01       	movw	r24, r10
    1356:	2c 87       	std	Y+12, r18	; 0x0c
    1358:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <strnlen_P>
    135c:	2c 01       	movw	r4, r24
    135e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1360:	50 e8       	ldi	r21, 0x80	; 128
    1362:	25 2e       	mov	r2, r21
    1364:	22 2a       	or	r2, r18
    1366:	83 01       	movw	r16, r6
    1368:	23 fc       	sbrc	r2, 3
    136a:	1c c0       	rjmp	.+56     	; 0x13a4 <vfprintf+0x1ba>
    136c:	06 c0       	rjmp	.+12     	; 0x137a <vfprintf+0x190>
    136e:	b7 01       	movw	r22, r14
    1370:	80 e2       	ldi	r24, 0x20	; 32
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <fputc>
    1378:	3a 94       	dec	r3
    137a:	83 2d       	mov	r24, r3
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	48 16       	cp	r4, r24
    1380:	59 06       	cpc	r5, r25
    1382:	a8 f3       	brcs	.-22     	; 0x136e <vfprintf+0x184>
    1384:	0f c0       	rjmp	.+30     	; 0x13a4 <vfprintf+0x1ba>
    1386:	f5 01       	movw	r30, r10
    1388:	27 fc       	sbrc	r2, 7
    138a:	85 91       	lpm	r24, Z+
    138c:	27 fe       	sbrs	r2, 7
    138e:	81 91       	ld	r24, Z+
    1390:	5f 01       	movw	r10, r30
    1392:	b7 01       	movw	r22, r14
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <fputc>
    139a:	31 10       	cpse	r3, r1
    139c:	3a 94       	dec	r3
    139e:	f1 e0       	ldi	r31, 0x01	; 1
    13a0:	4f 1a       	sub	r4, r31
    13a2:	51 08       	sbc	r5, r1
    13a4:	41 14       	cp	r4, r1
    13a6:	51 04       	cpc	r5, r1
    13a8:	71 f7       	brne	.-36     	; 0x1386 <vfprintf+0x19c>
    13aa:	ed c0       	rjmp	.+474    	; 0x1586 <vfprintf+0x39c>
    13ac:	84 36       	cpi	r24, 0x64	; 100
    13ae:	11 f0       	breq	.+4      	; 0x13b4 <vfprintf+0x1ca>
    13b0:	89 36       	cpi	r24, 0x69	; 105
    13b2:	41 f5       	brne	.+80     	; 0x1404 <vfprintf+0x21a>
    13b4:	f8 01       	movw	r30, r16
    13b6:	27 ff       	sbrs	r18, 7
    13b8:	07 c0       	rjmp	.+14     	; 0x13c8 <vfprintf+0x1de>
    13ba:	60 81       	ld	r22, Z
    13bc:	71 81       	ldd	r23, Z+1	; 0x01
    13be:	82 81       	ldd	r24, Z+2	; 0x02
    13c0:	93 81       	ldd	r25, Z+3	; 0x03
    13c2:	0c 5f       	subi	r16, 0xFC	; 252
    13c4:	1f 4f       	sbci	r17, 0xFF	; 255
    13c6:	08 c0       	rjmp	.+16     	; 0x13d8 <vfprintf+0x1ee>
    13c8:	60 81       	ld	r22, Z
    13ca:	71 81       	ldd	r23, Z+1	; 0x01
    13cc:	88 27       	eor	r24, r24
    13ce:	77 fd       	sbrc	r23, 7
    13d0:	80 95       	com	r24
    13d2:	98 2f       	mov	r25, r24
    13d4:	0e 5f       	subi	r16, 0xFE	; 254
    13d6:	1f 4f       	sbci	r17, 0xFF	; 255
    13d8:	4f e6       	ldi	r20, 0x6F	; 111
    13da:	b4 2e       	mov	r11, r20
    13dc:	b2 22       	and	r11, r18
    13de:	97 ff       	sbrs	r25, 7
    13e0:	09 c0       	rjmp	.+18     	; 0x13f4 <vfprintf+0x20a>
    13e2:	90 95       	com	r25
    13e4:	80 95       	com	r24
    13e6:	70 95       	com	r23
    13e8:	61 95       	neg	r22
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	8f 4f       	sbci	r24, 0xFF	; 255
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	f0 e8       	ldi	r31, 0x80	; 128
    13f2:	bf 2a       	or	r11, r31
    13f4:	2a e0       	ldi	r18, 0x0A	; 10
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	a4 01       	movw	r20, r8
    13fa:	0e 94 23 0b 	call	0x1646	; 0x1646 <__ultoa_invert>
    13fe:	a8 2e       	mov	r10, r24
    1400:	a8 18       	sub	r10, r8
    1402:	43 c0       	rjmp	.+134    	; 0x148a <vfprintf+0x2a0>
    1404:	85 37       	cpi	r24, 0x75	; 117
    1406:	31 f4       	brne	.+12     	; 0x1414 <vfprintf+0x22a>
    1408:	3f ee       	ldi	r19, 0xEF	; 239
    140a:	b3 2e       	mov	r11, r19
    140c:	b2 22       	and	r11, r18
    140e:	2a e0       	ldi	r18, 0x0A	; 10
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	24 c0       	rjmp	.+72     	; 0x145c <vfprintf+0x272>
    1414:	99 ef       	ldi	r25, 0xF9	; 249
    1416:	b9 2e       	mov	r11, r25
    1418:	b2 22       	and	r11, r18
    141a:	8f 36       	cpi	r24, 0x6F	; 111
    141c:	b9 f0       	breq	.+46     	; 0x144c <vfprintf+0x262>
    141e:	20 f4       	brcc	.+8      	; 0x1428 <vfprintf+0x23e>
    1420:	88 35       	cpi	r24, 0x58	; 88
    1422:	09 f0       	breq	.+2      	; 0x1426 <vfprintf+0x23c>
    1424:	b3 c0       	rjmp	.+358    	; 0x158c <vfprintf+0x3a2>
    1426:	0d c0       	rjmp	.+26     	; 0x1442 <vfprintf+0x258>
    1428:	80 37       	cpi	r24, 0x70	; 112
    142a:	21 f0       	breq	.+8      	; 0x1434 <vfprintf+0x24a>
    142c:	88 37       	cpi	r24, 0x78	; 120
    142e:	09 f0       	breq	.+2      	; 0x1432 <vfprintf+0x248>
    1430:	ad c0       	rjmp	.+346    	; 0x158c <vfprintf+0x3a2>
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <vfprintf+0x24e>
    1434:	20 e1       	ldi	r18, 0x10	; 16
    1436:	b2 2a       	or	r11, r18
    1438:	b4 fe       	sbrs	r11, 4
    143a:	0b c0       	rjmp	.+22     	; 0x1452 <vfprintf+0x268>
    143c:	84 e0       	ldi	r24, 0x04	; 4
    143e:	b8 2a       	or	r11, r24
    1440:	08 c0       	rjmp	.+16     	; 0x1452 <vfprintf+0x268>
    1442:	24 ff       	sbrs	r18, 4
    1444:	09 c0       	rjmp	.+18     	; 0x1458 <vfprintf+0x26e>
    1446:	e6 e0       	ldi	r30, 0x06	; 6
    1448:	be 2a       	or	r11, r30
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <vfprintf+0x26e>
    144c:	28 e0       	ldi	r18, 0x08	; 8
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	05 c0       	rjmp	.+10     	; 0x145c <vfprintf+0x272>
    1452:	20 e1       	ldi	r18, 0x10	; 16
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	02 c0       	rjmp	.+4      	; 0x145c <vfprintf+0x272>
    1458:	20 e1       	ldi	r18, 0x10	; 16
    145a:	32 e0       	ldi	r19, 0x02	; 2
    145c:	f8 01       	movw	r30, r16
    145e:	b7 fe       	sbrs	r11, 7
    1460:	07 c0       	rjmp	.+14     	; 0x1470 <vfprintf+0x286>
    1462:	60 81       	ld	r22, Z
    1464:	71 81       	ldd	r23, Z+1	; 0x01
    1466:	82 81       	ldd	r24, Z+2	; 0x02
    1468:	93 81       	ldd	r25, Z+3	; 0x03
    146a:	0c 5f       	subi	r16, 0xFC	; 252
    146c:	1f 4f       	sbci	r17, 0xFF	; 255
    146e:	06 c0       	rjmp	.+12     	; 0x147c <vfprintf+0x292>
    1470:	60 81       	ld	r22, Z
    1472:	71 81       	ldd	r23, Z+1	; 0x01
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 5f       	subi	r16, 0xFE	; 254
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    147c:	a4 01       	movw	r20, r8
    147e:	0e 94 23 0b 	call	0x1646	; 0x1646 <__ultoa_invert>
    1482:	a8 2e       	mov	r10, r24
    1484:	a8 18       	sub	r10, r8
    1486:	ff e7       	ldi	r31, 0x7F	; 127
    1488:	bf 22       	and	r11, r31
    148a:	b6 fe       	sbrs	r11, 6
    148c:	0b c0       	rjmp	.+22     	; 0x14a4 <vfprintf+0x2ba>
    148e:	2b 2d       	mov	r18, r11
    1490:	2e 7f       	andi	r18, 0xFE	; 254
    1492:	a5 14       	cp	r10, r5
    1494:	50 f4       	brcc	.+20     	; 0x14aa <vfprintf+0x2c0>
    1496:	b4 fe       	sbrs	r11, 4
    1498:	0a c0       	rjmp	.+20     	; 0x14ae <vfprintf+0x2c4>
    149a:	b2 fc       	sbrc	r11, 2
    149c:	08 c0       	rjmp	.+16     	; 0x14ae <vfprintf+0x2c4>
    149e:	2b 2d       	mov	r18, r11
    14a0:	2e 7e       	andi	r18, 0xEE	; 238
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <vfprintf+0x2c4>
    14a4:	7a 2c       	mov	r7, r10
    14a6:	2b 2d       	mov	r18, r11
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <vfprintf+0x2c6>
    14aa:	7a 2c       	mov	r7, r10
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <vfprintf+0x2c6>
    14ae:	75 2c       	mov	r7, r5
    14b0:	24 ff       	sbrs	r18, 4
    14b2:	0d c0       	rjmp	.+26     	; 0x14ce <vfprintf+0x2e4>
    14b4:	fe 01       	movw	r30, r28
    14b6:	ea 0d       	add	r30, r10
    14b8:	f1 1d       	adc	r31, r1
    14ba:	80 81       	ld	r24, Z
    14bc:	80 33       	cpi	r24, 0x30	; 48
    14be:	11 f4       	brne	.+4      	; 0x14c4 <vfprintf+0x2da>
    14c0:	29 7e       	andi	r18, 0xE9	; 233
    14c2:	09 c0       	rjmp	.+18     	; 0x14d6 <vfprintf+0x2ec>
    14c4:	22 ff       	sbrs	r18, 2
    14c6:	06 c0       	rjmp	.+12     	; 0x14d4 <vfprintf+0x2ea>
    14c8:	73 94       	inc	r7
    14ca:	73 94       	inc	r7
    14cc:	04 c0       	rjmp	.+8      	; 0x14d6 <vfprintf+0x2ec>
    14ce:	82 2f       	mov	r24, r18
    14d0:	86 78       	andi	r24, 0x86	; 134
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <vfprintf+0x2ec>
    14d4:	73 94       	inc	r7
    14d6:	23 fd       	sbrc	r18, 3
    14d8:	14 c0       	rjmp	.+40     	; 0x1502 <vfprintf+0x318>
    14da:	20 ff       	sbrs	r18, 0
    14dc:	0f c0       	rjmp	.+30     	; 0x14fc <vfprintf+0x312>
    14de:	5a 2c       	mov	r5, r10
    14e0:	73 14       	cp	r7, r3
    14e2:	60 f4       	brcc	.+24     	; 0x14fc <vfprintf+0x312>
    14e4:	53 0c       	add	r5, r3
    14e6:	57 18       	sub	r5, r7
    14e8:	73 2c       	mov	r7, r3
    14ea:	08 c0       	rjmp	.+16     	; 0x14fc <vfprintf+0x312>
    14ec:	b7 01       	movw	r22, r14
    14ee:	80 e2       	ldi	r24, 0x20	; 32
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	2c 87       	std	Y+12, r18	; 0x0c
    14f4:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <fputc>
    14f8:	73 94       	inc	r7
    14fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    14fc:	73 14       	cp	r7, r3
    14fe:	b0 f3       	brcs	.-20     	; 0x14ec <vfprintf+0x302>
    1500:	04 c0       	rjmp	.+8      	; 0x150a <vfprintf+0x320>
    1502:	73 14       	cp	r7, r3
    1504:	10 f4       	brcc	.+4      	; 0x150a <vfprintf+0x320>
    1506:	37 18       	sub	r3, r7
    1508:	01 c0       	rjmp	.+2      	; 0x150c <vfprintf+0x322>
    150a:	31 2c       	mov	r3, r1
    150c:	24 ff       	sbrs	r18, 4
    150e:	12 c0       	rjmp	.+36     	; 0x1534 <vfprintf+0x34a>
    1510:	b7 01       	movw	r22, r14
    1512:	80 e3       	ldi	r24, 0x30	; 48
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	2c 87       	std	Y+12, r18	; 0x0c
    1518:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <fputc>
    151c:	2c 85       	ldd	r18, Y+12	; 0x0c
    151e:	22 ff       	sbrs	r18, 2
    1520:	1e c0       	rjmp	.+60     	; 0x155e <vfprintf+0x374>
    1522:	21 ff       	sbrs	r18, 1
    1524:	03 c0       	rjmp	.+6      	; 0x152c <vfprintf+0x342>
    1526:	88 e5       	ldi	r24, 0x58	; 88
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <vfprintf+0x346>
    152c:	88 e7       	ldi	r24, 0x78	; 120
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	b7 01       	movw	r22, r14
    1532:	0c c0       	rjmp	.+24     	; 0x154c <vfprintf+0x362>
    1534:	82 2f       	mov	r24, r18
    1536:	86 78       	andi	r24, 0x86	; 134
    1538:	91 f0       	breq	.+36     	; 0x155e <vfprintf+0x374>
    153a:	21 fd       	sbrc	r18, 1
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <vfprintf+0x358>
    153e:	80 e2       	ldi	r24, 0x20	; 32
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <vfprintf+0x35a>
    1542:	8b e2       	ldi	r24, 0x2B	; 43
    1544:	27 fd       	sbrc	r18, 7
    1546:	8d e2       	ldi	r24, 0x2D	; 45
    1548:	b7 01       	movw	r22, r14
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <fputc>
    1550:	06 c0       	rjmp	.+12     	; 0x155e <vfprintf+0x374>
    1552:	b7 01       	movw	r22, r14
    1554:	80 e3       	ldi	r24, 0x30	; 48
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <fputc>
    155c:	5a 94       	dec	r5
    155e:	a5 14       	cp	r10, r5
    1560:	c0 f3       	brcs	.-16     	; 0x1552 <vfprintf+0x368>
    1562:	aa 94       	dec	r10
    1564:	f4 01       	movw	r30, r8
    1566:	ea 0d       	add	r30, r10
    1568:	f1 1d       	adc	r31, r1
    156a:	b7 01       	movw	r22, r14
    156c:	80 81       	ld	r24, Z
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <fputc>
    1574:	a1 10       	cpse	r10, r1
    1576:	f5 cf       	rjmp	.-22     	; 0x1562 <vfprintf+0x378>
    1578:	06 c0       	rjmp	.+12     	; 0x1586 <vfprintf+0x39c>
    157a:	b7 01       	movw	r22, r14
    157c:	80 e2       	ldi	r24, 0x20	; 32
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <fputc>
    1584:	3a 94       	dec	r3
    1586:	31 10       	cpse	r3, r1
    1588:	f8 cf       	rjmp	.-16     	; 0x157a <vfprintf+0x390>
    158a:	43 ce       	rjmp	.-890    	; 0x1212 <vfprintf+0x28>
    158c:	f7 01       	movw	r30, r14
    158e:	26 81       	ldd	r18, Z+6	; 0x06
    1590:	37 81       	ldd	r19, Z+7	; 0x07
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <vfprintf+0x3ae>
    1594:	2f ef       	ldi	r18, 0xFF	; 255
    1596:	3f ef       	ldi	r19, 0xFF	; 255
    1598:	c9 01       	movw	r24, r18
    159a:	2c 96       	adiw	r28, 0x0c	; 12
    159c:	e2 e1       	ldi	r30, 0x12	; 18
    159e:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__epilogue_restores__>

000015a2 <strnlen_P>:
    15a2:	fc 01       	movw	r30, r24
    15a4:	05 90       	lpm	r0, Z+
    15a6:	61 50       	subi	r22, 0x01	; 1
    15a8:	70 40       	sbci	r23, 0x00	; 0
    15aa:	01 10       	cpse	r0, r1
    15ac:	d8 f7       	brcc	.-10     	; 0x15a4 <strnlen_P+0x2>
    15ae:	80 95       	com	r24
    15b0:	90 95       	com	r25
    15b2:	8e 0f       	add	r24, r30
    15b4:	9f 1f       	adc	r25, r31
    15b6:	08 95       	ret

000015b8 <strnlen>:
    15b8:	fc 01       	movw	r30, r24
    15ba:	61 50       	subi	r22, 0x01	; 1
    15bc:	70 40       	sbci	r23, 0x00	; 0
    15be:	01 90       	ld	r0, Z+
    15c0:	01 10       	cpse	r0, r1
    15c2:	d8 f7       	brcc	.-10     	; 0x15ba <strnlen+0x2>
    15c4:	80 95       	com	r24
    15c6:	90 95       	com	r25
    15c8:	8e 0f       	add	r24, r30
    15ca:	9f 1f       	adc	r25, r31
    15cc:	08 95       	ret

000015ce <strrev>:
    15ce:	dc 01       	movw	r26, r24
    15d0:	fc 01       	movw	r30, r24
    15d2:	67 2f       	mov	r22, r23
    15d4:	71 91       	ld	r23, Z+
    15d6:	77 23       	and	r23, r23
    15d8:	e1 f7       	brne	.-8      	; 0x15d2 <strrev+0x4>
    15da:	32 97       	sbiw	r30, 0x02	; 2
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <strrev+0x18>
    15de:	7c 91       	ld	r23, X
    15e0:	6d 93       	st	X+, r22
    15e2:	70 83       	st	Z, r23
    15e4:	62 91       	ld	r22, -Z
    15e6:	ae 17       	cp	r26, r30
    15e8:	bf 07       	cpc	r27, r31
    15ea:	c8 f3       	brcs	.-14     	; 0x15de <strrev+0x10>
    15ec:	08 95       	ret

000015ee <fputc>:
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	8c 01       	movw	r16, r24
    15f8:	eb 01       	movw	r28, r22
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	81 fd       	sbrc	r24, 1
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <fputc+0x18>
    1600:	0f ef       	ldi	r16, 0xFF	; 255
    1602:	1f ef       	ldi	r17, 0xFF	; 255
    1604:	1a c0       	rjmp	.+52     	; 0x163a <fputc+0x4c>
    1606:	82 ff       	sbrs	r24, 2
    1608:	0d c0       	rjmp	.+26     	; 0x1624 <fputc+0x36>
    160a:	2e 81       	ldd	r18, Y+6	; 0x06
    160c:	3f 81       	ldd	r19, Y+7	; 0x07
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	9d 81       	ldd	r25, Y+5	; 0x05
    1612:	28 17       	cp	r18, r24
    1614:	39 07       	cpc	r19, r25
    1616:	64 f4       	brge	.+24     	; 0x1630 <fputc+0x42>
    1618:	e8 81       	ld	r30, Y
    161a:	f9 81       	ldd	r31, Y+1	; 0x01
    161c:	01 93       	st	Z+, r16
    161e:	f9 83       	std	Y+1, r31	; 0x01
    1620:	e8 83       	st	Y, r30
    1622:	06 c0       	rjmp	.+12     	; 0x1630 <fputc+0x42>
    1624:	e8 85       	ldd	r30, Y+8	; 0x08
    1626:	f9 85       	ldd	r31, Y+9	; 0x09
    1628:	80 2f       	mov	r24, r16
    162a:	09 95       	icall
    162c:	89 2b       	or	r24, r25
    162e:	41 f7       	brne	.-48     	; 0x1600 <fputc+0x12>
    1630:	8e 81       	ldd	r24, Y+6	; 0x06
    1632:	9f 81       	ldd	r25, Y+7	; 0x07
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	9f 83       	std	Y+7, r25	; 0x07
    1638:	8e 83       	std	Y+6, r24	; 0x06
    163a:	c8 01       	movw	r24, r16
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	08 95       	ret

00001646 <__ultoa_invert>:
    1646:	fa 01       	movw	r30, r20
    1648:	aa 27       	eor	r26, r26
    164a:	28 30       	cpi	r18, 0x08	; 8
    164c:	51 f1       	breq	.+84     	; 0x16a2 <__ultoa_invert+0x5c>
    164e:	20 31       	cpi	r18, 0x10	; 16
    1650:	81 f1       	breq	.+96     	; 0x16b2 <__ultoa_invert+0x6c>
    1652:	e8 94       	clt
    1654:	6f 93       	push	r22
    1656:	6e 7f       	andi	r22, 0xFE	; 254
    1658:	6e 5f       	subi	r22, 0xFE	; 254
    165a:	7f 4f       	sbci	r23, 0xFF	; 255
    165c:	8f 4f       	sbci	r24, 0xFF	; 255
    165e:	9f 4f       	sbci	r25, 0xFF	; 255
    1660:	af 4f       	sbci	r26, 0xFF	; 255
    1662:	b1 e0       	ldi	r27, 0x01	; 1
    1664:	3e d0       	rcall	.+124    	; 0x16e2 <__ultoa_invert+0x9c>
    1666:	b4 e0       	ldi	r27, 0x04	; 4
    1668:	3c d0       	rcall	.+120    	; 0x16e2 <__ultoa_invert+0x9c>
    166a:	67 0f       	add	r22, r23
    166c:	78 1f       	adc	r23, r24
    166e:	89 1f       	adc	r24, r25
    1670:	9a 1f       	adc	r25, r26
    1672:	a1 1d       	adc	r26, r1
    1674:	68 0f       	add	r22, r24
    1676:	79 1f       	adc	r23, r25
    1678:	8a 1f       	adc	r24, r26
    167a:	91 1d       	adc	r25, r1
    167c:	a1 1d       	adc	r26, r1
    167e:	6a 0f       	add	r22, r26
    1680:	71 1d       	adc	r23, r1
    1682:	81 1d       	adc	r24, r1
    1684:	91 1d       	adc	r25, r1
    1686:	a1 1d       	adc	r26, r1
    1688:	20 d0       	rcall	.+64     	; 0x16ca <__ultoa_invert+0x84>
    168a:	09 f4       	brne	.+2      	; 0x168e <__ultoa_invert+0x48>
    168c:	68 94       	set
    168e:	3f 91       	pop	r19
    1690:	2a e0       	ldi	r18, 0x0A	; 10
    1692:	26 9f       	mul	r18, r22
    1694:	11 24       	eor	r1, r1
    1696:	30 19       	sub	r19, r0
    1698:	30 5d       	subi	r19, 0xD0	; 208
    169a:	31 93       	st	Z+, r19
    169c:	de f6       	brtc	.-74     	; 0x1654 <__ultoa_invert+0xe>
    169e:	cf 01       	movw	r24, r30
    16a0:	08 95       	ret
    16a2:	46 2f       	mov	r20, r22
    16a4:	47 70       	andi	r20, 0x07	; 7
    16a6:	40 5d       	subi	r20, 0xD0	; 208
    16a8:	41 93       	st	Z+, r20
    16aa:	b3 e0       	ldi	r27, 0x03	; 3
    16ac:	0f d0       	rcall	.+30     	; 0x16cc <__ultoa_invert+0x86>
    16ae:	c9 f7       	brne	.-14     	; 0x16a2 <__ultoa_invert+0x5c>
    16b0:	f6 cf       	rjmp	.-20     	; 0x169e <__ultoa_invert+0x58>
    16b2:	46 2f       	mov	r20, r22
    16b4:	4f 70       	andi	r20, 0x0F	; 15
    16b6:	40 5d       	subi	r20, 0xD0	; 208
    16b8:	4a 33       	cpi	r20, 0x3A	; 58
    16ba:	18 f0       	brcs	.+6      	; 0x16c2 <__ultoa_invert+0x7c>
    16bc:	49 5d       	subi	r20, 0xD9	; 217
    16be:	31 fd       	sbrc	r19, 1
    16c0:	40 52       	subi	r20, 0x20	; 32
    16c2:	41 93       	st	Z+, r20
    16c4:	02 d0       	rcall	.+4      	; 0x16ca <__ultoa_invert+0x84>
    16c6:	a9 f7       	brne	.-22     	; 0x16b2 <__ultoa_invert+0x6c>
    16c8:	ea cf       	rjmp	.-44     	; 0x169e <__ultoa_invert+0x58>
    16ca:	b4 e0       	ldi	r27, 0x04	; 4
    16cc:	a6 95       	lsr	r26
    16ce:	97 95       	ror	r25
    16d0:	87 95       	ror	r24
    16d2:	77 95       	ror	r23
    16d4:	67 95       	ror	r22
    16d6:	ba 95       	dec	r27
    16d8:	c9 f7       	brne	.-14     	; 0x16cc <__ultoa_invert+0x86>
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	61 05       	cpc	r22, r1
    16de:	71 05       	cpc	r23, r1
    16e0:	08 95       	ret
    16e2:	9b 01       	movw	r18, r22
    16e4:	ac 01       	movw	r20, r24
    16e6:	0a 2e       	mov	r0, r26
    16e8:	06 94       	lsr	r0
    16ea:	57 95       	ror	r21
    16ec:	47 95       	ror	r20
    16ee:	37 95       	ror	r19
    16f0:	27 95       	ror	r18
    16f2:	ba 95       	dec	r27
    16f4:	c9 f7       	brne	.-14     	; 0x16e8 <__ultoa_invert+0xa2>
    16f6:	62 0f       	add	r22, r18
    16f8:	73 1f       	adc	r23, r19
    16fa:	84 1f       	adc	r24, r20
    16fc:	95 1f       	adc	r25, r21
    16fe:	a0 1d       	adc	r26, r0
    1700:	08 95       	ret

00001702 <__udivmodhi4>:
    1702:	aa 1b       	sub	r26, r26
    1704:	bb 1b       	sub	r27, r27
    1706:	51 e1       	ldi	r21, 0x11	; 17
    1708:	07 c0       	rjmp	.+14     	; 0x1718 <__udivmodhi4_ep>

0000170a <__udivmodhi4_loop>:
    170a:	aa 1f       	adc	r26, r26
    170c:	bb 1f       	adc	r27, r27
    170e:	a6 17       	cp	r26, r22
    1710:	b7 07       	cpc	r27, r23
    1712:	10 f0       	brcs	.+4      	; 0x1718 <__udivmodhi4_ep>
    1714:	a6 1b       	sub	r26, r22
    1716:	b7 0b       	sbc	r27, r23

00001718 <__udivmodhi4_ep>:
    1718:	88 1f       	adc	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	5a 95       	dec	r21
    171e:	a9 f7       	brne	.-22     	; 0x170a <__udivmodhi4_loop>
    1720:	80 95       	com	r24
    1722:	90 95       	com	r25
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	08 95       	ret

0000172a <__prologue_saves__>:
    172a:	2f 92       	push	r2
    172c:	3f 92       	push	r3
    172e:	4f 92       	push	r4
    1730:	5f 92       	push	r5
    1732:	6f 92       	push	r6
    1734:	7f 92       	push	r7
    1736:	8f 92       	push	r8
    1738:	9f 92       	push	r9
    173a:	af 92       	push	r10
    173c:	bf 92       	push	r11
    173e:	cf 92       	push	r12
    1740:	df 92       	push	r13
    1742:	ef 92       	push	r14
    1744:	ff 92       	push	r15
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	ca 1b       	sub	r28, r26
    1754:	db 0b       	sbc	r29, r27
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	09 94       	ijmp

00001762 <__epilogue_restores__>:
    1762:	2a 88       	ldd	r2, Y+18	; 0x12
    1764:	39 88       	ldd	r3, Y+17	; 0x11
    1766:	48 88       	ldd	r4, Y+16	; 0x10
    1768:	5f 84       	ldd	r5, Y+15	; 0x0f
    176a:	6e 84       	ldd	r6, Y+14	; 0x0e
    176c:	7d 84       	ldd	r7, Y+13	; 0x0d
    176e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1770:	9b 84       	ldd	r9, Y+11	; 0x0b
    1772:	aa 84       	ldd	r10, Y+10	; 0x0a
    1774:	b9 84       	ldd	r11, Y+9	; 0x09
    1776:	c8 84       	ldd	r12, Y+8	; 0x08
    1778:	df 80       	ldd	r13, Y+7	; 0x07
    177a:	ee 80       	ldd	r14, Y+6	; 0x06
    177c:	fd 80       	ldd	r15, Y+5	; 0x05
    177e:	0c 81       	ldd	r16, Y+4	; 0x04
    1780:	1b 81       	ldd	r17, Y+3	; 0x03
    1782:	aa 81       	ldd	r26, Y+2	; 0x02
    1784:	b9 81       	ldd	r27, Y+1	; 0x01
    1786:	ce 0f       	add	r28, r30
    1788:	d1 1d       	adc	r29, r1
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	ed 01       	movw	r28, r26
    1796:	08 95       	ret

00001798 <_exit>:
    1798:	f8 94       	cli

0000179a <__stop_program>:
    179a:	ff cf       	rjmp	.-2      	; 0x179a <__stop_program>
