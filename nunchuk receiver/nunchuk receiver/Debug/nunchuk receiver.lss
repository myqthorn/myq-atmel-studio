
nunchuk receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  000010b4  00001148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  00800164  00800164  000011ac  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  000011ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fe  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000410  00000000  00000000  0000205d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004600  00000000  00000000  0000246d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eda  00000000  00000000  00006a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000015a9  00000000  00000000  00007947  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009b4  00000000  00000000  00008ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e3c  00000000  00000000  000098a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000250b  00000000  00000000  0000a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000380  00000000  00000000  0000cbeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__vector_1>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	76 05       	cpc	r23, r6

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d4 e0       	ldi	r29, 0x04	; 4
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e4 eb       	ldi	r30, 0xB4	; 180
      7e:	f0 e1       	ldi	r31, 0x10	; 16
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a4 36       	cpi	r26, 0x64	; 100
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a4 e6       	ldi	r26, 0x64	; 100
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a5 3c       	cpi	r26, 0xC5	; 197
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	ca e6       	ldi	r28, 0x6A	; 106
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	22 97       	sbiw	r28, 0x02	; 2
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 7f 05 	call	0xafe	; 0xafe <__tablejump__>
      ac:	c8 36       	cpi	r28, 0x68	; 104
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 af 04 	call	0x95e	; 0x95e <main>
      b6:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <lcdWriteNybble>:

    

//writes nybble to LCD preserving RS's current value
void lcdWriteNybble(unsigned char nybble){
    toLCD = (nybble<<4 & 0xF0) | (toLCD & 0x0F);
      be:	20 e1       	ldi	r18, 0x10	; 16
      c0:	82 9f       	mul	r24, r18
      c2:	c0 01       	movw	r24, r0
      c4:	11 24       	eor	r1, r1
      c6:	60 91 64 01 	lds	r22, 0x0164
      ca:	6f 70       	andi	r22, 0x0F	; 15
      cc:	68 2b       	or	r22, r24
      ce:	60 93 64 01 	sts	0x0164, r22
    Write23008(GPIO, toLCD);
      d2:	89 e0       	ldi	r24, 0x09	; 9
      d4:	0e 94 28 04 	call	0x850	; 0x850 <Write23008>
      d8:	08 95       	ret

000000da <lcdWrite>:
}

// write a byte to the LCD in 4 bit mode
void lcdWrite(unsigned char address, unsigned char c)
{
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	d8 2f       	mov	r29, r24
      e0:	c6 2f       	mov	r28, r22
    clockLow();
      e2:	60 91 64 01 	lds	r22, 0x0164
      e6:	6d 7f       	andi	r22, 0xFD	; 253
      e8:	60 93 64 01 	sts	0x0164, r22
      ec:	89 e0       	ldi	r24, 0x09	; 9
      ee:	0e 94 28 04 	call	0x850	; 0x850 <Write23008>
    if (address == CMD_REG){
      f2:	d1 11       	cpse	r29, r1
      f4:	09 c0       	rjmp	.+18     	; 0x108 <lcdWrite+0x2e>
        commandRegister();
      f6:	60 91 64 01 	lds	r22, 0x0164
      fa:	6e 7f       	andi	r22, 0xFE	; 254
      fc:	60 93 64 01 	sts	0x0164, r22
     100:	89 e0       	ldi	r24, 0x09	; 9
     102:	0e 94 28 04 	call	0x850	; 0x850 <Write23008>
     106:	05 c0       	rjmp	.+10     	; 0x112 <lcdWrite+0x38>
    }
    else dataRegister();
     108:	80 91 64 01 	lds	r24, 0x0164
     10c:	81 60       	ori	r24, 0x01	; 1
     10e:	80 93 64 01 	sts	0x0164, r24
     112:	60 91 64 01 	lds	r22, 0x0164
     116:	89 e0       	ldi	r24, 0x09	; 9
     118:	0e 94 28 04 	call	0x850	; 0x850 <Write23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     11c:	82 e0       	ldi	r24, 0x02	; 2
     11e:	8a 95       	dec	r24
     120:	f1 f7       	brne	.-4      	; 0x11e <lcdWrite+0x44>
     122:	00 c0       	rjmp	.+0      	; 0x124 <lcdWrite+0x4a>

    _delay_us(1);      //1 cycle = 62.5ns (nop)

    clockHigh();
     124:	60 91 64 01 	lds	r22, 0x0164
     128:	62 60       	ori	r22, 0x02	; 2
     12a:	60 93 64 01 	sts	0x0164, r22
     12e:	89 e0       	ldi	r24, 0x09	; 9
     130:	0e 94 28 04 	call	0x850	; 0x850 <Write23008>

    // Write the 4 bits non-destructively to the port
    lcdWriteNybble((c >> 4) & 0x0F);
     134:	8c 2f       	mov	r24, r28
     136:	82 95       	swap	r24
     138:	8f 70       	andi	r24, 0x0F	; 15
     13a:	0e 94 5f 00 	call	0xbe	; 0xbe <lcdWriteNybble>
     13e:	10 92 c3 01 	sts	0x01C3, r1
     142:	10 92 c2 01 	sts	0x01C2, r1
    wait(5);    //~250ns

    clockLow();
     146:	60 91 64 01 	lds	r22, 0x0164
     14a:	6d 7f       	andi	r22, 0xFD	; 253
     14c:	60 93 64 01 	sts	0x0164, r22
     150:	89 e0       	ldi	r24, 0x09	; 9
     152:	0e 94 28 04 	call	0x850	; 0x850 <Write23008>
     156:	10 92 c3 01 	sts	0x01C3, r1
     15a:	10 92 c2 01 	sts	0x01C2, r1

    wait(4);    //~200ns
    clockHigh();
     15e:	60 91 64 01 	lds	r22, 0x0164
     162:	62 60       	ori	r22, 0x02	; 2
     164:	60 93 64 01 	sts	0x0164, r22
     168:	89 e0       	ldi	r24, 0x09	; 9
     16a:	0e 94 28 04 	call	0x850	; 0x850 <Write23008>
    // Write the 4 bits non-destructively to the port
    lcdWriteNybble(c & 0x0F);
     16e:	8c 2f       	mov	r24, r28
     170:	8f 70       	andi	r24, 0x0F	; 15
     172:	0e 94 5f 00 	call	0xbe	; 0xbe <lcdWriteNybble>
     176:	10 92 c3 01 	sts	0x01C3, r1
     17a:	10 92 c2 01 	sts	0x01C2, r1

    wait(5);    //~250ns
}
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <lcdClearDisplay>:
}

void lcdClearDisplay(void)
{
    int counter;
        lcdWrite(CMD_REG, LCD_CLR);
     184:	61 e0       	ldi	r22, 0x01	; 1
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	0e 94 6d 00 	call	0xda	; 0xda <lcdWrite>

        // Reset our internal cursor position
        lcdX = 0;
     18c:	10 92 c1 01 	sts	0x01C1, r1
        lcdY = 0;
     190:	10 92 c4 01 	sts	0x01C4, r1
     194:	28 ec       	ldi	r18, 0xC8	; 200
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	44 e6       	ldi	r20, 0x64	; 100
     19a:	50 e0       	ldi	r21, 0x00	; 0
     19c:	ca 01       	movw	r24, r20
     19e:	01 97       	sbiw	r24, 0x01	; 1

        // Delay
        for (counter = 0; counter < 200; counter++) wait(100);
     1a0:	f1 f7       	brne	.-4      	; 0x19e <lcdClearDisplay+0x1a>
     1a2:	21 50       	subi	r18, 0x01	; 1
     1a4:	31 09       	sbc	r19, r1
     1a6:	d1 f7       	brne	.-12     	; 0x19c <lcdClearDisplay+0x18>
     1a8:	10 92 c3 01 	sts	0x01C3, r1
     1ac:	10 92 c2 01 	sts	0x01C2, r1
     1b0:	08 95       	ret

000001b2 <lcdInit>:

// Initialize the LCD
void lcdInit(void){
        
	//int counter;
	Init23008();
     1b2:	0e 94 3a 04 	call	0x874	; 0x874 <Init23008>
		
	Write23008(IODIR, 0x00); //Set all ports to output
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	0e 94 28 04 	call	0x850	; 0x850 <Write23008>
	Write23008(GPIO, 0x00); //Turn off all ports
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	89 e0       	ldi	r24, 0x09	; 9
     1c2:	0e 94 28 04 	call	0x850	; 0x850 <Write23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c6:	8f e2       	ldi	r24, 0x2F	; 47
     1c8:	95 e7       	ldi	r25, 0x75	; 117
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcdInit+0x18>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcdInit+0x1e>
     1d0:	00 00       	nop

    // Power up delay
    _delay_ms(15);

    clockLow();
     1d2:	60 91 64 01 	lds	r22, 0x0164
     1d6:	6d 7f       	andi	r22, 0xFD	; 253
     1d8:	60 93 64 01 	sts	0x0164, r22
     1dc:	89 e0       	ldi	r24, 0x09	; 9
     1de:	0e 94 28 04 	call	0x850	; 0x850 <Write23008>
    commandRegister();
     1e2:	60 91 64 01 	lds	r22, 0x0164
     1e6:	6e 7f       	andi	r22, 0xFE	; 254
     1e8:	60 93 64 01 	sts	0x0164, r22
     1ec:	89 e0       	ldi	r24, 0x09	; 9
     1ee:	0e 94 28 04 	call	0x850	; 0x850 <Write23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f2:	92 e0       	ldi	r25, 0x02	; 2
     1f4:	9a 95       	dec	r25
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcdInit+0x42>
     1f8:	00 c0       	rjmp	.+0      	; 0x1fa <lcdInit+0x48>
    //LCD_RS = CMD_REG; // Set RS to command register
    _delay_us(1);	//Nop();
    clockHigh();
     1fa:	60 91 64 01 	lds	r22, 0x0164
     1fe:	62 60       	ori	r22, 0x02	; 2
     200:	60 93 64 01 	sts	0x0164, r22
     204:	89 e0       	ldi	r24, 0x09	; 9
     206:	0e 94 28 04 	call	0x850	; 0x850 <Write23008>
    //Set up the 4-bit interface.
    //The LCD is defaulted into 8-bit mode.
    //lcdWriteNybble() is set up for sending the less significant nybble of
    //the byte (bits3-0) in 4-bit mode (DB7-4).  Shifting it 4 bits to the
    //right ensures that the more significant nybble will be sent to DB7-4.
    lcdWriteNybble(LCD_4BIT>>4);
     20a:	82 e0       	ldi	r24, 0x02	; 2
     20c:	0e 94 5f 00 	call	0xbe	; 0xbe <lcdWriteNybble>
     210:	10 92 c3 01 	sts	0x01C3, r1
     214:	10 92 c2 01 	sts	0x01C2, r1
    wait(5);

    clockLow();
     218:	60 91 64 01 	lds	r22, 0x0164
     21c:	6d 7f       	andi	r22, 0xFD	; 253
     21e:	60 93 64 01 	sts	0x0164, r22
     222:	89 e0       	ldi	r24, 0x09	; 9
     224:	0e 94 28 04 	call	0x850	; 0x850 <Write23008>

    //set it to 4 bit mode, 2 lines, 5x8 pixels
    lcdWrite(CMD_REG, LCD_4BIT | LCD_2LINES |LCD_5X8);
     228:	68 e2       	ldi	r22, 0x28	; 40
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	0e 94 6d 00 	call	0xda	; 0xda <lcdWrite>

    //display on, cursor off, blinking off
    lcdWrite(CMD_REG, LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
     230:	6c e0       	ldi	r22, 0x0C	; 12
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	0e 94 6d 00 	call	0xda	; 0xda <lcdWrite>

    //Increments ddram address, shift cursor
    lcdWrite(CMD_REG, LCD_INCREMENT | LCD_CURSOR_SHIFT);
     238:	66 e0       	ldi	r22, 0x06	; 6
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	0e 94 6d 00 	call	0xda	; 0xda <lcdWrite>

    // Reset our internal cursor position
    lcdX = 0;
     240:	10 92 c1 01 	sts	0x01C1, r1
    lcdY = 0;
     244:	10 92 c4 01 	sts	0x01C4, r1
     248:	08 95       	ret

0000024a <lcdGoto>:
                else lcdWrite(CMD_REG, LCD_DISPLAY_OFF);
}

// Move the cursor to the specified X,Y
void lcdGoto(int x, int y)
{
     24a:	0f 93       	push	r16
     24c:	1f 93       	push	r17
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	8c 01       	movw	r16, r24
     254:	eb 01       	movw	r28, r22
        int offset=0;

        // Select the correct line of the display
        switch (y)
     256:	62 30       	cpi	r22, 0x02	; 2
     258:	71 05       	cpc	r23, r1
     25a:	49 f0       	breq	.+18     	; 0x26e <lcdGoto+0x24>
     25c:	63 30       	cpi	r22, 0x03	; 3
     25e:	71 05       	cpc	r23, r1
     260:	49 f0       	breq	.+18     	; 0x274 <lcdGoto+0x2a>
     262:	61 30       	cpi	r22, 0x01	; 1
     264:	71 05       	cpc	r23, r1
     266:	49 f0       	breq	.+18     	; 0x27a <lcdGoto+0x30>
}

// Move the cursor to the specified X,Y
void lcdGoto(int x, int y)
{
        int offset=0;
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	08 c0       	rjmp	.+16     	; 0x27e <lcdGoto+0x34>
        {
                case 0: offset = 0x00;
                                break;
                case 1: offset = 0x40;
                                break;
                case 2: offset = 0x14;
     26e:	64 e1       	ldi	r22, 0x14	; 20
     270:	70 e0       	ldi	r23, 0x00	; 0
                                break;
     272:	05 c0       	rjmp	.+10     	; 0x27e <lcdGoto+0x34>
                case 3: offset = 0x54;
     274:	64 e5       	ldi	r22, 0x54	; 84
     276:	70 e0       	ldi	r23, 0x00	; 0
                                break;
     278:	02 c0       	rjmp	.+4      	; 0x27e <lcdGoto+0x34>
        // Select the correct line of the display
        switch (y)
        {
                case 0: offset = 0x00;
                                break;
                case 1: offset = 0x40;
     27a:	60 e4       	ldi	r22, 0x40	; 64
     27c:	70 e0       	ldi	r23, 0x00	; 0
                case 3: offset = 0x54;
                                break;
        }

        // Select the correct character of the line
        offset += x;
     27e:	60 0f       	add	r22, r16
     280:	71 1f       	adc	r23, r17

        // Send the command to the LCD
        lcdWrite(CMD_REG, LCD_SET_DDRAM | offset);
     282:	60 68       	ori	r22, 0x80	; 128
     284:	7f 6f       	ori	r23, 0xFF	; 255
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	0e 94 6d 00 	call	0xda	; 0xda <lcdWrite>

        // Reset our internal cursor position
        lcdX = x;
     28c:	00 93 c1 01 	sts	0x01C1, r16
        lcdY = y;
     290:	c0 93 c4 01 	sts	0x01C4, r28
}
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	08 95       	ret

0000029e <lcdPuts>:

// Output a string of characters to the display
void lcdPuts(const char *string)
{
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	e8 2e       	mov	r14, r24
     2ac:	f9 2e       	mov	r15, r25
     2ae:	08 2f       	mov	r16, r24
     2b0:	19 2f       	mov	r17, r25
        // Since the 4 line display is in the order line 1, line 3, line 2, line 4
        // we need to read the current cursor position and control how the text is
        // output, adjusting the cursor position as we go
        int loop;

        for (loop = 0; loop < strlen(string); loop++)
     2b2:	c0 e0       	ldi	r28, 0x00	; 0
     2b4:	d0 e0       	ldi	r29, 0x00	; 0
     2b6:	22 c0       	rjmp	.+68     	; 0x2fc <lcdPuts+0x5e>
        {
                // Write the character to the LCD
                lcdWrite(DATA_REG, string[loop]);
     2b8:	f8 01       	movw	r30, r16
     2ba:	61 91       	ld	r22, Z+
     2bc:	8f 01       	movw	r16, r30
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	0e 94 6d 00 	call	0xda	; 0xda <lcdWrite>
                lcdX++;
     2c4:	20 91 c1 01 	lds	r18, 0x01C1
     2c8:	2f 5f       	subi	r18, 0xFF	; 255

                // Have we reached the end of the line?
                if (lcdX == 40)
     2ca:	28 32       	cpi	r18, 0x28	; 40
     2cc:	19 f0       	breq	.+6      	; 0x2d4 <lcdPuts+0x36>

        for (loop = 0; loop < strlen(string); loop++)
        {
                // Write the character to the LCD
                lcdWrite(DATA_REG, string[loop]);
                lcdX++;
     2ce:	20 93 c1 01 	sts	0x01C1, r18
     2d2:	13 c0       	rjmp	.+38     	; 0x2fa <lcdPuts+0x5c>

                // Have we reached the end of the line?
                if (lcdX == 40)
                {
                        // Move to the start of the next line
                        lcdX = 0;
     2d4:	10 92 c1 01 	sts	0x01C1, r1
                        lcdY++;
     2d8:	80 91 c4 01 	lds	r24, 0x01C4
     2dc:	8f 5f       	subi	r24, 0xFF	; 255

                        // If we are off the bottom of the screen
                        // go back to the top line
                        if (lcdY == 2) lcdY = 0;
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	19 f0       	breq	.+6      	; 0x2e8 <lcdPuts+0x4a>
                // Have we reached the end of the line?
                if (lcdX == 40)
                {
                        // Move to the start of the next line
                        lcdX = 0;
                        lcdY++;
     2e2:	80 93 c4 01 	sts	0x01C4, r24
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <lcdPuts+0x4e>

                        // If we are off the bottom of the screen
                        // go back to the top line
                        if (lcdY == 2) lcdY = 0;
     2e8:	10 92 c4 01 	sts	0x01C4, r1

                        // Adjust the cursor position on the LCD
                        lcdGoto(lcdX, lcdY);
     2ec:	60 91 c4 01 	lds	r22, 0x01C4
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 25 01 	call	0x24a	; 0x24a <lcdGoto>
        // Since the 4 line display is in the order line 1, line 3, line 2, line 4
        // we need to read the current cursor position and control how the text is
        // output, adjusting the cursor position as we go
        int loop;

        for (loop = 0; loop < strlen(string); loop++)
     2fa:	21 96       	adiw	r28, 0x01	; 1
     2fc:	ee 2d       	mov	r30, r14
     2fe:	ff 2d       	mov	r31, r15
     300:	df 01       	movw	r26, r30
     302:	0d 90       	ld	r0, X+
     304:	00 20       	and	r0, r0
     306:	e9 f7       	brne	.-6      	; 0x302 <lcdPuts+0x64>
     308:	11 97       	sbiw	r26, 0x01	; 1
     30a:	ae 1b       	sub	r26, r30
     30c:	bf 0b       	sbc	r27, r31
     30e:	ca 17       	cp	r28, r26
     310:	db 07       	cpc	r29, r27
     312:	90 f2       	brcs	.-92     	; 0x2b8 <lcdPuts+0x1a>

                        // Adjust the cursor position on the LCD
                        lcdGoto(lcdX, lcdY);
                }
        }
}
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	1f 91       	pop	r17
     31a:	0f 91       	pop	r16
     31c:	ff 90       	pop	r15
     31e:	ef 90       	pop	r14
     320:	08 95       	ret

00000322 <LED1on>:
//
//     makeDownArrow(0x04);
}
//------end functions for custom characters-------------------------------------
void LED1on(void){
    toLCD |=0x04;
     322:	60 91 64 01 	lds	r22, 0x0164
     326:	64 60       	ori	r22, 0x04	; 4
     328:	60 93 64 01 	sts	0x0164, r22
    Write23008(GPIO, toLCD);
     32c:	89 e0       	ldi	r24, 0x09	; 9
     32e:	0e 94 28 04 	call	0x850	; 0x850 <Write23008>
     332:	08 95       	ret

00000334 <LED1off>:
}//LED1on

void LED1off(void){
    toLCD &=0xFB;
     334:	60 91 64 01 	lds	r22, 0x0164
     338:	6b 7f       	andi	r22, 0xFB	; 251
     33a:	60 93 64 01 	sts	0x0164, r22
    Write23008(GPIO, toLCD);
     33e:	89 e0       	ldi	r24, 0x09	; 9
     340:	0e 94 28 04 	call	0x850	; 0x850 <Write23008>
     344:	08 95       	ret

00000346 <toggleLED1>:
    toLCD &=0xF7;
    Write23008(GPIO, toLCD);
}//LED2off

void toggleLED1(void){
    if (toLCD & 0x04)  //test GP2
     346:	80 91 64 01 	lds	r24, 0x0164
     34a:	82 ff       	sbrs	r24, 2
     34c:	03 c0       	rjmp	.+6      	; 0x354 <toggleLED1+0xe>
        LED1off();
     34e:	0e 94 9a 01 	call	0x334	; 0x334 <LED1off>
     352:	08 95       	ret
    else LED1on();
     354:	0e 94 91 01 	call	0x322	; 0x322 <LED1on>
     358:	08 95       	ret

0000035a <i2c_init>:
*************************************************************************/ 
void i2c_init(void) 
{ 
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */ 
  
  TWSR = 0;                         /* no prescaler */ 
     35a:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */ 
     35e:	82 e0       	ldi	r24, 0x02	; 2
     360:	80 93 b8 00 	sts	0x00B8, r24
     364:	08 95       	ret

00000366 <i2c_start>:
unsigned char i2c_start(unsigned char address) 
{ 
    uint8_t   twst; 

   // send START condition 
   TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); 
     366:	94 ea       	ldi	r25, 0xA4	; 164
     368:	90 93 bc 00 	sts	0x00BC, r25

   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 
     36c:	ec eb       	ldi	r30, 0xBC	; 188
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	90 81       	ld	r25, Z
     372:	99 23       	and	r25, r25
     374:	ec f7       	brge	.-6      	; 0x370 <i2c_start+0xa>

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
     376:	90 91 b9 00 	lds	r25, 0x00B9
     37a:	98 7f       	andi	r25, 0xF8	; 248
   if ( (twst != TW_START) && (twst != TW_REP_START)) return 1; 
     37c:	98 30       	cpi	r25, 0x08	; 8
     37e:	11 f0       	breq	.+4      	; 0x384 <i2c_start+0x1e>
     380:	90 31       	cpi	r25, 0x10	; 16
     382:	a1 f4       	brne	.+40     	; 0x3ac <i2c_start+0x46>

   // send device address 
   TWDR = address; 
     384:	80 93 bb 00 	sts	0x00BB, r24
   TWCR = (1<<TWINT) | (1<<TWEN); 
     388:	84 e8       	ldi	r24, 0x84	; 132
     38a:	80 93 bc 00 	sts	0x00BC, r24

   // wail until transmission completed and ACK/NACK has been received 
   while(!(TWCR & (1<<TWINT))); 
     38e:	ec eb       	ldi	r30, 0xBC	; 188
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	88 23       	and	r24, r24
     396:	ec f7       	brge	.-6      	; 0x392 <i2c_start+0x2c>

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
     398:	90 91 b9 00 	lds	r25, 0x00B9
     39c:	98 7f       	andi	r25, 0xF8	; 248
   if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1; 
     39e:	98 31       	cpi	r25, 0x18	; 24
     3a0:	39 f0       	breq	.+14     	; 0x3b0 <i2c_start+0x4a>
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	90 34       	cpi	r25, 0x40	; 64
     3a6:	29 f4       	brne	.+10     	; 0x3b2 <i2c_start+0x4c>
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	08 95       	ret
   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
   if ( (twst != TW_START) && (twst != TW_REP_START)) return 1; 
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	08 95       	ret

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
   if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1; 

   return 0; 
     3b0:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */ 
     3b2:	08 95       	ret

000003b4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus 
*************************************************************************/ 
void i2c_stop(void) 
{ 
    /* send stop condition */ 
   TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); 
     3b4:	84 e9       	ldi	r24, 0x94	; 148
     3b6:	80 93 bc 00 	sts	0x00BC, r24
    
   // wait until stop condition is executed and bus released 
   while(TWCR & (1<<TWSTO)); 
     3ba:	ec eb       	ldi	r30, 0xBC	; 188
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	80 81       	ld	r24, Z
     3c0:	84 fd       	sbrc	r24, 4
     3c2:	fd cf       	rjmp	.-6      	; 0x3be <i2c_stop+0xa>

}/* i2c_stop */ 
     3c4:	08 95       	ret

000003c6 <i2c_write>:
unsigned char i2c_write( unsigned char data ) 
{    
    uint8_t   twst; 
    
   // send data to the previously addressed device 
   TWDR = data; 
     3c6:	80 93 bb 00 	sts	0x00BB, r24
   TWCR = (1<<TWINT) | (1<<TWEN); 
     3ca:	84 e8       	ldi	r24, 0x84	; 132
     3cc:	80 93 bc 00 	sts	0x00BC, r24

   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 
     3d0:	ec eb       	ldi	r30, 0xBC	; 188
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	88 23       	and	r24, r24
     3d8:	ec f7       	brge	.-6      	; 0x3d4 <i2c_write+0xe>

   // check value of TWI Status Register. Mask prescaler bits 
   twst = TW_STATUS & 0xF8; 
     3da:	90 91 b9 00 	lds	r25, 0x00B9
     3de:	98 7f       	andi	r25, 0xF8	; 248
   if( twst != TW_MT_DATA_ACK) return 1; 
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	98 32       	cpi	r25, 0x28	; 40
     3e4:	09 f4       	brne	.+2      	; 0x3e8 <i2c_write+0x22>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
   return 0; 

}/* i2c_write */ 
     3e8:	08 95       	ret

000003ea <spiInit>:


void spiInit()
// Initialize pins for spi communication
{
    DDR_SPI &= ~((1<<DD_MOSI)|(1<<DD_MISO)|(1<<DD_SS)|(1<<DD_SCK));
     3ea:	84 b1       	in	r24, 0x04	; 4
     3ec:	83 7c       	andi	r24, 0xC3	; 195
     3ee:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    DDR_SPI |= ((1<<DD_MOSI)|(1<<DD_SS)|(1<<DD_SCK));
     3f0:	84 b1       	in	r24, 0x04	; 4
     3f2:	8c 62       	ori	r24, 0x2C	; 44
     3f4:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     3f6:	81 e5       	ldi	r24, 0x51	; 81
     3f8:	8c bd       	out	0x2c, r24	; 44
     3fa:	08 95       	ret

000003fc <spiRead>:

void spiRead (uint8_t * datain, uint8_t length)
// sends out 0x00 while receiving full length of datain
{
	uint8_t i;
	for (i = 0; i < length; i++) {
     3fc:	66 23       	and	r22, r22
     3fe:	69 f0       	breq	.+26     	; 0x41a <spiRead+0x1e>
     400:	28 2f       	mov	r18, r24
     402:	e8 2f       	mov	r30, r24
     404:	f9 2f       	mov	r31, r25
		SPDR = 0x00;					//dummy byte
     406:	1e bc       	out	0x2e, r1	; 46
		while((SPSR & (1<<SPIF))==0);	//wait until data is transferred
     408:	0d b4       	in	r0, 0x2d	; 45
     40a:	07 fe       	sbrs	r0, 7
     40c:	fd cf       	rjmp	.-6      	; 0x408 <spiRead+0xc>
		datain[i] = SPDR;
     40e:	8e b5       	in	r24, 0x2e	; 46
     410:	81 93       	st	Z+, r24

void spiRead (uint8_t * datain, uint8_t length)
// sends out 0x00 while receiving full length of datain
{
	uint8_t i;
	for (i = 0; i < length; i++) {
     412:	8e 2f       	mov	r24, r30
     414:	82 1b       	sub	r24, r18
     416:	86 17       	cp	r24, r22
     418:	b0 f3       	brcs	.-20     	; 0x406 <spiRead+0xa>
     41a:	08 95       	ret

0000041c <spiWrite>:

void spiWrite (uint8_t * dataout, uint8_t length)
// Shift full array to target device without receiving any byte
{
       uint8_t i;      
       for (i = 0; i < length; i++) {
     41c:	66 23       	and	r22, r22
     41e:	61 f0       	breq	.+24     	; 0x438 <spiWrite+0x1c>
     420:	28 2f       	mov	r18, r24
     422:	e8 2f       	mov	r30, r24
     424:	f9 2f       	mov	r31, r25
             SPDR = dataout[i];
     426:	81 91       	ld	r24, Z+
     428:	8e bd       	out	0x2e, r24	; 46
             while((SPSR & (1<<SPIF))==0);
     42a:	0d b4       	in	r0, 0x2d	; 45
     42c:	07 fe       	sbrs	r0, 7
     42e:	fd cf       	rjmp	.-6      	; 0x42a <spiWrite+0xe>

void spiWrite (uint8_t * dataout, uint8_t length)
// Shift full array to target device without receiving any byte
{
       uint8_t i;      
       for (i = 0; i < length; i++) {
     430:	8e 2f       	mov	r24, r30
     432:	82 1b       	sub	r24, r18
     434:	86 17       	cp	r24, r22
     436:	b8 f3       	brcs	.-18     	; 0x426 <spiWrite+0xa>
     438:	08 95       	ret

0000043a <spiTransfer1byte>:
}

uint8_t spiTransfer1byte (uint8_t dataout)
// Clocks only one byte to target device and returns the received one
{
    SPDR = dataout;
     43a:	8e bd       	out	0x2e, r24	; 46
    while((SPSR & (1<<SPIF))==0);
     43c:	0d b4       	in	r0, 0x2d	; 45
     43e:	07 fe       	sbrs	r0, 7
     440:	fd cf       	rjmp	.-6      	; 0x43c <spiTransfer1byte+0x2>
    return SPDR;
     442:	8e b5       	in	r24, 0x2e	; 46
}
     444:	08 95       	ret

00000446 <_Z5setCEv>:

///@description	CE needs to be be high to take the nRF out of standby mode
///					into either TX or RX mode.
///@brief	Sets the CE pin high.
void setCE(){
	NRF_CE_PORT |= (1<<NRF_CE_PIN);
     446:	28 9a       	sbi	0x05, 0	; 5
     448:	08 95       	ret

0000044a <_Z7clearCEv>:
}

///@description Clearing the CE pin puts the nRF into standby mode.
///@brief	Clears the CE pin to low.
void clearCE(){
	NRF_CE_PORT &= ~(1<<NRF_CE_PIN);
     44a:	28 98       	cbi	0x05, 0	; 5
     44c:	08 95       	ret

0000044e <_Z6setCSNv>:
}

///@description
///@brief		Sets the CSN(/Cable Select), disabling SPI communication to the nRF.
void setCSN(){
	NRF_CSN_PORT |= (1<<NRF_CSN_PIN);
     44e:	29 9a       	sbi	0x05, 1	; 5
     450:	08 95       	ret

00000452 <_Z8clearCSNv>:
}

///@description		All SPI commands need to be started by a high to low transisition on CSN.
///@brief			Clears the CSN(/Cable Select) pin to low.  
void clearCSN(){
	NRF_CSN_PORT &= ~(1<<NRF_CSN_PIN);
     452:	29 98       	cbi	0x05, 1	; 5
     454:	08 95       	ret

00000456 <_Z18getDataPipeAddressh>:

///@description	Returns the receive address of the dataPipe
///@param	dataPipe	The dataPipe index. 0-5
///@returns	The address of the referenced dataPipe.
uint8_t getDataPipeAddress(uint8_t dataPipe){
	switch (dataPipe){
     456:	83 30       	cpi	r24, 0x03	; 3
     458:	69 f0       	breq	.+26     	; 0x474 <_Z18getDataPipeAddressh+0x1e>
     45a:	28 f4       	brcc	.+10     	; 0x466 <_Z18getDataPipeAddressh+0x10>
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	41 f0       	breq	.+16     	; 0x470 <_Z18getDataPipeAddressh+0x1a>
     460:	82 30       	cpi	r24, 0x02	; 2
     462:	71 f4       	brne	.+28     	; 0x480 <_Z18getDataPipeAddressh+0x2a>
     464:	0f c0       	rjmp	.+30     	; 0x484 <_Z18getDataPipeAddressh+0x2e>
     466:	84 30       	cpi	r24, 0x04	; 4
     468:	39 f0       	breq	.+14     	; 0x478 <_Z18getDataPipeAddressh+0x22>
     46a:	85 30       	cpi	r24, 0x05	; 5
     46c:	49 f4       	brne	.+18     	; 0x480 <_Z18getDataPipeAddressh+0x2a>
     46e:	06 c0       	rjmp	.+12     	; 0x47c <_Z18getDataPipeAddressh+0x26>
		case 1:
			return (NRF_RX_ADDR_P1);
     470:	8b e0       	ldi	r24, 0x0B	; 11
     472:	08 95       	ret
			break;
		case 2:
			return (NRF_RX_ADDR_P2);
			break;
		case 3:
			return (NRF_RX_ADDR_P3);
     474:	8d e0       	ldi	r24, 0x0D	; 13
     476:	08 95       	ret
			break;
		case 4:
			return (NRF_RX_ADDR_P4);
     478:	8e e0       	ldi	r24, 0x0E	; 14
     47a:	08 95       	ret
			break;
		case 5:
			return (NRF_RX_ADDR_P5);
     47c:	8f e0       	ldi	r24, 0x0F	; 15
     47e:	08 95       	ret
			break;
		default:
			return (NRF_RX_ADDR_P0);
     480:	8a e0       	ldi	r24, 0x0A	; 10
     482:	08 95       	ret
	switch (dataPipe){
		case 1:
			return (NRF_RX_ADDR_P1);
			break;
		case 2:
			return (NRF_RX_ADDR_P2);
     484:	8c e0       	ldi	r24, 0x0C	; 12
			break;
		default:
			return (NRF_RX_ADDR_P0);
			break;
	}//end switch
}//end getDataPipeAddress
     486:	08 95       	ret

00000488 <_Z30getDataPipePayloadWidthAddressh>:

///@description	Returns the address of the dataPipe width.
///@param	dataPipe	The dataPipe index. 0-5.
///@returns	The address of the referenced dataPipe's width.
uint8_t getDataPipePayloadWidthAddress(uint8_t dataPipe){
	switch (dataPipe){
     488:	83 30       	cpi	r24, 0x03	; 3
     48a:	69 f0       	breq	.+26     	; 0x4a6 <_Z30getDataPipePayloadWidthAddressh+0x1e>
     48c:	28 f4       	brcc	.+10     	; 0x498 <_Z30getDataPipePayloadWidthAddressh+0x10>
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	41 f0       	breq	.+16     	; 0x4a2 <_Z30getDataPipePayloadWidthAddressh+0x1a>
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	71 f4       	brne	.+28     	; 0x4b2 <_Z30getDataPipePayloadWidthAddressh+0x2a>
     496:	0f c0       	rjmp	.+30     	; 0x4b6 <_Z30getDataPipePayloadWidthAddressh+0x2e>
     498:	84 30       	cpi	r24, 0x04	; 4
     49a:	39 f0       	breq	.+14     	; 0x4aa <_Z30getDataPipePayloadWidthAddressh+0x22>
     49c:	85 30       	cpi	r24, 0x05	; 5
     49e:	49 f4       	brne	.+18     	; 0x4b2 <_Z30getDataPipePayloadWidthAddressh+0x2a>
     4a0:	06 c0       	rjmp	.+12     	; 0x4ae <_Z30getDataPipePayloadWidthAddressh+0x26>
		case 1:
		return (NRF_RX_PW_P1);
     4a2:	82 e1       	ldi	r24, 0x12	; 18
     4a4:	08 95       	ret
		break;
		case 2:
		return (NRF_RX_PW_P2);
		break;
		case 3:
		return (NRF_RX_PW_P3);
     4a6:	84 e1       	ldi	r24, 0x14	; 20
     4a8:	08 95       	ret
		break;
		case 4:
		return (NRF_RX_PW_P4);
     4aa:	85 e1       	ldi	r24, 0x15	; 21
     4ac:	08 95       	ret
		break;
		case 5:
		return (NRF_RX_PW_P5);
     4ae:	86 e1       	ldi	r24, 0x16	; 22
     4b0:	08 95       	ret
		break;
		default:
		return (NRF_RX_PW_P0);
     4b2:	81 e1       	ldi	r24, 0x11	; 17
     4b4:	08 95       	ret
	switch (dataPipe){
		case 1:
		return (NRF_RX_PW_P1);
		break;
		case 2:
		return (NRF_RX_PW_P2);
     4b6:	83 e1       	ldi	r24, 0x13	; 19
		break;
		default:
		return (NRF_RX_PW_P0);
		break;
	}//end switch
}//end getDataPipeAddress
     4b8:	08 95       	ret

000004ba <_ZN3NRF4readEh>:

///@description		Sets status = STATUS register
///@brief			Reads one byte from the specified register.
///@param reg		The register to be accessed.
///@returns			Data read from register.
uint8_t NRF::read(uint8_t reg){
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	ec 01       	movw	r28, r24
     4c2:	16 2f       	mov	r17, r22
	uint8_t data;
	clearCSN();
     4c4:	0e 94 29 02 	call	0x452	; 0x452 <_Z8clearCSNv>
		status = spiTransfer1byte(NRF_R_REGISTER | reg);
     4c8:	81 2f       	mov	r24, r17
     4ca:	0e 94 1d 02 	call	0x43a	; 0x43a <spiTransfer1byte>
     4ce:	88 83       	st	Y, r24
		data = spiTransfer1byte(0x00);				//dummy byte
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	0e 94 1d 02 	call	0x43a	; 0x43a <spiTransfer1byte>
     4d6:	c8 2f       	mov	r28, r24
	setCSN();
     4d8:	0e 94 27 02 	call	0x44e	; 0x44e <_Z6setCSNv>
	return data;
}
     4dc:	8c 2f       	mov	r24, r28
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	08 95       	ret

000004e6 <_ZN3NRF4readEhPhh>:
///@description		Sets status = STATUS register
///@brief			Reads multiple bytes from the specified register.
///@param reg		The register to be accessed.
///@param val		Pointer to values to be read.
///@param length	Number of bytes to be written.
void NRF::read(uint8_t reg, uint8_t * val, uint8_t length){
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	8c 01       	movw	r16, r24
     4f4:	e6 2e       	mov	r14, r22
     4f6:	ea 01       	movw	r28, r20
     4f8:	f2 2e       	mov	r15, r18
	clearCSN();
     4fa:	0e 94 29 02 	call	0x452	; 0x452 <_Z8clearCSNv>
		status = spiTransfer1byte(NRF_R_REGISTER | reg);
     4fe:	8e 2d       	mov	r24, r14
     500:	0e 94 1d 02 	call	0x43a	; 0x43a <spiTransfer1byte>
     504:	f8 01       	movw	r30, r16
     506:	80 83       	st	Z, r24
		spiRead(val, length);
     508:	6f 2d       	mov	r22, r15
     50a:	ce 01       	movw	r24, r28
     50c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <spiRead>
	setCSN();
     510:	0e 94 27 02 	call	0x44e	; 0x44e <_Z6setCSNv>
}
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	ff 90       	pop	r15
     51e:	ef 90       	pop	r14
     520:	08 95       	ret

00000522 <_ZN3NRF5writeEh>:

///@description		Used for 1-byte commands that return no value after the STATUS byte.
///					Sets status = STATUS register
///@brief			Sends a 1-byte command into the assigned register.
///@param reg		The register to be accessed.
void NRF::write(uint8_t reg){
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	ec 01       	movw	r28, r24
     52a:	16 2f       	mov	r17, r22
	clearCSN();
     52c:	0e 94 29 02 	call	0x452	; 0x452 <_Z8clearCSNv>
		status = spiTransfer1byte(NRF_W_REGISTER | reg);
     530:	81 2f       	mov	r24, r17
     532:	80 62       	ori	r24, 0x20	; 32
     534:	0e 94 1d 02 	call	0x43a	; 0x43a <spiTransfer1byte>
     538:	88 83       	st	Y, r24
	setCSN();
     53a:	0e 94 27 02 	call	0x44e	; 0x44e <_Z6setCSNv>
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	08 95       	ret

00000546 <_ZN3NRF5writeEhh>:
///@description		Used for registers that have 1-byte values written to them.
///					Sets status = STATUS register
///@brief			Writes 1 byte into the specified register.
///@param reg		The register to be accessed.
///@param data		The data you want written there.
void NRF::write(uint8_t reg, uint8_t data){
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	ec 01       	movw	r28, r24
     550:	06 2f       	mov	r16, r22
     552:	14 2f       	mov	r17, r20
	clearCSN();
     554:	0e 94 29 02 	call	0x452	; 0x452 <_Z8clearCSNv>
		status = spiTransfer1byte(NRF_W_REGISTER | reg);
     558:	80 2f       	mov	r24, r16
     55a:	80 62       	ori	r24, 0x20	; 32
     55c:	0e 94 1d 02 	call	0x43a	; 0x43a <spiTransfer1byte>
     560:	88 83       	st	Y, r24
		spiTransfer1byte(data);
     562:	81 2f       	mov	r24, r17
     564:	0e 94 1d 02 	call	0x43a	; 0x43a <spiTransfer1byte>
	setCSN();
     568:	0e 94 27 02 	call	0x44e	; 0x44e <_Z6setCSNv>
}
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	08 95       	ret

00000576 <_ZN3NRF5writeEhPhh>:
///@description		Used for registers that have multiple bytes written to them.
///@brief			Writes multiple bytes into the specified register.
///@param reg		The register to be accessed
///@param val		Pointer to values to be written
///@param length	Number of bytes to be written
void NRF::write(uint8_t reg, uint8_t * data, uint8_t length){
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	8c 01       	movw	r16, r24
     584:	e6 2e       	mov	r14, r22
     586:	ea 01       	movw	r28, r20
     588:	f2 2e       	mov	r15, r18
	clearCSN();
     58a:	0e 94 29 02 	call	0x452	; 0x452 <_Z8clearCSNv>
		status = spiTransfer1byte(NRF_W_REGISTER | reg);
     58e:	8e 2d       	mov	r24, r14
     590:	80 62       	ori	r24, 0x20	; 32
     592:	0e 94 1d 02 	call	0x43a	; 0x43a <spiTransfer1byte>
     596:	f8 01       	movw	r30, r16
     598:	80 83       	st	Z, r24
		spiWrite(data, length);
     59a:	6f 2d       	mov	r22, r15
     59c:	ce 01       	movw	r24, r28
     59e:	0e 94 0e 02 	call	0x41c	; 0x41c <spiWrite>
	setCSN();
     5a2:	0e 94 27 02 	call	0x44e	; 0x44e <_Z6setCSNv>
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	08 95       	ret

000005b4 <_ZN3NRF4initEv>:
///@description		Initializes MCU pins, interrupt, and SPI module.				
///					Should be called during startup.
///@brief			Initializes MCU to communicate with nRF25L01 module.
void NRF::init(){
	//define CE and CSN as Outputs
	NRF_CE_DDR		|= (1<<NRF_CE_PIN);
     5b4:	20 9a       	sbi	0x04, 0	; 4
	NRF_CSN_DDR	|= (1<<NRF_CSN_PIN);
     5b6:	21 9a       	sbi	0x04, 1	; 4
	
	//default values for CE & CSN
	clearCE();
     5b8:	0e 94 25 02 	call	0x44a	; 0x44a <_Z7clearCEv>
	setCSN();
     5bc:	0e 94 27 02 	call	0x44e	; 0x44e <_Z6setCSNv>
		
	//////////////////////////////////////////////////////////////////////////
	//Interrupts
	//////////////////////////////////////////////////////////////////////////
	//External Interrupt Mask Register
	EIMSK |= (1<<INT0);	//turn on interrupt 0 (PD2)
     5c0:	e8 9a       	sbi	0x1d, 0	; 29
	
	////External Interrupt Control Register A
	EICRA = 0x02;		//Interrupt on falling edge of INT0
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	80 93 69 00 	sts	0x0069, r24
	*/
	//////////////////////////////////////////////////////////////////////////
	
	
	//Initialize SPI module
	spiInit();
     5c8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <spiInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5cc:	2f e7       	ldi	r18, 0x7F	; 127
     5ce:	88 e3       	ldi	r24, 0x38	; 56
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	21 50       	subi	r18, 0x01	; 1
     5d4:	80 40       	sbci	r24, 0x00	; 0
     5d6:	90 40       	sbci	r25, 0x00	; 0
     5d8:	e1 f7       	brne	.-8      	; 0x5d2 <_ZN3NRF4initEv+0x1e>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <_ZN3NRF4initEv+0x28>
     5dc:	00 00       	nop
	
	_delay_ms(50);
	
	//Interrupt LED
	DDRB |= (1<<PB7);			//Set PB7 as output
     5de:	27 9a       	sbi	0x04, 7	; 4
     5e0:	08 95       	ret

000005e2 <_ZN3NRF7flushRXEv>:
}

///@description
///@brief			Flushes RX FIFO
void NRF::flushRX(){
	write(NRF_FLUSH_RX);
     5e2:	62 ee       	ldi	r22, 0xE2	; 226
     5e4:	0e 94 91 02 	call	0x522	; 0x522 <_ZN3NRF5writeEh>
     5e8:	08 95       	ret

000005ea <_ZN3NRF9setConfigEh>:

///@description 
///@brief			Sets the CONFIG register to specified value.
///@param val		Value to set CONFIG register to. 
void NRF::setConfig(uint8_t val){	
	write(NRF_CONFIG, val & 0x7F);
     5ea:	46 2f       	mov	r20, r22
     5ec:	4f 77       	andi	r20, 0x7F	; 127
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN3NRF5writeEhh>
     5f4:	08 95       	ret

000005f6 <_ZN3NRF9getConfigEv>:
///@description
///@brief			Gets the value of the CONFIG register.
///@returns			Value of the CONFIG register.
uint8_t NRF::getConfig(){
	uint8_t config;
	config = read(NRF_CONFIG);
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN3NRF4readEh>
	
	return(config);
	//return (read(NRF_CONFIG));	
	
}
     5fc:	08 95       	ret

000005fe <_ZN3NRF7maskIRQEh>:

///@description
///@brief		Disables specified interrupts.
///@param	irq	Specifies which interrupts to disable.  To disable all 3 interrupts: 
///					(1<<NRF_MASK_RX_DR | 1<<NRF_MASK_TX_DS | 1<<NRF_MASK_MAX_RT)
void NRF::maskIRQ(uint8_t irq){
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	ec 01       	movw	r28, r24
     606:	16 2f       	mov	r17, r22
	irq &= 0x70;							//Mask valid values of irq
	setConfig((getConfig() & 0x0F) |(irq));
     608:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN3NRF9getConfigEv>
     60c:	8f 70       	andi	r24, 0x0F	; 15
///@description
///@brief		Disables specified interrupts.
///@param	irq	Specifies which interrupts to disable.  To disable all 3 interrupts: 
///					(1<<NRF_MASK_RX_DR | 1<<NRF_MASK_TX_DS | 1<<NRF_MASK_MAX_RT)
void NRF::maskIRQ(uint8_t irq){
	irq &= 0x70;							//Mask valid values of irq
     60e:	10 77       	andi	r17, 0x70	; 112
	setConfig((getConfig() & 0x0F) |(irq));
     610:	68 2f       	mov	r22, r24
     612:	61 2b       	or	r22, r17
     614:	ce 01       	movw	r24, r28
     616:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN3NRF9setConfigEh>
}
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	08 95       	ret

00000622 <_ZN3NRF7powerUpEv>:
///@description		Sets the PWR_UP bit of the CONFIG register to high.
///@brief			Powers up the nRF.
void NRF::powerUp(){
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	ec 01       	movw	r28, r24
	setConfig (getConfig() | (1<<NRF_PWR_UP));
     628:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN3NRF9getConfigEv>
     62c:	68 2f       	mov	r22, r24
     62e:	62 60       	ori	r22, 0x02	; 2
     630:	ce 01       	movw	r24, r28
     632:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN3NRF9setConfigEh>
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <_ZN3NRF6setCRCEh>:
}

///@description	Cyclic redundancy check can either be off, 1-byte or 2-bytes.
///@brief		Sets up the CRC for the nRF.
///@param	crc	Valid values:	NRF_CRC_OFF, NRF_CRC_1BYTE, NRF_CRC_2BYTE
void NRF::setCRC(uint8_t crc){
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	ec 01       	movw	r28, r24
     644:	16 2f       	mov	r17, r22
	crc &= 0x03;
	setConfig((getConfig() & 0xF3) | (crc<<NRF_CRCO));
     646:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN3NRF9getConfigEv>
     64a:	83 7f       	andi	r24, 0xF3	; 243

///@description	Cyclic redundancy check can either be off, 1-byte or 2-bytes.
///@brief		Sets up the CRC for the nRF.
///@param	crc	Valid values:	NRF_CRC_OFF, NRF_CRC_1BYTE, NRF_CRC_2BYTE
void NRF::setCRC(uint8_t crc){
	crc &= 0x03;
     64c:	61 2f       	mov	r22, r17
     64e:	63 70       	andi	r22, 0x03	; 3
	setConfig((getConfig() & 0xF3) | (crc<<NRF_CRCO));
     650:	66 0f       	add	r22, r22
     652:	66 0f       	add	r22, r22
     654:	68 2b       	or	r22, r24
     656:	ce 01       	movw	r24, r28
     658:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN3NRF9setConfigEh>
}
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	08 95       	ret

00000664 <_ZN3NRF7setModeEh>:

///@description
///@brief			Sets power up and RX/TX modes in CONFIG register.
///@returns			NRF_MODE_TX or NRF_MODE_RX
void NRF::setMode(uint8_t mode){
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	ec 01       	movw	r28, r24
     66c:	16 2f       	mov	r17, r22
	uint8_t config = read(NRF_CONFIG);
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN3NRF4readEh>
	config &= 0x7E;			//mask unaltered bits
     674:	68 2f       	mov	r22, r24
     676:	6e 77       	andi	r22, 0x7E	; 126
	if (mode == NRF_MODE_RX)
     678:	11 11       	cpse	r17, r1
     67a:	01 c0       	rjmp	.+2      	; 0x67e <_ZN3NRF7setModeEh+0x1a>
	config |= (1<<NRF_PRIM_RX);
     67c:	61 60       	ori	r22, 0x01	; 1
	setConfig(config);
     67e:	ce 01       	movw	r24, r28
     680:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN3NRF9setConfigEh>
}
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	08 95       	ret

0000068c <_ZN3NRF15setAddressWidthEh>:
///@brief			Sets the width of addresses for all data pipes.
///@param	addressWidth	Valid values: NRF_AW_3BYTES, NRF_AW_4BYTES,
///								NRF_AW_5BYTES
void NRF::setAddressWidth(uint8_t addressWidth){
	//clearCE();
	write(NRF_SETUP_AW, addressWidth & 0x03);
     68c:	46 2f       	mov	r20, r22
     68e:	43 70       	andi	r20, 0x03	; 3
     690:	63 e0       	ldi	r22, 0x03	; 3
     692:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN3NRF5writeEhh>
     696:	08 95       	ret

00000698 <_ZN3NRF15setupRetransmitEh>:
///						0000 = 250uS, 0001 = 500uS .... 1111 = 4000uS 
///						(xxxx<<NRF_ARD) where xxxx is the 4-bit value
///						bits 3:0 are the Auto Retransmit Count.
///						0000 = disabled, 0001 = Up to 1 .... 1111 = Up to 15 Re-Transmit on fail of AA
///						(xxxx<<NRF_ARC) where xxxx is the 4-bit value
void NRF::setupRetransmit(uint8_t val){
     698:	46 2f       	mov	r20, r22
	write(NRF_SETUP_RETR, val);
     69a:	64 e0       	ldi	r22, 0x04	; 4
     69c:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN3NRF5writeEhh>
     6a0:	08 95       	ret

000006a2 <_ZN3NRF10setChannelEh>:
///@description	Writes to the RF_CH register.
///				1 MHz steps.  Freq = 2400 + RF_CH [MHz].
///@brief		Sets the frequency channel NRF operates on.
///@param		ch	Channel.  Must be between 0 and 127(0x7F).
void NRF::setChannel(uint8_t ch){	
	write(NRF_RF_CH, ch & 0x7F);
     6a2:	46 2f       	mov	r20, r22
     6a4:	4f 77       	andi	r20, 0x7F	; 127
     6a6:	65 e0       	ldi	r22, 0x05	; 5
     6a8:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN3NRF5writeEhh>
     6ac:	08 95       	ret

000006ae <_ZN3NRF7setupRFEh>:
///@param	val		Valid values: NRF_RF_DR_1MHZ, NRF_RF_DR_2MHZ,
///						NRF_RF_PWR_18DB, NRF_RF_PWR_12DB,
///						NRF_RF_PWR_6DB, NRF_RF_PWR_0DB,
///						NRF_LNA_HCURR
void	NRF::setupRF(uint8_t val){
	write(NRF_RF_SETUP, val & 0xAE);
     6ae:	46 2f       	mov	r20, r22
     6b0:	4e 7a       	andi	r20, 0xAE	; 174
     6b2:	66 e0       	ldi	r22, 0x06	; 6
     6b4:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN3NRF5writeEhh>
     6b8:	08 95       	ret

000006ba <_ZN3NRF14clearInterruptEh>:
///@description
///@brief		Clears specified interrupt.
///@param		interrupt	Valid values are: NRF_RX_DR, NRF_TX_DS,
///								NRF_MAX_RT
void NRF::clearInterrupt(uint8_t interrupt){
	write(NRF_STATUS, 1<<interrupt);
     6ba:	21 e0       	ldi	r18, 0x01	; 1
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	a9 01       	movw	r20, r18
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <_ZN3NRF14clearInterruptEh+0xc>
     6c2:	44 0f       	add	r20, r20
     6c4:	55 1f       	adc	r21, r21
     6c6:	6a 95       	dec	r22
     6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <_ZN3NRF14clearInterruptEh+0x8>
     6ca:	67 e0       	ldi	r22, 0x07	; 7
     6cc:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN3NRF5writeEhh>
     6d0:	08 95       	ret

000006d2 <_ZN3NRF21receivedPowerDetectedEv>:

///@description Replaces Carrier Detect
///@brief		Check for carrier.
///@returns		1 if carrier detected.
uint8_t NRF::receivedPowerDetected(){
	return (read(NRF_RPD));
     6d2:	69 e0       	ldi	r22, 0x09	; 9
     6d4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN3NRF4readEh>
}
     6d8:	08 95       	ret

000006da <_ZN3NRF12setRXAddressEhPh>:
}

///@description Sets the receive address of any data pipe.
///@param	dataPipe	Value 0 through 5 representing the index of the datapipe to be addressed.
///@param	address	The 5-byte address to assign to data pipe 0.
void NRF::setRXAddress(uint8_t dataPipe, uint8_t * address){
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	ec 01       	movw	r28, r24
     6e4:	86 2f       	mov	r24, r22
     6e6:	8a 01       	movw	r16, r20
	//clearCE();
	write(getDataPipeAddress(dataPipe), address, 5);
     6e8:	0e 94 2b 02 	call	0x456	; 0x456 <_Z18getDataPipeAddressh>
     6ec:	25 e0       	ldi	r18, 0x05	; 5
     6ee:	a8 01       	movw	r20, r16
     6f0:	68 2f       	mov	r22, r24
     6f2:	ce 01       	movw	r24, r28
     6f4:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN3NRF5writeEhPhh>
	//setCE();
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	08 95       	ret

00000702 <_ZN3NRF12setTXAddressEPh>:
///					Set the receive address of data pipe 0 to the same address to handle
///					automatic acknowledge if this is a PTX device with
///					Enhanced Shockburst enabled. (see NRF datasheet)
///@brief	Sets the transmit address.
///@param	address	The 5-byte address to assign to data pipe 0.
void NRF::setTXAddress(uint8_t * address){
     702:	ab 01       	movw	r20, r22
	//clearCE();
	write(NRF_TX_ADDR, address, 5);
     704:	25 e0       	ldi	r18, 0x05	; 5
     706:	60 e1       	ldi	r22, 0x10	; 16
     708:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN3NRF5writeEhPhh>
     70c:	08 95       	ret

0000070e <_ZN3NRF16setPayloadLengthEh>:


///@description		1-32 bytes long.
///@brief			Sets the length of the payload to be in data pipe 0.
void NRF::setPayloadLength(uint8_t length){
	payloadLength = length & 0x3F;			//bits 7:6 must be 0
     70e:	46 2f       	mov	r20, r22
     710:	4f 73       	andi	r20, 0x3F	; 63
     712:	fc 01       	movw	r30, r24
     714:	41 83       	std	Z+1, r20	; 0x01
	write(NRF_RX_PW_P0, payloadLength);
     716:	61 e1       	ldi	r22, 0x11	; 17
     718:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN3NRF5writeEhh>
     71c:	08 95       	ret

0000071e <_ZN3NRFC1Ehh>:
}

///@description	Custom constructor.
///@param ch		Custom channel.
///@param pl		Custom payload length.
NRF::NRF(uint8_t ch, uint8_t pl){
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	ec 01       	movw	r28, r24
     728:	06 2f       	mov	r16, r22
     72a:	14 2f       	mov	r17, r20
	
	init();
     72c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN3NRF4initEv>
	setChannel(ch);					//set channel
     730:	60 2f       	mov	r22, r16
     732:	ce 01       	movw	r24, r28
     734:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN3NRF10setChannelEh>
	setPayloadLength(pl);			//set length of payloads (RX)
     738:	61 2f       	mov	r22, r17
     73a:	ce 01       	movw	r24, r28
     73c:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN3NRF16setPayloadLengthEh>
	//setMode(NRF_MODE_RX);		//start receiving
}
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	08 95       	ret

0000074a <_ZN3NRF16setPayloadLengthEhh>:

///@description		1-32 bytes long.
///@brief			Sets the length of the payload to be in specified data pipe.
///@param dataPipe	Index of data pipe (0-5).
///@param length	Length of specified data pipe (1-32).
void NRF::setPayloadLength(uint8_t dataPipe, uint8_t length){
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	ec 01       	movw	r28, r24
     752:	86 2f       	mov	r24, r22
	payloadLength = length & 0x3F;			//bits 7:6 must be 0
     754:	14 2f       	mov	r17, r20
     756:	1f 73       	andi	r17, 0x3F	; 63
     758:	19 83       	std	Y+1, r17	; 0x01
	write(getDataPipePayloadWidthAddress(dataPipe), payloadLength);
     75a:	0e 94 44 02 	call	0x488	; 0x488 <_Z30getDataPipePayloadWidthAddressh>
     75e:	41 2f       	mov	r20, r17
     760:	68 2f       	mov	r22, r24
     762:	ce 01       	movw	r24, r28
     764:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN3NRF5writeEhh>
}
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	08 95       	ret

00000770 <_ZN3NRF9isTXEmptyEv>:

///@description
///@brief		Returns empty status of tX_FIFO buffer.
///@returns		1 if TX FIFO buffer is empty, 0 if data in TX FIFO buffer.
uint8_t NRF::isTXEmpty(){
	return ((read(NRF_FIFO_STATUS) & (1<<NRF_TX_EMPTY))>>NRF_TX_EMPTY);
     770:	67 e1       	ldi	r22, 0x17	; 23
     772:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN3NRF4readEh>
}
     776:	82 95       	swap	r24
     778:	81 70       	andi	r24, 0x01	; 1
     77a:	08 95       	ret

0000077c <_ZN3NRF10getPayloadEPh>:

///@description	Read RX-Payload, length is determined by function setPayloadLength().
///				Starts with byte 0.  Payload is deleted by NRF after it is read.
///				Data Ready (RX_DR) bit of STATUS register is reset.  Used in RX mode.
///@param		datain		Pointer to be filled with payload. 
void NRF::getPayload(uint8_t * datain){
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	ec 01       	movw	r28, r24
     782:	ab 01       	movw	r20, r22
	 read(NRF_R_RX_PAYLOAD, datain, payloadLength);
     784:	29 81       	ldd	r18, Y+1	; 0x01
     786:	61 e6       	ldi	r22, 0x61	; 97
     788:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_ZN3NRF4readEhPhh>
	 write(NRF_STATUS,(1<<NRF_RX_DR));	// Reset status register	
     78c:	40 e4       	ldi	r20, 0x40	; 64
     78e:	67 e0       	ldi	r22, 0x07	; 7
     790:	ce 01       	movw	r24, r28
     792:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN3NRF5writeEhh>
}
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <__vector_1>:
//////////////////////////////////////////////////////////////////////////
//Interrupt
//////////////////////////////////////////////////////////////////////////

//Should this whole function be in the main.cpp file?
ISR(INT0_vect){
     79c:	1f 92       	push	r1
     79e:	0f 92       	push	r0
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	0f 92       	push	r0
     7a4:	11 24       	eor	r1, r1
     7a6:	2f 93       	push	r18
     7a8:	3f 93       	push	r19
     7aa:	4f 93       	push	r20
     7ac:	5f 93       	push	r21
     7ae:	6f 93       	push	r22
     7b0:	7f 93       	push	r23
     7b2:	8f 93       	push	r24
     7b4:	9f 93       	push	r25
     7b6:	af 93       	push	r26
     7b8:	bf 93       	push	r27
     7ba:	cf 93       	push	r28
     7bc:	ef 93       	push	r30
     7be:	ff 93       	push	r31
	extern uint8_t payload[];
	uint8_t config;
	
	asm volatile ("cli"::);		//deactivate interrupts
     7c0:	f8 94       	cli
	PORTB |= (1<<PB7);		//Turn on LED				//testing
     7c2:	2f 9a       	sbi	0x05, 7	; 5
	//				Write 1 to clear bit.
	//		MAX_RT	Maximum number of TX retransmits interrupt
	//				Write 1 to clear bit. If MAX_RT is asserted it must
	//				be cleared to enable further communication.
	
	config = transmitter.getConfig();	//this will also update status
     7c4:	8f eb       	ldi	r24, 0xBF	; 191
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN3NRF9getConfigEv>
     7cc:	c8 2f       	mov	r28, r24
	
	//Data Sent
	//TX_DS is not disabled			and			TX_DS caused the Interrupt
	if (!(config & (1<<NRF_MASK_TX_DS)) && (transmitter.status &  (1<< NRF_TX_DS )) ) {
     7ce:	85 fd       	sbrc	r24, 5
     7d0:	10 c0       	rjmp	.+32     	; 0x7f2 <__vector_1+0x56>
     7d2:	80 91 bf 01 	lds	r24, 0x01BF
     7d6:	85 ff       	sbrs	r24, 5
     7d8:	0c c0       	rjmp	.+24     	; 0x7f2 <__vector_1+0x56>
		
		// The payload should be removed from the TX FIFO automagically
		
		//put into standby-I mode if TX FIFO is empty
		if (transmitter.isTXEmpty())
     7da:	8f eb       	ldi	r24, 0xBF	; 191
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 b8 03 	call	0x770	; 0x770 <_ZN3NRF9isTXEmptyEv>
     7e2:	81 11       	cpse	r24, r1
		clearCE();
     7e4:	0e 94 25 02 	call	0x44a	; 0x44a <_Z7clearCEv>
		
		//clear interrupt
		transmitter.clearInterrupt(NRF_TX_DS);
     7e8:	65 e0       	ldi	r22, 0x05	; 5
     7ea:	8f eb       	ldi	r24, 0xBF	; 191
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN3NRF14clearInterruptEh>
	}
	
	//Data Ready
	//RX_DR is not disabled
	if (!(config & (1<<NRF_MASK_RX_DR)) && (transmitter.status &  (1<< NRF_RX_DR )) )  {
     7f2:	c6 fd       	sbrc	r28, 6
     7f4:	0f c0       	rjmp	.+30     	; 0x814 <__vector_1+0x78>
     7f6:	80 91 bf 01 	lds	r24, 0x01BF
     7fa:	86 ff       	sbrs	r24, 6
     7fc:	0b c0       	rjmp	.+22     	; 0x814 <__vector_1+0x78>
		
		//TODO:
		//Data is ready, read the data
		transmitter.getPayload(payload);
     7fe:	69 eb       	ldi	r22, 0xB9	; 185
     800:	71 e0       	ldi	r23, 0x01	; 1
     802:	8f eb       	ldi	r24, 0xBF	; 191
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e 94 be 03 	call	0x77c	; 0x77c <_ZN3NRF10getPayloadEPh>
		//Should the RX FIFO be flushed here?
		
		//clear interrupt
		transmitter.clearInterrupt(NRF_RX_DR);
     80a:	66 e0       	ldi	r22, 0x06	; 6
     80c:	8f eb       	ldi	r24, 0xBF	; 191
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN3NRF14clearInterruptEh>
	}
	
	//Maximum Retransmits
	//MAX_RT is not disabled	and		MAX_RT interrupt flag is set
	if (!(config & (1<<NRF_MASK_MAX_RT)) && (transmitter.status &  (1<< NRF_MAX_RT)) )  {
     814:	c4 fd       	sbrc	r28, 4
     816:	09 c0       	rjmp	.+18     	; 0x82a <__vector_1+0x8e>
     818:	80 91 bf 01 	lds	r24, 0x01BF
     81c:	84 ff       	sbrs	r24, 4
     81e:	05 c0       	rjmp	.+10     	; 0x82a <__vector_1+0x8e>
		//TODO:
		
		//Max retries has been reached
		
		//clear interrupt
		transmitter.clearInterrupt(NRF_MAX_RT);
     820:	64 e0       	ldi	r22, 0x04	; 4
     822:	8f eb       	ldi	r24, 0xBF	; 191
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN3NRF14clearInterruptEh>
	//////////////////////////////////////////////////////////////////////////
	//TODO: test - take this out
	//payload[0] = 0x42;
	//////////////////////////////////////////////////////////////////////////
	
	asm volatile ("sei"::);		//activate interrupts
     82a:	78 94       	sei
}
     82c:	ff 91       	pop	r31
     82e:	ef 91       	pop	r30
     830:	cf 91       	pop	r28
     832:	bf 91       	pop	r27
     834:	af 91       	pop	r26
     836:	9f 91       	pop	r25
     838:	8f 91       	pop	r24
     83a:	7f 91       	pop	r23
     83c:	6f 91       	pop	r22
     83e:	5f 91       	pop	r21
     840:	4f 91       	pop	r20
     842:	3f 91       	pop	r19
     844:	2f 91       	pop	r18
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63
     84a:	0f 90       	pop	r0
     84c:	1f 90       	pop	r1
     84e:	18 95       	reti

00000850 <Write23008>:
//Created: 6 Oct 2013
//Mike Litster

#include "portexpander.h"

void Write23008(unsigned char reg, unsigned char data){
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	d8 2f       	mov	r29, r24
     856:	c6 2f       	mov	r28, r22
	i2c_start((CTRL_BYTE_23008<<1) | I2C_WRITE); // Slave address.  Shift 7-bit address one bit, and clear the read bit (bit0).)
     858:	80 e4       	ldi	r24, 0x40	; 64
     85a:	0e 94 b3 01 	call	0x366	; 0x366 <i2c_start>
	i2c_write(reg);
     85e:	8d 2f       	mov	r24, r29
     860:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <i2c_write>
	i2c_write(data);
     864:	8c 2f       	mov	r24, r28
     866:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <i2c_write>
	i2c_stop();
     86a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <i2c_stop>
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <Init23008>:

	return data;
	}
	
void Init23008(void){
	i2c_init();
     874:	0e 94 ad 01 	call	0x35a	; 0x35a <i2c_init>
     878:	08 95       	ret

0000087a <_Z10displayLCDv>:
unsigned int  Z, C;							// Buttons on nunchuk
char line1[40], line2[40];         // LCD line arrays

void displayLCD(void){
	
	lcdGoto(0,0);
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 25 01 	call	0x24a	; 0x24a <lcdGoto>
	lcdPuts(line1);		// Display line 1
     886:	8d e8       	ldi	r24, 0x8D	; 141
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	0e 94 4f 01 	call	0x29e	; 0x29e <lcdPuts>
	lcdGoto(0,1);		// Skip to next line
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 25 01 	call	0x24a	; 0x24a <lcdGoto>
	lcdPuts(line2);
     89a:	85 e6       	ldi	r24, 0x65	; 101
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0e 94 4f 01 	call	0x29e	; 0x29e <lcdPuts>
     8a2:	08 95       	ret

000008a4 <_Z4initv>:
	
}

void init(void){
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	00 d0       	rcall	.+0      	; 0x8aa <_Z4initv+0x6>
     8aa:	00 d0       	rcall	.+0      	; 0x8ac <_Z4initv+0x8>
     8ac:	1f 92       	push	r1
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
	uint8_t address[5] = {0x42,0x42,0x42,0x42,0x42};		
     8b2:	85 e0       	ldi	r24, 0x05	; 5
     8b4:	e0 e0       	ldi	r30, 0x00	; 0
     8b6:	f1 e0       	ldi	r31, 0x01	; 1
     8b8:	de 01       	movw	r26, r28
     8ba:	11 96       	adiw	r26, 0x01	; 1
     8bc:	01 90       	ld	r0, Z+
     8be:	0d 92       	st	X+, r0
     8c0:	8a 95       	dec	r24
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <_Z4initv+0x18>
	//EN_RXADDR choose number of enabled data pipes (1-5)
	// datapipes 0 and 1 are enabled by default
	//transmitter.enableRXDatapipes(1<<NRF_ERX_P0);
	
	//SETUP_AW sets address width for all data pipes
	transmitter.setAddressWidth(NRF_AW_5BYTES);
     8c4:	63 e0       	ldi	r22, 0x03	; 3
     8c6:	8f eb       	ldi	r24, 0xBF	; 191
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN3NRF15setAddressWidthEh>
	
	//choose power mode and data speed (1 vs 2 MHz or 250KHz)
	transmitter.setupRF(NRF_RF_DR_2MHZ | NRF_RF_PWR_0DB);
     8ce:	6e e0       	ldi	r22, 0x0E	; 14
     8d0:	8f eb       	ldi	r24, 0xBF	; 191
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	0e 94 57 03 	call	0x6ae	; 0x6ae <_ZN3NRF7setupRFEh>
	
	//disable retransmit, nunchuk updates continually, lost data is trivial
	transmitter.setupRetransmit(0x00);
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	8f eb       	ldi	r24, 0xBF	; 191
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN3NRF15setupRetransmitEh>
	
	//set receiver address (set RX_ADDR_P0 = TX_ADDR if EN_AA is enabled!!)
	transmitter.setRXAddress(0,address);
     8e2:	ae 01       	movw	r20, r28
     8e4:	4f 5f       	subi	r20, 0xFF	; 255
     8e6:	5f 4f       	sbci	r21, 0xFF	; 255
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	8f eb       	ldi	r24, 0xBF	; 191
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN3NRF12setRXAddressEhPh>
	//RX_ADDR_P1-05
	//Only one RX address is being used for this application.
	//transmitter.setRXAddress(1,address);   //etc, etc
	
	//TX_ADDR this needs to be the same address as is assigned to the receiving device's RX_ADDR
	transmitter.setTXAddress(address);
     8f2:	be 01       	movw	r22, r28
     8f4:	6f 5f       	subi	r22, 0xFF	; 255
     8f6:	7f 4f       	sbci	r23, 0xFF	; 255
     8f8:	8f eb       	ldi	r24, 0xBF	; 191
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	0e 94 81 03 	call	0x702	; 0x702 <_ZN3NRF12setTXAddressEPh>
	
	//set payload length of data pipe 0 (6 bytes per package)
	transmitter.setPayloadLength(0,6);
     900:	46 e0       	ldi	r20, 0x06	; 6
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	8f eb       	ldi	r24, 0xBF	; 191
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN3NRF16setPayloadLengthEhh>
	//transmitter.setPayloadLength(1,32);  ///etc, etc
	
	//setup channel
	transmitter.setChannel(1);
     90c:	61 e0       	ldi	r22, 0x01	; 1
     90e:	8f eb       	ldi	r24, 0xBF	; 191
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN3NRF10setChannelEh>
	
	//mask interrupts - default values.  Commented out as a placeholder.
	transmitter.maskIRQ(0<<NRF_MASK_RX_DR | 1<<NRF_MASK_TX_DS | 1<<NRF_MASK_MAX_RT);
     916:	60 e3       	ldi	r22, 0x30	; 48
     918:	8f eb       	ldi	r24, 0xBF	; 191
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN3NRF7maskIRQEh>
	
	//Set CRC to 2-byte
	transmitter.setCRC(NRF_CRC_2BYTE);
     920:	63 e0       	ldi	r22, 0x03	; 3
     922:	8f eb       	ldi	r24, 0xBF	; 191
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN3NRF6setCRCEh>
	
	//set device to be primary transmitter and power up.
	transmitter.setMode(NRF_MODE_RX);
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	8f eb       	ldi	r24, 0xBF	; 191
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	0e 94 32 03 	call	0x664	; 0x664 <_ZN3NRF7setModeEh>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	80 e7       	ldi	r24, 0x70	; 112
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	21 50       	subi	r18, 0x01	; 1
     93c:	80 40       	sbci	r24, 0x00	; 0
     93e:	90 40       	sbci	r25, 0x00	; 0
     940:	e1 f7       	brne	.-8      	; 0x93a <_Z4initv+0x96>
     942:	00 c0       	rjmp	.+0      	; 0x944 <_Z4initv+0xa0>
     944:	00 00       	nop
	_delay_ms(100);
	transmitter.powerUp();
     946:	8f eb       	ldi	r24, 0xBF	; 191
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	0e 94 11 03 	call	0x622	; 0x622 <_ZN3NRF7powerUpEv>

	
	//////////////////////////////////////////////////////////////////////////
}
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <main>:

int main(void)
{
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	1f 92       	push	r1
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
	
	//////////////////////////////////////////////////////////////////////////
	//LCD initialization
	//////////////////////////////////////////////////////////////////////////
	//asm volatile ("cli"::);		//deactivate interrupts
	lcdInit();
     968:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcdInit>
	lcdClearDisplay();
     96c:	0e 94 c2 00 	call	0x184	; 0x184 <lcdClearDisplay>
	sprintf(line1, "myQ Atmega168 Dev Board rev0");
     970:	8d e1       	ldi	r24, 0x1D	; 29
     972:	e5 e0       	ldi	r30, 0x05	; 5
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	ad e8       	ldi	r26, 0x8D	; 141
     978:	b1 e0       	ldi	r27, 0x01	; 1
     97a:	01 90       	ld	r0, Z+
     97c:	0d 92       	st	X+, r0
     97e:	8a 95       	dec	r24
     980:	e1 f7       	brne	.-8      	; 0x97a <main+0x1c>
	sprintf(line2, "nRF24L01+ Receiver");
     982:	83 e1       	ldi	r24, 0x13	; 19
     984:	e2 e2       	ldi	r30, 0x22	; 34
     986:	f1 e0       	ldi	r31, 0x01	; 1
     988:	a5 e6       	ldi	r26, 0x65	; 101
     98a:	b1 e0       	ldi	r27, 0x01	; 1
     98c:	01 90       	ld	r0, Z+
     98e:	0d 92       	st	X+, r0
     990:	8a 95       	dec	r24
     992:	e1 f7       	brne	.-8      	; 0x98c <main+0x2e>
	displayLCD();
     994:	0e 94 3d 04 	call	0x87a	; 0x87a <_Z10displayLCDv>
	//////////////////////////////////////////////////////////////////////////
	
	init();
     998:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_Z4initv>
	toggleLED1();
     99c:	0e 94 a3 01 	call	0x346	; 0x346 <toggleLED1>
	PORTB |= (1<<PB7);
     9a0:	2f 9a       	sbi	0x05, 7	; 5
     9a2:	2f ef       	ldi	r18, 0xFF	; 255
     9a4:	89 e6       	ldi	r24, 0x69	; 105
     9a6:	98 e1       	ldi	r25, 0x18	; 24
     9a8:	21 50       	subi	r18, 0x01	; 1
     9aa:	80 40       	sbci	r24, 0x00	; 0
     9ac:	90 40       	sbci	r25, 0x00	; 0
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <main+0x4a>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <main+0x54>
     9b2:	00 00       	nop
	_delay_ms(1000);
	PORTB &= ~(1<<PB7);
     9b4:	2f 98       	cbi	0x05, 7	; 5
	toggleLED1();
     9b6:	0e 94 a3 01 	call	0x346	; 0x346 <toggleLED1>
	lcdClearDisplay();
     9ba:	0e 94 c2 00 	call	0x184	; 0x184 <lcdClearDisplay>
	asm volatile ("sei"::);		//activate interrupts
     9be:	78 94       	sei
	setCE();
     9c0:	0e 94 23 02 	call	0x446	; 0x446 <_Z5setCEv>
						
		if (config & (1<<NRF_PRIM_RX))
			mode = 'R';
			else mode = 'T';
		cd = transmitter.receivedPowerDetected();
		Z = (payload[5] & 0b1) ^ 0b1;              // Extract Z button bit
     9c4:	0f 2e       	mov	r0, r31
     9c6:	fe eb       	ldi	r31, 0xBE	; 190
     9c8:	af 2e       	mov	r10, r31
     9ca:	f1 e0       	ldi	r31, 0x01	; 1
     9cc:	bf 2e       	mov	r11, r31
     9ce:	f0 2d       	mov	r31, r0
     9d0:	dd 24       	eor	r13, r13
     9d2:	d3 94       	inc	r13
		C = (payload[5]>>1 & 0b1) ^ 0b1;           // Extract C button bit
		
		asm volatile ("cli"::);		//deactivate interrupts
		toggleLED1();
		sprintf(line1, "SX%02X Y%02X C%d Z%d",      // Format joystick and
		payload[0], payload[1], C, Z);			//  button data
     9d4:	05 e3       	ldi	r16, 0x35	; 53
     9d6:	11 e0       	ldi	r17, 0x01	; 1
		sprintf(line2,"X%02X Y%02X Z%02X %cX%02X",       // Format accelerometer
		payload[2], payload[3], payload[4], mode, cd);   //  data
     9d8:	0f 2e       	mov	r0, r31
     9da:	fd eb       	ldi	r31, 0xBD	; 189
     9dc:	8f 2e       	mov	r8, r31
     9de:	f1 e0       	ldi	r31, 0x01	; 1
     9e0:	9f 2e       	mov	r9, r31
     9e2:	f0 2d       	mov	r31, r0
     9e4:	0f 2e       	mov	r0, r31
     9e6:	fc eb       	ldi	r31, 0xBC	; 188
     9e8:	6f 2e       	mov	r6, r31
     9ea:	f1 e0       	ldi	r31, 0x01	; 1
     9ec:	7f 2e       	mov	r7, r31
     9ee:	f0 2d       	mov	r31, r0
     9f0:	0f 2e       	mov	r0, r31
     9f2:	fb eb       	ldi	r31, 0xBB	; 187
     9f4:	4f 2e       	mov	r4, r31
     9f6:	f1 e0       	ldi	r31, 0x01	; 1
     9f8:	5f 2e       	mov	r5, r31
     9fa:	f0 2d       	mov	r31, r0
     9fc:	0f 2e       	mov	r0, r31
     9fe:	fa e4       	ldi	r31, 0x4A	; 74
     a00:	2f 2e       	mov	r2, r31
     a02:	f1 e0       	ldi	r31, 0x01	; 1
     a04:	3f 2e       	mov	r3, r31
     a06:	f0 2d       	mov	r31, r0
     a08:	0f 2e       	mov	r0, r31
     a0a:	f5 e6       	ldi	r31, 0x65	; 101
     a0c:	ef 2e       	mov	r14, r31
     a0e:	f1 e0       	ldi	r31, 0x01	; 1
     a10:	ff 2e       	mov	r15, r31
     a12:	f0 2d       	mov	r31, r0
		
				
				
		
		//check if nRF has been reset to defaults, then reinitialize if necessary
		config = transmitter.getConfig();
     a14:	8f eb       	ldi	r24, 0xBF	; 191
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN3NRF9getConfigEv>
     a1c:	c8 2e       	mov	r12, r24
		if ((config & 0x0F) != 0x0F) init();
     a1e:	8f 70       	andi	r24, 0x0F	; 15
     a20:	8f 30       	cpi	r24, 0x0F	; 15
     a22:	11 f0       	breq	.+4      	; 0xa28 <main+0xca>
     a24:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_Z4initv>
						
		if (config & (1<<NRF_PRIM_RX))
     a28:	c0 fe       	sbrs	r12, 0
     a2a:	03 c0       	rjmp	.+6      	; 0xa32 <main+0xd4>
			mode = 'R';
     a2c:	e2 e5       	ldi	r30, 0x52	; 82
     a2e:	e9 83       	std	Y+1, r30	; 0x01
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <main+0xd8>
			else mode = 'T';
     a32:	f4 e5       	ldi	r31, 0x54	; 84
     a34:	f9 83       	std	Y+1, r31	; 0x01
		cd = transmitter.receivedPowerDetected();
     a36:	8f eb       	ldi	r24, 0xBF	; 191
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_ZN3NRF21receivedPowerDetectedEv>
     a3e:	c8 2e       	mov	r12, r24
		Z = (payload[5] & 0b1) ^ 0b1;              // Extract Z button bit
     a40:	f5 01       	movw	r30, r10
     a42:	80 81       	ld	r24, Z
     a44:	98 2f       	mov	r25, r24
     a46:	9d 25       	eor	r25, r13
     a48:	91 70       	andi	r25, 0x01	; 1
     a4a:	90 93 b7 01 	sts	0x01B7, r25
     a4e:	10 92 b8 01 	sts	0x01B8, r1
		C = (payload[5]>>1 & 0b1) ^ 0b1;           // Extract C button bit
     a52:	86 95       	lsr	r24
     a54:	8d 25       	eor	r24, r13
     a56:	81 70       	andi	r24, 0x01	; 1
     a58:	80 93 b5 01 	sts	0x01B5, r24
     a5c:	10 92 b6 01 	sts	0x01B6, r1
		
		asm volatile ("cli"::);		//deactivate interrupts
     a60:	f8 94       	cli
		toggleLED1();
     a62:	0e 94 a3 01 	call	0x346	; 0x346 <toggleLED1>
		sprintf(line1, "SX%02X Y%02X C%d Z%d",      // Format joystick and
		payload[0], payload[1], C, Z);			//  button data
     a66:	80 91 b8 01 	lds	r24, 0x01B8
     a6a:	8f 93       	push	r24
     a6c:	80 91 b7 01 	lds	r24, 0x01B7
     a70:	8f 93       	push	r24
     a72:	80 91 b6 01 	lds	r24, 0x01B6
     a76:	8f 93       	push	r24
     a78:	80 91 b5 01 	lds	r24, 0x01B5
     a7c:	8f 93       	push	r24
     a7e:	ea eb       	ldi	r30, 0xBA	; 186
     a80:	f1 e0       	ldi	r31, 0x01	; 1
     a82:	80 81       	ld	r24, Z
     a84:	1f 92       	push	r1
     a86:	8f 93       	push	r24
     a88:	e9 eb       	ldi	r30, 0xB9	; 185
     a8a:	f1 e0       	ldi	r31, 0x01	; 1
     a8c:	80 81       	ld	r24, Z
     a8e:	1f 92       	push	r1
     a90:	8f 93       	push	r24
     a92:	1f 93       	push	r17
     a94:	0f 93       	push	r16
     a96:	8d e8       	ldi	r24, 0x8D	; 141
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	9f 93       	push	r25
     a9c:	8f 93       	push	r24
     a9e:	0e 94 83 05 	call	0xb06	; 0xb06 <sprintf>
		sprintf(line2,"X%02X Y%02X Z%02X %cX%02X",       // Format accelerometer
		payload[2], payload[3], payload[4], mode, cd);   //  data
     aa2:	1f 92       	push	r1
     aa4:	cf 92       	push	r12
     aa6:	1f 92       	push	r1
     aa8:	f9 81       	ldd	r31, Y+1	; 0x01
     aaa:	ff 93       	push	r31
     aac:	f4 01       	movw	r30, r8
     aae:	80 81       	ld	r24, Z
     ab0:	1f 92       	push	r1
     ab2:	8f 93       	push	r24
     ab4:	f3 01       	movw	r30, r6
     ab6:	80 81       	ld	r24, Z
     ab8:	1f 92       	push	r1
     aba:	8f 93       	push	r24
     abc:	f2 01       	movw	r30, r4
     abe:	80 81       	ld	r24, Z
     ac0:	1f 92       	push	r1
     ac2:	8f 93       	push	r24
     ac4:	3f 92       	push	r3
     ac6:	2f 92       	push	r2
     ac8:	ff 92       	push	r15
     aca:	ef 92       	push	r14
     acc:	0e 94 83 05 	call	0xb06	; 0xb06 <sprintf>
		displayLCD();
     ad0:	0e 94 3d 04 	call	0x87a	; 0x87a <_Z10displayLCDv>
		
		asm volatile ("sei"::);		//activate interrupts
     ad4:	78 94       	sei
		
		
		
		transmitter.flushRX();
     ad6:	8f eb       	ldi	r24, 0xBF	; 191
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_ZN3NRF7flushRXEv>
			//transmitter.maskIRQ(0<<NRF_MASK_MAX_RT);
			//else transmitter.maskIRQ(1<<NRF_MASK_MAX_RT);
		
		//test interrupt				
		//_delay_ms(100);
		PORTB &= ~(1<<PB7);		//Turn off LED (turned on in interrupt)
     ade:	2f 98       	cbi	0x05, 7	; 5
	toggleLED1();
	lcdClearDisplay();
	asm volatile ("sei"::);		//activate interrupts
	setCE();
	
	while(1){
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	cd bf       	out	0x3d, r28	; 61
     aea:	94 cf       	rjmp	.-216    	; 0xa14 <main+0xb6>

00000aec <_GLOBAL__sub_I_transmitter>:
#include <stdio.h>		//for lcd msg
#include <util/delay.h>

//declare transmitter as global for interrupts
//channel 1, payload length 6
NRF transmitter(1,6);
     aec:	46 e0       	ldi	r20, 0x06	; 6
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	8f eb       	ldi	r24, 0xBF	; 191
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	0e 94 8f 03 	call	0x71e	; 0x71e <_ZN3NRFC1Ehh>
     af8:	08 95       	ret

00000afa <__tablejump2__>:
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31

00000afe <__tablejump__>:
     afe:	05 90       	lpm	r0, Z+
     b00:	f4 91       	lpm	r31, Z
     b02:	e0 2d       	mov	r30, r0
     b04:	09 94       	ijmp

00000b06 <sprintf>:
     b06:	ae e0       	ldi	r26, 0x0E	; 14
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	e9 e8       	ldi	r30, 0x89	; 137
     b0c:	f5 e0       	ldi	r31, 0x05	; 5
     b0e:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__prologue_saves__+0x1c>
     b12:	0d 89       	ldd	r16, Y+21	; 0x15
     b14:	1e 89       	ldd	r17, Y+22	; 0x16
     b16:	86 e0       	ldi	r24, 0x06	; 6
     b18:	8c 83       	std	Y+4, r24	; 0x04
     b1a:	1a 83       	std	Y+2, r17	; 0x02
     b1c:	09 83       	std	Y+1, r16	; 0x01
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	9f e7       	ldi	r25, 0x7F	; 127
     b22:	9e 83       	std	Y+6, r25	; 0x06
     b24:	8d 83       	std	Y+5, r24	; 0x05
     b26:	ce 01       	movw	r24, r28
     b28:	49 96       	adiw	r24, 0x19	; 25
     b2a:	ac 01       	movw	r20, r24
     b2c:	6f 89       	ldd	r22, Y+23	; 0x17
     b2e:	78 8d       	ldd	r23, Y+24	; 0x18
     b30:	ce 01       	movw	r24, r28
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	0e 94 a5 05 	call	0xb4a	; 0xb4a <vfprintf>
     b38:	ef 81       	ldd	r30, Y+7	; 0x07
     b3a:	f8 85       	ldd	r31, Y+8	; 0x08
     b3c:	e0 0f       	add	r30, r16
     b3e:	f1 1f       	adc	r31, r17
     b40:	10 82       	st	Z, r1
     b42:	2e 96       	adiw	r28, 0x0e	; 14
     b44:	e4 e0       	ldi	r30, 0x04	; 4
     b46:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__epilogue_restores__+0x1c>

00000b4a <vfprintf>:
     b4a:	ac e0       	ldi	r26, 0x0C	; 12
     b4c:	b0 e0       	ldi	r27, 0x00	; 0
     b4e:	eb ea       	ldi	r30, 0xAB	; 171
     b50:	f5 e0       	ldi	r31, 0x05	; 5
     b52:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__prologue_saves__>
     b56:	7c 01       	movw	r14, r24
     b58:	6b 01       	movw	r12, r22
     b5a:	8a 01       	movw	r16, r20
     b5c:	fc 01       	movw	r30, r24
     b5e:	17 82       	std	Z+7, r1	; 0x07
     b60:	16 82       	std	Z+6, r1	; 0x06
     b62:	83 81       	ldd	r24, Z+3	; 0x03
     b64:	81 ff       	sbrs	r24, 1
     b66:	c6 c1       	rjmp	.+908    	; 0xef4 <vfprintf+0x3aa>
     b68:	88 24       	eor	r8, r8
     b6a:	83 94       	inc	r8
     b6c:	91 2c       	mov	r9, r1
     b6e:	8c 0e       	add	r8, r28
     b70:	9d 1e       	adc	r9, r29
     b72:	f7 01       	movw	r30, r14
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	f6 01       	movw	r30, r12
     b78:	93 fd       	sbrc	r25, 3
     b7a:	85 91       	lpm	r24, Z+
     b7c:	93 ff       	sbrs	r25, 3
     b7e:	81 91       	ld	r24, Z+
     b80:	6f 01       	movw	r12, r30
     b82:	88 23       	and	r24, r24
     b84:	09 f4       	brne	.+2      	; 0xb88 <vfprintf+0x3e>
     b86:	b2 c1       	rjmp	.+868    	; 0xeec <vfprintf+0x3a2>
     b88:	85 32       	cpi	r24, 0x25	; 37
     b8a:	39 f4       	brne	.+14     	; 0xb9a <vfprintf+0x50>
     b8c:	93 fd       	sbrc	r25, 3
     b8e:	85 91       	lpm	r24, Z+
     b90:	93 ff       	sbrs	r25, 3
     b92:	81 91       	ld	r24, Z+
     b94:	6f 01       	movw	r12, r30
     b96:	85 32       	cpi	r24, 0x25	; 37
     b98:	29 f4       	brne	.+10     	; 0xba4 <vfprintf+0x5a>
     b9a:	b7 01       	movw	r22, r14
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 97 07 	call	0xf2e	; 0xf2e <fputc>
     ba2:	e7 cf       	rjmp	.-50     	; 0xb72 <vfprintf+0x28>
     ba4:	51 2c       	mov	r5, r1
     ba6:	31 2c       	mov	r3, r1
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	20 32       	cpi	r18, 0x20	; 32
     bac:	a8 f4       	brcc	.+42     	; 0xbd8 <vfprintf+0x8e>
     bae:	8b 32       	cpi	r24, 0x2B	; 43
     bb0:	61 f0       	breq	.+24     	; 0xbca <vfprintf+0x80>
     bb2:	28 f4       	brcc	.+10     	; 0xbbe <vfprintf+0x74>
     bb4:	80 32       	cpi	r24, 0x20	; 32
     bb6:	51 f0       	breq	.+20     	; 0xbcc <vfprintf+0x82>
     bb8:	83 32       	cpi	r24, 0x23	; 35
     bba:	71 f4       	brne	.+28     	; 0xbd8 <vfprintf+0x8e>
     bbc:	0b c0       	rjmp	.+22     	; 0xbd4 <vfprintf+0x8a>
     bbe:	8d 32       	cpi	r24, 0x2D	; 45
     bc0:	39 f0       	breq	.+14     	; 0xbd0 <vfprintf+0x86>
     bc2:	80 33       	cpi	r24, 0x30	; 48
     bc4:	49 f4       	brne	.+18     	; 0xbd8 <vfprintf+0x8e>
     bc6:	21 60       	ori	r18, 0x01	; 1
     bc8:	28 c0       	rjmp	.+80     	; 0xc1a <vfprintf+0xd0>
     bca:	22 60       	ori	r18, 0x02	; 2
     bcc:	24 60       	ori	r18, 0x04	; 4
     bce:	25 c0       	rjmp	.+74     	; 0xc1a <vfprintf+0xd0>
     bd0:	28 60       	ori	r18, 0x08	; 8
     bd2:	23 c0       	rjmp	.+70     	; 0xc1a <vfprintf+0xd0>
     bd4:	20 61       	ori	r18, 0x10	; 16
     bd6:	21 c0       	rjmp	.+66     	; 0xc1a <vfprintf+0xd0>
     bd8:	27 fd       	sbrc	r18, 7
     bda:	27 c0       	rjmp	.+78     	; 0xc2a <vfprintf+0xe0>
     bdc:	38 2f       	mov	r19, r24
     bde:	30 53       	subi	r19, 0x30	; 48
     be0:	3a 30       	cpi	r19, 0x0A	; 10
     be2:	78 f4       	brcc	.+30     	; 0xc02 <vfprintf+0xb8>
     be4:	26 ff       	sbrs	r18, 6
     be6:	06 c0       	rjmp	.+12     	; 0xbf4 <vfprintf+0xaa>
     be8:	fa e0       	ldi	r31, 0x0A	; 10
     bea:	5f 9e       	mul	r5, r31
     bec:	30 0d       	add	r19, r0
     bee:	11 24       	eor	r1, r1
     bf0:	53 2e       	mov	r5, r19
     bf2:	13 c0       	rjmp	.+38     	; 0xc1a <vfprintf+0xd0>
     bf4:	8a e0       	ldi	r24, 0x0A	; 10
     bf6:	38 9e       	mul	r3, r24
     bf8:	30 0d       	add	r19, r0
     bfa:	11 24       	eor	r1, r1
     bfc:	33 2e       	mov	r3, r19
     bfe:	20 62       	ori	r18, 0x20	; 32
     c00:	0c c0       	rjmp	.+24     	; 0xc1a <vfprintf+0xd0>
     c02:	8e 32       	cpi	r24, 0x2E	; 46
     c04:	21 f4       	brne	.+8      	; 0xc0e <vfprintf+0xc4>
     c06:	26 fd       	sbrc	r18, 6
     c08:	71 c1       	rjmp	.+738    	; 0xeec <vfprintf+0x3a2>
     c0a:	20 64       	ori	r18, 0x40	; 64
     c0c:	06 c0       	rjmp	.+12     	; 0xc1a <vfprintf+0xd0>
     c0e:	8c 36       	cpi	r24, 0x6C	; 108
     c10:	11 f4       	brne	.+4      	; 0xc16 <vfprintf+0xcc>
     c12:	20 68       	ori	r18, 0x80	; 128
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <vfprintf+0xd0>
     c16:	88 36       	cpi	r24, 0x68	; 104
     c18:	41 f4       	brne	.+16     	; 0xc2a <vfprintf+0xe0>
     c1a:	f6 01       	movw	r30, r12
     c1c:	93 fd       	sbrc	r25, 3
     c1e:	85 91       	lpm	r24, Z+
     c20:	93 ff       	sbrs	r25, 3
     c22:	81 91       	ld	r24, Z+
     c24:	6f 01       	movw	r12, r30
     c26:	81 11       	cpse	r24, r1
     c28:	c0 cf       	rjmp	.-128    	; 0xbaa <vfprintf+0x60>
     c2a:	98 2f       	mov	r25, r24
     c2c:	95 54       	subi	r25, 0x45	; 69
     c2e:	93 30       	cpi	r25, 0x03	; 3
     c30:	18 f0       	brcs	.+6      	; 0xc38 <vfprintf+0xee>
     c32:	90 52       	subi	r25, 0x20	; 32
     c34:	93 30       	cpi	r25, 0x03	; 3
     c36:	28 f4       	brcc	.+10     	; 0xc42 <vfprintf+0xf8>
     c38:	0c 5f       	subi	r16, 0xFC	; 252
     c3a:	1f 4f       	sbci	r17, 0xFF	; 255
     c3c:	ff e3       	ldi	r31, 0x3F	; 63
     c3e:	f9 83       	std	Y+1, r31	; 0x01
     c40:	0d c0       	rjmp	.+26     	; 0xc5c <vfprintf+0x112>
     c42:	83 36       	cpi	r24, 0x63	; 99
     c44:	31 f0       	breq	.+12     	; 0xc52 <vfprintf+0x108>
     c46:	83 37       	cpi	r24, 0x73	; 115
     c48:	71 f0       	breq	.+28     	; 0xc66 <vfprintf+0x11c>
     c4a:	83 35       	cpi	r24, 0x53	; 83
     c4c:	09 f0       	breq	.+2      	; 0xc50 <vfprintf+0x106>
     c4e:	5e c0       	rjmp	.+188    	; 0xd0c <vfprintf+0x1c2>
     c50:	23 c0       	rjmp	.+70     	; 0xc98 <vfprintf+0x14e>
     c52:	f8 01       	movw	r30, r16
     c54:	80 81       	ld	r24, Z
     c56:	89 83       	std	Y+1, r24	; 0x01
     c58:	0e 5f       	subi	r16, 0xFE	; 254
     c5a:	1f 4f       	sbci	r17, 0xFF	; 255
     c5c:	44 24       	eor	r4, r4
     c5e:	43 94       	inc	r4
     c60:	51 2c       	mov	r5, r1
     c62:	54 01       	movw	r10, r8
     c64:	15 c0       	rjmp	.+42     	; 0xc90 <vfprintf+0x146>
     c66:	38 01       	movw	r6, r16
     c68:	f2 e0       	ldi	r31, 0x02	; 2
     c6a:	6f 0e       	add	r6, r31
     c6c:	71 1c       	adc	r7, r1
     c6e:	f8 01       	movw	r30, r16
     c70:	a0 80       	ld	r10, Z
     c72:	b1 80       	ldd	r11, Z+1	; 0x01
     c74:	26 ff       	sbrs	r18, 6
     c76:	03 c0       	rjmp	.+6      	; 0xc7e <vfprintf+0x134>
     c78:	65 2d       	mov	r22, r5
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <vfprintf+0x138>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	c5 01       	movw	r24, r10
     c84:	2c 87       	std	Y+12, r18	; 0x0c
     c86:	0e 94 8c 07 	call	0xf18	; 0xf18 <strnlen>
     c8a:	2c 01       	movw	r4, r24
     c8c:	83 01       	movw	r16, r6
     c8e:	2c 85       	ldd	r18, Y+12	; 0x0c
     c90:	6f e7       	ldi	r22, 0x7F	; 127
     c92:	26 2e       	mov	r2, r22
     c94:	22 22       	and	r2, r18
     c96:	18 c0       	rjmp	.+48     	; 0xcc8 <vfprintf+0x17e>
     c98:	38 01       	movw	r6, r16
     c9a:	f2 e0       	ldi	r31, 0x02	; 2
     c9c:	6f 0e       	add	r6, r31
     c9e:	71 1c       	adc	r7, r1
     ca0:	f8 01       	movw	r30, r16
     ca2:	a0 80       	ld	r10, Z
     ca4:	b1 80       	ldd	r11, Z+1	; 0x01
     ca6:	26 ff       	sbrs	r18, 6
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <vfprintf+0x166>
     caa:	65 2d       	mov	r22, r5
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <vfprintf+0x16a>
     cb0:	6f ef       	ldi	r22, 0xFF	; 255
     cb2:	7f ef       	ldi	r23, 0xFF	; 255
     cb4:	c5 01       	movw	r24, r10
     cb6:	2c 87       	std	Y+12, r18	; 0x0c
     cb8:	0e 94 81 07 	call	0xf02	; 0xf02 <strnlen_P>
     cbc:	2c 01       	movw	r4, r24
     cbe:	2c 85       	ldd	r18, Y+12	; 0x0c
     cc0:	50 e8       	ldi	r21, 0x80	; 128
     cc2:	25 2e       	mov	r2, r21
     cc4:	22 2a       	or	r2, r18
     cc6:	83 01       	movw	r16, r6
     cc8:	23 fc       	sbrc	r2, 3
     cca:	1c c0       	rjmp	.+56     	; 0xd04 <vfprintf+0x1ba>
     ccc:	06 c0       	rjmp	.+12     	; 0xcda <vfprintf+0x190>
     cce:	b7 01       	movw	r22, r14
     cd0:	80 e2       	ldi	r24, 0x20	; 32
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 97 07 	call	0xf2e	; 0xf2e <fputc>
     cd8:	3a 94       	dec	r3
     cda:	83 2d       	mov	r24, r3
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	48 16       	cp	r4, r24
     ce0:	59 06       	cpc	r5, r25
     ce2:	a8 f3       	brcs	.-22     	; 0xcce <vfprintf+0x184>
     ce4:	0f c0       	rjmp	.+30     	; 0xd04 <vfprintf+0x1ba>
     ce6:	f5 01       	movw	r30, r10
     ce8:	27 fc       	sbrc	r2, 7
     cea:	85 91       	lpm	r24, Z+
     cec:	27 fe       	sbrs	r2, 7
     cee:	81 91       	ld	r24, Z+
     cf0:	5f 01       	movw	r10, r30
     cf2:	b7 01       	movw	r22, r14
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 97 07 	call	0xf2e	; 0xf2e <fputc>
     cfa:	31 10       	cpse	r3, r1
     cfc:	3a 94       	dec	r3
     cfe:	f1 e0       	ldi	r31, 0x01	; 1
     d00:	4f 1a       	sub	r4, r31
     d02:	51 08       	sbc	r5, r1
     d04:	41 14       	cp	r4, r1
     d06:	51 04       	cpc	r5, r1
     d08:	71 f7       	brne	.-36     	; 0xce6 <vfprintf+0x19c>
     d0a:	ed c0       	rjmp	.+474    	; 0xee6 <vfprintf+0x39c>
     d0c:	84 36       	cpi	r24, 0x64	; 100
     d0e:	11 f0       	breq	.+4      	; 0xd14 <vfprintf+0x1ca>
     d10:	89 36       	cpi	r24, 0x69	; 105
     d12:	41 f5       	brne	.+80     	; 0xd64 <vfprintf+0x21a>
     d14:	f8 01       	movw	r30, r16
     d16:	27 ff       	sbrs	r18, 7
     d18:	07 c0       	rjmp	.+14     	; 0xd28 <vfprintf+0x1de>
     d1a:	60 81       	ld	r22, Z
     d1c:	71 81       	ldd	r23, Z+1	; 0x01
     d1e:	82 81       	ldd	r24, Z+2	; 0x02
     d20:	93 81       	ldd	r25, Z+3	; 0x03
     d22:	0c 5f       	subi	r16, 0xFC	; 252
     d24:	1f 4f       	sbci	r17, 0xFF	; 255
     d26:	08 c0       	rjmp	.+16     	; 0xd38 <vfprintf+0x1ee>
     d28:	60 81       	ld	r22, Z
     d2a:	71 81       	ldd	r23, Z+1	; 0x01
     d2c:	88 27       	eor	r24, r24
     d2e:	77 fd       	sbrc	r23, 7
     d30:	80 95       	com	r24
     d32:	98 2f       	mov	r25, r24
     d34:	0e 5f       	subi	r16, 0xFE	; 254
     d36:	1f 4f       	sbci	r17, 0xFF	; 255
     d38:	4f e6       	ldi	r20, 0x6F	; 111
     d3a:	b4 2e       	mov	r11, r20
     d3c:	b2 22       	and	r11, r18
     d3e:	97 ff       	sbrs	r25, 7
     d40:	09 c0       	rjmp	.+18     	; 0xd54 <vfprintf+0x20a>
     d42:	90 95       	com	r25
     d44:	80 95       	com	r24
     d46:	70 95       	com	r23
     d48:	61 95       	neg	r22
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	8f 4f       	sbci	r24, 0xFF	; 255
     d4e:	9f 4f       	sbci	r25, 0xFF	; 255
     d50:	f0 e8       	ldi	r31, 0x80	; 128
     d52:	bf 2a       	or	r11, r31
     d54:	2a e0       	ldi	r18, 0x0A	; 10
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	a4 01       	movw	r20, r8
     d5a:	0e 94 c3 07 	call	0xf86	; 0xf86 <__ultoa_invert>
     d5e:	a8 2e       	mov	r10, r24
     d60:	a8 18       	sub	r10, r8
     d62:	43 c0       	rjmp	.+134    	; 0xdea <vfprintf+0x2a0>
     d64:	85 37       	cpi	r24, 0x75	; 117
     d66:	31 f4       	brne	.+12     	; 0xd74 <vfprintf+0x22a>
     d68:	3f ee       	ldi	r19, 0xEF	; 239
     d6a:	b3 2e       	mov	r11, r19
     d6c:	b2 22       	and	r11, r18
     d6e:	2a e0       	ldi	r18, 0x0A	; 10
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	24 c0       	rjmp	.+72     	; 0xdbc <vfprintf+0x272>
     d74:	99 ef       	ldi	r25, 0xF9	; 249
     d76:	b9 2e       	mov	r11, r25
     d78:	b2 22       	and	r11, r18
     d7a:	8f 36       	cpi	r24, 0x6F	; 111
     d7c:	b9 f0       	breq	.+46     	; 0xdac <vfprintf+0x262>
     d7e:	20 f4       	brcc	.+8      	; 0xd88 <vfprintf+0x23e>
     d80:	88 35       	cpi	r24, 0x58	; 88
     d82:	09 f0       	breq	.+2      	; 0xd86 <vfprintf+0x23c>
     d84:	b3 c0       	rjmp	.+358    	; 0xeec <vfprintf+0x3a2>
     d86:	0d c0       	rjmp	.+26     	; 0xda2 <vfprintf+0x258>
     d88:	80 37       	cpi	r24, 0x70	; 112
     d8a:	21 f0       	breq	.+8      	; 0xd94 <vfprintf+0x24a>
     d8c:	88 37       	cpi	r24, 0x78	; 120
     d8e:	09 f0       	breq	.+2      	; 0xd92 <vfprintf+0x248>
     d90:	ad c0       	rjmp	.+346    	; 0xeec <vfprintf+0x3a2>
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <vfprintf+0x24e>
     d94:	20 e1       	ldi	r18, 0x10	; 16
     d96:	b2 2a       	or	r11, r18
     d98:	b4 fe       	sbrs	r11, 4
     d9a:	0b c0       	rjmp	.+22     	; 0xdb2 <vfprintf+0x268>
     d9c:	84 e0       	ldi	r24, 0x04	; 4
     d9e:	b8 2a       	or	r11, r24
     da0:	08 c0       	rjmp	.+16     	; 0xdb2 <vfprintf+0x268>
     da2:	24 ff       	sbrs	r18, 4
     da4:	09 c0       	rjmp	.+18     	; 0xdb8 <vfprintf+0x26e>
     da6:	e6 e0       	ldi	r30, 0x06	; 6
     da8:	be 2a       	or	r11, r30
     daa:	06 c0       	rjmp	.+12     	; 0xdb8 <vfprintf+0x26e>
     dac:	28 e0       	ldi	r18, 0x08	; 8
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	05 c0       	rjmp	.+10     	; 0xdbc <vfprintf+0x272>
     db2:	20 e1       	ldi	r18, 0x10	; 16
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <vfprintf+0x272>
     db8:	20 e1       	ldi	r18, 0x10	; 16
     dba:	32 e0       	ldi	r19, 0x02	; 2
     dbc:	f8 01       	movw	r30, r16
     dbe:	b7 fe       	sbrs	r11, 7
     dc0:	07 c0       	rjmp	.+14     	; 0xdd0 <vfprintf+0x286>
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	0c 5f       	subi	r16, 0xFC	; 252
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	06 c0       	rjmp	.+12     	; 0xddc <vfprintf+0x292>
     dd0:	60 81       	ld	r22, Z
     dd2:	71 81       	ldd	r23, Z+1	; 0x01
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 5f       	subi	r16, 0xFE	; 254
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	a4 01       	movw	r20, r8
     dde:	0e 94 c3 07 	call	0xf86	; 0xf86 <__ultoa_invert>
     de2:	a8 2e       	mov	r10, r24
     de4:	a8 18       	sub	r10, r8
     de6:	ff e7       	ldi	r31, 0x7F	; 127
     de8:	bf 22       	and	r11, r31
     dea:	b6 fe       	sbrs	r11, 6
     dec:	0b c0       	rjmp	.+22     	; 0xe04 <vfprintf+0x2ba>
     dee:	2b 2d       	mov	r18, r11
     df0:	2e 7f       	andi	r18, 0xFE	; 254
     df2:	a5 14       	cp	r10, r5
     df4:	50 f4       	brcc	.+20     	; 0xe0a <vfprintf+0x2c0>
     df6:	b4 fe       	sbrs	r11, 4
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <vfprintf+0x2c4>
     dfa:	b2 fc       	sbrc	r11, 2
     dfc:	08 c0       	rjmp	.+16     	; 0xe0e <vfprintf+0x2c4>
     dfe:	2b 2d       	mov	r18, r11
     e00:	2e 7e       	andi	r18, 0xEE	; 238
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <vfprintf+0x2c4>
     e04:	7a 2c       	mov	r7, r10
     e06:	2b 2d       	mov	r18, r11
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <vfprintf+0x2c6>
     e0a:	7a 2c       	mov	r7, r10
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <vfprintf+0x2c6>
     e0e:	75 2c       	mov	r7, r5
     e10:	24 ff       	sbrs	r18, 4
     e12:	0d c0       	rjmp	.+26     	; 0xe2e <vfprintf+0x2e4>
     e14:	fe 01       	movw	r30, r28
     e16:	ea 0d       	add	r30, r10
     e18:	f1 1d       	adc	r31, r1
     e1a:	80 81       	ld	r24, Z
     e1c:	80 33       	cpi	r24, 0x30	; 48
     e1e:	11 f4       	brne	.+4      	; 0xe24 <vfprintf+0x2da>
     e20:	29 7e       	andi	r18, 0xE9	; 233
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <vfprintf+0x2ec>
     e24:	22 ff       	sbrs	r18, 2
     e26:	06 c0       	rjmp	.+12     	; 0xe34 <vfprintf+0x2ea>
     e28:	73 94       	inc	r7
     e2a:	73 94       	inc	r7
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <vfprintf+0x2ec>
     e2e:	82 2f       	mov	r24, r18
     e30:	86 78       	andi	r24, 0x86	; 134
     e32:	09 f0       	breq	.+2      	; 0xe36 <vfprintf+0x2ec>
     e34:	73 94       	inc	r7
     e36:	23 fd       	sbrc	r18, 3
     e38:	14 c0       	rjmp	.+40     	; 0xe62 <vfprintf+0x318>
     e3a:	20 ff       	sbrs	r18, 0
     e3c:	0f c0       	rjmp	.+30     	; 0xe5c <vfprintf+0x312>
     e3e:	5a 2c       	mov	r5, r10
     e40:	73 14       	cp	r7, r3
     e42:	60 f4       	brcc	.+24     	; 0xe5c <vfprintf+0x312>
     e44:	53 0c       	add	r5, r3
     e46:	57 18       	sub	r5, r7
     e48:	73 2c       	mov	r7, r3
     e4a:	08 c0       	rjmp	.+16     	; 0xe5c <vfprintf+0x312>
     e4c:	b7 01       	movw	r22, r14
     e4e:	80 e2       	ldi	r24, 0x20	; 32
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	2c 87       	std	Y+12, r18	; 0x0c
     e54:	0e 94 97 07 	call	0xf2e	; 0xf2e <fputc>
     e58:	73 94       	inc	r7
     e5a:	2c 85       	ldd	r18, Y+12	; 0x0c
     e5c:	73 14       	cp	r7, r3
     e5e:	b0 f3       	brcs	.-20     	; 0xe4c <vfprintf+0x302>
     e60:	04 c0       	rjmp	.+8      	; 0xe6a <vfprintf+0x320>
     e62:	73 14       	cp	r7, r3
     e64:	10 f4       	brcc	.+4      	; 0xe6a <vfprintf+0x320>
     e66:	37 18       	sub	r3, r7
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <vfprintf+0x322>
     e6a:	31 2c       	mov	r3, r1
     e6c:	24 ff       	sbrs	r18, 4
     e6e:	12 c0       	rjmp	.+36     	; 0xe94 <vfprintf+0x34a>
     e70:	b7 01       	movw	r22, r14
     e72:	80 e3       	ldi	r24, 0x30	; 48
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	2c 87       	std	Y+12, r18	; 0x0c
     e78:	0e 94 97 07 	call	0xf2e	; 0xf2e <fputc>
     e7c:	2c 85       	ldd	r18, Y+12	; 0x0c
     e7e:	22 ff       	sbrs	r18, 2
     e80:	1e c0       	rjmp	.+60     	; 0xebe <vfprintf+0x374>
     e82:	21 ff       	sbrs	r18, 1
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <vfprintf+0x342>
     e86:	88 e5       	ldi	r24, 0x58	; 88
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <vfprintf+0x346>
     e8c:	88 e7       	ldi	r24, 0x78	; 120
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	b7 01       	movw	r22, r14
     e92:	0c c0       	rjmp	.+24     	; 0xeac <vfprintf+0x362>
     e94:	82 2f       	mov	r24, r18
     e96:	86 78       	andi	r24, 0x86	; 134
     e98:	91 f0       	breq	.+36     	; 0xebe <vfprintf+0x374>
     e9a:	21 fd       	sbrc	r18, 1
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <vfprintf+0x358>
     e9e:	80 e2       	ldi	r24, 0x20	; 32
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <vfprintf+0x35a>
     ea2:	8b e2       	ldi	r24, 0x2B	; 43
     ea4:	27 fd       	sbrc	r18, 7
     ea6:	8d e2       	ldi	r24, 0x2D	; 45
     ea8:	b7 01       	movw	r22, r14
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 97 07 	call	0xf2e	; 0xf2e <fputc>
     eb0:	06 c0       	rjmp	.+12     	; 0xebe <vfprintf+0x374>
     eb2:	b7 01       	movw	r22, r14
     eb4:	80 e3       	ldi	r24, 0x30	; 48
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 97 07 	call	0xf2e	; 0xf2e <fputc>
     ebc:	5a 94       	dec	r5
     ebe:	a5 14       	cp	r10, r5
     ec0:	c0 f3       	brcs	.-16     	; 0xeb2 <vfprintf+0x368>
     ec2:	aa 94       	dec	r10
     ec4:	f4 01       	movw	r30, r8
     ec6:	ea 0d       	add	r30, r10
     ec8:	f1 1d       	adc	r31, r1
     eca:	b7 01       	movw	r22, r14
     ecc:	80 81       	ld	r24, Z
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 97 07 	call	0xf2e	; 0xf2e <fputc>
     ed4:	a1 10       	cpse	r10, r1
     ed6:	f5 cf       	rjmp	.-22     	; 0xec2 <vfprintf+0x378>
     ed8:	06 c0       	rjmp	.+12     	; 0xee6 <vfprintf+0x39c>
     eda:	b7 01       	movw	r22, r14
     edc:	80 e2       	ldi	r24, 0x20	; 32
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 97 07 	call	0xf2e	; 0xf2e <fputc>
     ee4:	3a 94       	dec	r3
     ee6:	31 10       	cpse	r3, r1
     ee8:	f8 cf       	rjmp	.-16     	; 0xeda <vfprintf+0x390>
     eea:	43 ce       	rjmp	.-890    	; 0xb72 <vfprintf+0x28>
     eec:	f7 01       	movw	r30, r14
     eee:	26 81       	ldd	r18, Z+6	; 0x06
     ef0:	37 81       	ldd	r19, Z+7	; 0x07
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <vfprintf+0x3ae>
     ef4:	2f ef       	ldi	r18, 0xFF	; 255
     ef6:	3f ef       	ldi	r19, 0xFF	; 255
     ef8:	c9 01       	movw	r24, r18
     efa:	2c 96       	adiw	r28, 0x0c	; 12
     efc:	e2 e1       	ldi	r30, 0x12	; 18
     efe:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__epilogue_restores__>

00000f02 <strnlen_P>:
     f02:	fc 01       	movw	r30, r24
     f04:	05 90       	lpm	r0, Z+
     f06:	61 50       	subi	r22, 0x01	; 1
     f08:	70 40       	sbci	r23, 0x00	; 0
     f0a:	01 10       	cpse	r0, r1
     f0c:	d8 f7       	brcc	.-10     	; 0xf04 <strnlen_P+0x2>
     f0e:	80 95       	com	r24
     f10:	90 95       	com	r25
     f12:	8e 0f       	add	r24, r30
     f14:	9f 1f       	adc	r25, r31
     f16:	08 95       	ret

00000f18 <strnlen>:
     f18:	fc 01       	movw	r30, r24
     f1a:	61 50       	subi	r22, 0x01	; 1
     f1c:	70 40       	sbci	r23, 0x00	; 0
     f1e:	01 90       	ld	r0, Z+
     f20:	01 10       	cpse	r0, r1
     f22:	d8 f7       	brcc	.-10     	; 0xf1a <strnlen+0x2>
     f24:	80 95       	com	r24
     f26:	90 95       	com	r25
     f28:	8e 0f       	add	r24, r30
     f2a:	9f 1f       	adc	r25, r31
     f2c:	08 95       	ret

00000f2e <fputc>:
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	8c 01       	movw	r16, r24
     f38:	eb 01       	movw	r28, r22
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	81 fd       	sbrc	r24, 1
     f3e:	03 c0       	rjmp	.+6      	; 0xf46 <fputc+0x18>
     f40:	0f ef       	ldi	r16, 0xFF	; 255
     f42:	1f ef       	ldi	r17, 0xFF	; 255
     f44:	1a c0       	rjmp	.+52     	; 0xf7a <fputc+0x4c>
     f46:	82 ff       	sbrs	r24, 2
     f48:	0d c0       	rjmp	.+26     	; 0xf64 <fputc+0x36>
     f4a:	2e 81       	ldd	r18, Y+6	; 0x06
     f4c:	3f 81       	ldd	r19, Y+7	; 0x07
     f4e:	8c 81       	ldd	r24, Y+4	; 0x04
     f50:	9d 81       	ldd	r25, Y+5	; 0x05
     f52:	28 17       	cp	r18, r24
     f54:	39 07       	cpc	r19, r25
     f56:	64 f4       	brge	.+24     	; 0xf70 <fputc+0x42>
     f58:	e8 81       	ld	r30, Y
     f5a:	f9 81       	ldd	r31, Y+1	; 0x01
     f5c:	01 93       	st	Z+, r16
     f5e:	f9 83       	std	Y+1, r31	; 0x01
     f60:	e8 83       	st	Y, r30
     f62:	06 c0       	rjmp	.+12     	; 0xf70 <fputc+0x42>
     f64:	e8 85       	ldd	r30, Y+8	; 0x08
     f66:	f9 85       	ldd	r31, Y+9	; 0x09
     f68:	80 2f       	mov	r24, r16
     f6a:	09 95       	icall
     f6c:	89 2b       	or	r24, r25
     f6e:	41 f7       	brne	.-48     	; 0xf40 <fputc+0x12>
     f70:	8e 81       	ldd	r24, Y+6	; 0x06
     f72:	9f 81       	ldd	r25, Y+7	; 0x07
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	9f 83       	std	Y+7, r25	; 0x07
     f78:	8e 83       	std	Y+6, r24	; 0x06
     f7a:	c8 01       	movw	r24, r16
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	08 95       	ret

00000f86 <__ultoa_invert>:
     f86:	fa 01       	movw	r30, r20
     f88:	aa 27       	eor	r26, r26
     f8a:	28 30       	cpi	r18, 0x08	; 8
     f8c:	51 f1       	breq	.+84     	; 0xfe2 <__ultoa_invert+0x5c>
     f8e:	20 31       	cpi	r18, 0x10	; 16
     f90:	81 f1       	breq	.+96     	; 0xff2 <__ultoa_invert+0x6c>
     f92:	e8 94       	clt
     f94:	6f 93       	push	r22
     f96:	6e 7f       	andi	r22, 0xFE	; 254
     f98:	6e 5f       	subi	r22, 0xFE	; 254
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	8f 4f       	sbci	r24, 0xFF	; 255
     f9e:	9f 4f       	sbci	r25, 0xFF	; 255
     fa0:	af 4f       	sbci	r26, 0xFF	; 255
     fa2:	b1 e0       	ldi	r27, 0x01	; 1
     fa4:	3e d0       	rcall	.+124    	; 0x1022 <__ultoa_invert+0x9c>
     fa6:	b4 e0       	ldi	r27, 0x04	; 4
     fa8:	3c d0       	rcall	.+120    	; 0x1022 <__ultoa_invert+0x9c>
     faa:	67 0f       	add	r22, r23
     fac:	78 1f       	adc	r23, r24
     fae:	89 1f       	adc	r24, r25
     fb0:	9a 1f       	adc	r25, r26
     fb2:	a1 1d       	adc	r26, r1
     fb4:	68 0f       	add	r22, r24
     fb6:	79 1f       	adc	r23, r25
     fb8:	8a 1f       	adc	r24, r26
     fba:	91 1d       	adc	r25, r1
     fbc:	a1 1d       	adc	r26, r1
     fbe:	6a 0f       	add	r22, r26
     fc0:	71 1d       	adc	r23, r1
     fc2:	81 1d       	adc	r24, r1
     fc4:	91 1d       	adc	r25, r1
     fc6:	a1 1d       	adc	r26, r1
     fc8:	20 d0       	rcall	.+64     	; 0x100a <__ultoa_invert+0x84>
     fca:	09 f4       	brne	.+2      	; 0xfce <__ultoa_invert+0x48>
     fcc:	68 94       	set
     fce:	3f 91       	pop	r19
     fd0:	2a e0       	ldi	r18, 0x0A	; 10
     fd2:	26 9f       	mul	r18, r22
     fd4:	11 24       	eor	r1, r1
     fd6:	30 19       	sub	r19, r0
     fd8:	30 5d       	subi	r19, 0xD0	; 208
     fda:	31 93       	st	Z+, r19
     fdc:	de f6       	brtc	.-74     	; 0xf94 <__ultoa_invert+0xe>
     fde:	cf 01       	movw	r24, r30
     fe0:	08 95       	ret
     fe2:	46 2f       	mov	r20, r22
     fe4:	47 70       	andi	r20, 0x07	; 7
     fe6:	40 5d       	subi	r20, 0xD0	; 208
     fe8:	41 93       	st	Z+, r20
     fea:	b3 e0       	ldi	r27, 0x03	; 3
     fec:	0f d0       	rcall	.+30     	; 0x100c <__ultoa_invert+0x86>
     fee:	c9 f7       	brne	.-14     	; 0xfe2 <__ultoa_invert+0x5c>
     ff0:	f6 cf       	rjmp	.-20     	; 0xfde <__ultoa_invert+0x58>
     ff2:	46 2f       	mov	r20, r22
     ff4:	4f 70       	andi	r20, 0x0F	; 15
     ff6:	40 5d       	subi	r20, 0xD0	; 208
     ff8:	4a 33       	cpi	r20, 0x3A	; 58
     ffa:	18 f0       	brcs	.+6      	; 0x1002 <__ultoa_invert+0x7c>
     ffc:	49 5d       	subi	r20, 0xD9	; 217
     ffe:	31 fd       	sbrc	r19, 1
    1000:	40 52       	subi	r20, 0x20	; 32
    1002:	41 93       	st	Z+, r20
    1004:	02 d0       	rcall	.+4      	; 0x100a <__ultoa_invert+0x84>
    1006:	a9 f7       	brne	.-22     	; 0xff2 <__ultoa_invert+0x6c>
    1008:	ea cf       	rjmp	.-44     	; 0xfde <__ultoa_invert+0x58>
    100a:	b4 e0       	ldi	r27, 0x04	; 4
    100c:	a6 95       	lsr	r26
    100e:	97 95       	ror	r25
    1010:	87 95       	ror	r24
    1012:	77 95       	ror	r23
    1014:	67 95       	ror	r22
    1016:	ba 95       	dec	r27
    1018:	c9 f7       	brne	.-14     	; 0x100c <__ultoa_invert+0x86>
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	61 05       	cpc	r22, r1
    101e:	71 05       	cpc	r23, r1
    1020:	08 95       	ret
    1022:	9b 01       	movw	r18, r22
    1024:	ac 01       	movw	r20, r24
    1026:	0a 2e       	mov	r0, r26
    1028:	06 94       	lsr	r0
    102a:	57 95       	ror	r21
    102c:	47 95       	ror	r20
    102e:	37 95       	ror	r19
    1030:	27 95       	ror	r18
    1032:	ba 95       	dec	r27
    1034:	c9 f7       	brne	.-14     	; 0x1028 <__ultoa_invert+0xa2>
    1036:	62 0f       	add	r22, r18
    1038:	73 1f       	adc	r23, r19
    103a:	84 1f       	adc	r24, r20
    103c:	95 1f       	adc	r25, r21
    103e:	a0 1d       	adc	r26, r0
    1040:	08 95       	ret

00001042 <__prologue_saves__>:
    1042:	2f 92       	push	r2
    1044:	3f 92       	push	r3
    1046:	4f 92       	push	r4
    1048:	5f 92       	push	r5
    104a:	6f 92       	push	r6
    104c:	7f 92       	push	r7
    104e:	8f 92       	push	r8
    1050:	9f 92       	push	r9
    1052:	af 92       	push	r10
    1054:	bf 92       	push	r11
    1056:	cf 92       	push	r12
    1058:	df 92       	push	r13
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	ca 1b       	sub	r28, r26
    106c:	db 0b       	sbc	r29, r27
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	09 94       	ijmp

0000107a <__epilogue_restores__>:
    107a:	2a 88       	ldd	r2, Y+18	; 0x12
    107c:	39 88       	ldd	r3, Y+17	; 0x11
    107e:	48 88       	ldd	r4, Y+16	; 0x10
    1080:	5f 84       	ldd	r5, Y+15	; 0x0f
    1082:	6e 84       	ldd	r6, Y+14	; 0x0e
    1084:	7d 84       	ldd	r7, Y+13	; 0x0d
    1086:	8c 84       	ldd	r8, Y+12	; 0x0c
    1088:	9b 84       	ldd	r9, Y+11	; 0x0b
    108a:	aa 84       	ldd	r10, Y+10	; 0x0a
    108c:	b9 84       	ldd	r11, Y+9	; 0x09
    108e:	c8 84       	ldd	r12, Y+8	; 0x08
    1090:	df 80       	ldd	r13, Y+7	; 0x07
    1092:	ee 80       	ldd	r14, Y+6	; 0x06
    1094:	fd 80       	ldd	r15, Y+5	; 0x05
    1096:	0c 81       	ldd	r16, Y+4	; 0x04
    1098:	1b 81       	ldd	r17, Y+3	; 0x03
    109a:	aa 81       	ldd	r26, Y+2	; 0x02
    109c:	b9 81       	ldd	r27, Y+1	; 0x01
    109e:	ce 0f       	add	r28, r30
    10a0:	d1 1d       	adc	r29, r1
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	ed 01       	movw	r28, r26
    10ae:	08 95       	ret

000010b0 <_exit>:
    10b0:	f8 94       	cli

000010b2 <__stop_program>:
    10b2:	ff cf       	rjmp	.-2      	; 0x10b2 <__stop_program>
