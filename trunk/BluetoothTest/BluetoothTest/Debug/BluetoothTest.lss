
BluetoothTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001a8  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800100  00800100  0000023c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000099f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000090  00000000  00000000  000009ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000512  00000000  00000000  00000a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000280  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000367  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000144  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000283  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000322  00000000  00000000  0000191f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00001c41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 34       	cpi	r26, 0x45	; 69
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  88:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  a4:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
  a8:	20 91 c6 00 	lds	r18, 0x00C6
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
  ac:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  ae:	e0 91 02 01 	lds	r30, 0x0102
  b2:	ef 5f       	subi	r30, 0xFF	; 255
  b4:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
  b6:	90 91 01 01 	lds	r25, 0x0101
  ba:	e9 17       	cp	r30, r25
  bc:	39 f0       	breq	.+14     	; 0xcc <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  be:	e0 93 02 01 	sts	0x0102, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	eb 5f       	subi	r30, 0xFB	; 251
  c6:	fe 4f       	sbci	r31, 0xFE	; 254
  c8:	20 83       	st	Z, r18
  ca:	01 c0       	rjmp	.+2      	; 0xce <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
  cc:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
  ce:	80 93 00 01 	sts	0x0100, r24
}
  d2:	ff 91       	pop	r31
  d4:	ef 91       	pop	r30
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	2f 91       	pop	r18
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
  f8:	90 91 04 01 	lds	r25, 0x0104
  fc:	80 91 03 01 	lds	r24, 0x0103
 100:	98 17       	cp	r25, r24
 102:	69 f0       	breq	.+26     	; 0x11e <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 104:	e0 91 03 01 	lds	r30, 0x0103
 108:	ef 5f       	subi	r30, 0xFF	; 255
 10a:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 10c:	e0 93 03 01 	sts	0x0103, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	eb 5d       	subi	r30, 0xDB	; 219
 114:	fe 4f       	sbci	r31, 0xFE	; 254
 116:	80 81       	ld	r24, Z
 118:	80 93 c6 00 	sts	0x00C6, r24
 11c:	05 c0       	rjmp	.+10     	; 0x128 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 11e:	e1 ec       	ldi	r30, 0xC1	; 193
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8f 7d       	andi	r24, 0xDF	; 223
 126:	80 83       	st	Z, r24
    }
}
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <_Z10USART_Initj>:
//}
//#endif

void USART_Init(unsigned int ubrr){
	//set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 13a:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 13e:	80 93 c4 00 	sts	0x00C4, r24
	
	//enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 142:	88 e1       	ldi	r24, 0x18	; 24
 144:	80 93 c1 00 	sts	0x00C1, r24
	
	//set frame format: 8 data, 1 stop bit
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 c2 00 	sts	0x00C2, r24
 14e:	08 95       	ret

00000150 <_Z14USART_Transmitj>:
}

void USART_Transmit(unsigned int data){
	//wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 150:	e0 ec       	ldi	r30, 0xC0	; 192
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	20 81       	ld	r18, Z
 156:	25 ff       	sbrs	r18, 5
 158:	fd cf       	rjmp	.-6      	; 0x154 <_Z14USART_Transmitj+0x4>
	
	UCSR0B &= -(1<<TXB80);
 15a:	e1 ec       	ldi	r30, 0xC1	; 193
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	20 81       	ld	r18, Z
 160:	20 83       	st	Z, r18
	if (data & 0x0100) UCSR0B |= (1<<TXB80);
 162:	90 ff       	sbrs	r25, 0
 164:	03 c0       	rjmp	.+6      	; 0x16c <_Z14USART_Transmitj+0x1c>
 166:	20 81       	ld	r18, Z
 168:	21 60       	ori	r18, 0x01	; 1
 16a:	20 83       	st	Z, r18
	
	//put data into buffer, send data
	UDR0 = data;
 16c:	80 93 c6 00 	sts	0x00C6, r24
 170:	08 95       	ret

00000172 <main>:
int main(void)
{
	uint8_t i = 0;
	
	
	DDRB = 0X20;		//all inputs except B5 output
 172:	80 e2       	ldi	r24, 0x20	; 32
 174:	84 b9       	out	0x04, r24	; 4
	
	USART_Init(MYUBRR);
 176:	83 e3       	ldi	r24, 0x33	; 51
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z10USART_Initj>
	
	
    while(1)
    {
        _delay_ms(100);
		PORTB ^= (1<<PB5);
 17e:	c0 e2       	ldi	r28, 0x20	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	87 ea       	ldi	r24, 0xA7	; 167
 182:	91 e6       	ldi	r25, 0x61	; 97
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x12>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x18>
 18a:	00 00       	nop
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	8c 27       	eor	r24, r28
 190:	85 b9       	out	0x05, r24	; 5
		USART_Transmit(7);
 192:	87 e0       	ldi	r24, 0x07	; 7
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 a8 00 	call	0x150	; 0x150 <_Z14USART_Transmitj>
		USART_Transmit('\n');
 19a:	8a e0       	ldi	r24, 0x0A	; 10
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 a8 00 	call	0x150	; 0x150 <_Z14USART_Transmitj>
 1a2:	ee cf       	rjmp	.-36     	; 0x180 <main+0xe>

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
