
nunchuk practice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000b8a  00000c1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006d  0080015a  0080015a  00000c78  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00000c78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fe  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001afa  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000200  00000000  00000000  00001b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f1f  00000000  00000000  00001d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ac1  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000fd0  00000000  00000000  00004709  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000428  00000000  00000000  000056dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000057e  00000000  00000000  00005b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000dd5  00000000  00000000  00006082  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000180  00000000  00000000  00006e57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 35       	cpi	r26, 0x5A	; 90
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e5       	ldi	r26, 0x5A	; 90
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 3c       	cpi	r26, 0xC7	; 199
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <main>
  9e:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcdWriteNybble>:

    

//writes nybble to LCD preserving RS's current value
void lcdWriteNybble(unsigned char nybble){
    toLCD = (nybble<<4 & 0xF0) | (toLCD & 0x0F);
  a6:	20 e1       	ldi	r18, 0x10	; 16
  a8:	82 9f       	mul	r24, r18
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
  ae:	60 91 5a 01 	lds	r22, 0x015A
  b2:	6f 70       	andi	r22, 0x0F	; 15
  b4:	68 2b       	or	r22, r24
  b6:	60 93 5a 01 	sts	0x015A, r22
    Write23008(GPIO, toLCD);
  ba:	89 e0       	ldi	r24, 0x09	; 9
  bc:	0e 94 2b 02 	call	0x456	; 0x456 <Write23008>
  c0:	08 95       	ret

000000c2 <lcdWrite>:
}

// write a byte to the LCD in 4 bit mode
void lcdWrite(unsigned char address, unsigned char c)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	d8 2f       	mov	r29, r24
  c8:	c6 2f       	mov	r28, r22
    clockLow();
  ca:	60 91 5a 01 	lds	r22, 0x015A
  ce:	6d 7f       	andi	r22, 0xFD	; 253
  d0:	60 93 5a 01 	sts	0x015A, r22
  d4:	89 e0       	ldi	r24, 0x09	; 9
  d6:	0e 94 2b 02 	call	0x456	; 0x456 <Write23008>
    if (address == CMD_REG){
  da:	d1 11       	cpse	r29, r1
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <lcdWrite+0x2e>
        commandRegister();
  de:	60 91 5a 01 	lds	r22, 0x015A
  e2:	6e 7f       	andi	r22, 0xFE	; 254
  e4:	60 93 5a 01 	sts	0x015A, r22
  e8:	89 e0       	ldi	r24, 0x09	; 9
  ea:	0e 94 2b 02 	call	0x456	; 0x456 <Write23008>
  ee:	05 c0       	rjmp	.+10     	; 0xfa <lcdWrite+0x38>
    }
    else dataRegister();
  f0:	80 91 5a 01 	lds	r24, 0x015A
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	80 93 5a 01 	sts	0x015A, r24
  fa:	60 91 5a 01 	lds	r22, 0x015A
  fe:	89 e0       	ldi	r24, 0x09	; 9
 100:	0e 94 2b 02 	call	0x456	; 0x456 <Write23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <lcdWrite+0x44>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcdWrite+0x4a>

    _delay_us(1);      //1 cycle = 62.5ns (nop)

    clockHigh();
 10c:	60 91 5a 01 	lds	r22, 0x015A
 110:	62 60       	ori	r22, 0x02	; 2
 112:	60 93 5a 01 	sts	0x015A, r22
 116:	89 e0       	ldi	r24, 0x09	; 9
 118:	0e 94 2b 02 	call	0x456	; 0x456 <Write23008>

    // Write the 4 bits non-destructively to the port
    lcdWriteNybble((c >> 4) & 0x0F);
 11c:	8c 2f       	mov	r24, r28
 11e:	82 95       	swap	r24
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdWriteNybble>
 126:	10 92 5d 01 	sts	0x015D, r1
 12a:	10 92 5c 01 	sts	0x015C, r1
    wait(5);    //~250ns

    clockLow();
 12e:	60 91 5a 01 	lds	r22, 0x015A
 132:	6d 7f       	andi	r22, 0xFD	; 253
 134:	60 93 5a 01 	sts	0x015A, r22
 138:	89 e0       	ldi	r24, 0x09	; 9
 13a:	0e 94 2b 02 	call	0x456	; 0x456 <Write23008>
 13e:	10 92 5d 01 	sts	0x015D, r1
 142:	10 92 5c 01 	sts	0x015C, r1

    wait(4);    //~200ns
    clockHigh();
 146:	60 91 5a 01 	lds	r22, 0x015A
 14a:	62 60       	ori	r22, 0x02	; 2
 14c:	60 93 5a 01 	sts	0x015A, r22
 150:	89 e0       	ldi	r24, 0x09	; 9
 152:	0e 94 2b 02 	call	0x456	; 0x456 <Write23008>
    // Write the 4 bits non-destructively to the port
    lcdWriteNybble(c & 0x0F);
 156:	8c 2f       	mov	r24, r28
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdWriteNybble>
 15e:	10 92 5d 01 	sts	0x015D, r1
 162:	10 92 5c 01 	sts	0x015C, r1

    wait(5);    //~250ns
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <lcdClearDisplay>:
}

void lcdClearDisplay(void)
{
    int counter;
        lcdWrite(CMD_REG, LCD_CLR);
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 61 00 	call	0xc2	; 0xc2 <lcdWrite>

        // Reset our internal cursor position
        lcdX = 0;
 174:	10 92 5b 01 	sts	0x015B, r1
        lcdY = 0;
 178:	10 92 5e 01 	sts	0x015E, r1
 17c:	28 ec       	ldi	r18, 0xC8	; 200
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	44 e6       	ldi	r20, 0x64	; 100
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	ca 01       	movw	r24, r20
 186:	01 97       	sbiw	r24, 0x01	; 1

        // Delay
        for (counter = 0; counter < 200; counter++) wait(100);
 188:	f1 f7       	brne	.-4      	; 0x186 <lcdClearDisplay+0x1a>
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	31 09       	sbc	r19, r1
 18e:	d1 f7       	brne	.-12     	; 0x184 <lcdClearDisplay+0x18>
 190:	10 92 5d 01 	sts	0x015D, r1
 194:	10 92 5c 01 	sts	0x015C, r1
 198:	08 95       	ret

0000019a <lcdInit>:
// Initialize the LCD
void lcdInit(void){
        
	//int counter;
		
	Write23008(IODIR, 0x00); //Set all ports to output
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 2b 02 	call	0x456	; 0x456 <Write23008>
	Write23008(GPIO, 0x00); //Turn off all ports
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	89 e0       	ldi	r24, 0x09	; 9
 1a6:	0e 94 2b 02 	call	0x456	; 0x456 <Write23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	8f e2       	ldi	r24, 0x2F	; 47
 1ac:	95 e7       	ldi	r25, 0x75	; 117
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcdInit+0x14>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcdInit+0x1a>
 1b4:	00 00       	nop

    // Power up delay
    _delay_ms(15);

    clockLow();
 1b6:	60 91 5a 01 	lds	r22, 0x015A
 1ba:	6d 7f       	andi	r22, 0xFD	; 253
 1bc:	60 93 5a 01 	sts	0x015A, r22
 1c0:	89 e0       	ldi	r24, 0x09	; 9
 1c2:	0e 94 2b 02 	call	0x456	; 0x456 <Write23008>
    commandRegister();
 1c6:	60 91 5a 01 	lds	r22, 0x015A
 1ca:	6e 7f       	andi	r22, 0xFE	; 254
 1cc:	60 93 5a 01 	sts	0x015A, r22
 1d0:	89 e0       	ldi	r24, 0x09	; 9
 1d2:	0e 94 2b 02 	call	0x456	; 0x456 <Write23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	92 e0       	ldi	r25, 0x02	; 2
 1d8:	9a 95       	dec	r25
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcdInit+0x3e>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcdInit+0x44>
    //LCD_RS = CMD_REG; // Set RS to command register
    _delay_us(1);	//Nop();
    clockHigh();
 1de:	60 91 5a 01 	lds	r22, 0x015A
 1e2:	62 60       	ori	r22, 0x02	; 2
 1e4:	60 93 5a 01 	sts	0x015A, r22
 1e8:	89 e0       	ldi	r24, 0x09	; 9
 1ea:	0e 94 2b 02 	call	0x456	; 0x456 <Write23008>
    //Set up the 4-bit interface.
    //The LCD is defaulted into 8-bit mode.
    //lcdWriteNybble() is set up for sending the less significant nybble of
    //the byte (bits3-0) in 4-bit mode (DB7-4).  Shifting it 4 bits to the
    //right ensures that the more significant nybble will be sent to DB7-4.
    lcdWriteNybble(LCD_4BIT>>4);
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdWriteNybble>
 1f4:	10 92 5d 01 	sts	0x015D, r1
 1f8:	10 92 5c 01 	sts	0x015C, r1
    wait(5);

    clockLow();
 1fc:	60 91 5a 01 	lds	r22, 0x015A
 200:	6d 7f       	andi	r22, 0xFD	; 253
 202:	60 93 5a 01 	sts	0x015A, r22
 206:	89 e0       	ldi	r24, 0x09	; 9
 208:	0e 94 2b 02 	call	0x456	; 0x456 <Write23008>

    //set it to 4 bit mode, 2 lines, 5x8 pixels
    lcdWrite(CMD_REG, LCD_4BIT | LCD_2LINES |LCD_5X8);
 20c:	68 e2       	ldi	r22, 0x28	; 40
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 61 00 	call	0xc2	; 0xc2 <lcdWrite>

    //display on, cursor off, blinking off
    lcdWrite(CMD_REG, LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
 214:	6c e0       	ldi	r22, 0x0C	; 12
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 61 00 	call	0xc2	; 0xc2 <lcdWrite>

    //Increments ddram address, shift cursor
    lcdWrite(CMD_REG, LCD_INCREMENT | LCD_CURSOR_SHIFT);
 21c:	66 e0       	ldi	r22, 0x06	; 6
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 61 00 	call	0xc2	; 0xc2 <lcdWrite>

    // Reset our internal cursor position
    lcdX = 0;
 224:	10 92 5b 01 	sts	0x015B, r1
    lcdY = 0;
 228:	10 92 5e 01 	sts	0x015E, r1
 22c:	08 95       	ret

0000022e <lcdGoto>:
                else lcdWrite(CMD_REG, LCD_DISPLAY_OFF);
}

// Move the cursor to the specified X,Y
void lcdGoto(int x, int y)
{
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	8c 01       	movw	r16, r24
 238:	eb 01       	movw	r28, r22
        int offset;

        // Select the correct line of the display
        switch (y)
 23a:	61 30       	cpi	r22, 0x01	; 1
 23c:	71 05       	cpc	r23, r1
 23e:	59 f0       	breq	.+22     	; 0x256 <lcdGoto+0x28>
 240:	1c f4       	brge	.+6      	; 0x248 <lcdGoto+0x1a>
 242:	20 97       	sbiw	r28, 0x00	; 0
 244:	89 f0       	breq	.+34     	; 0x268 <lcdGoto+0x3a>
 246:	12 c0       	rjmp	.+36     	; 0x26c <lcdGoto+0x3e>
 248:	62 30       	cpi	r22, 0x02	; 2
 24a:	71 05       	cpc	r23, r1
 24c:	39 f0       	breq	.+14     	; 0x25c <lcdGoto+0x2e>
 24e:	63 30       	cpi	r22, 0x03	; 3
 250:	71 05       	cpc	r23, r1
 252:	61 f4       	brne	.+24     	; 0x26c <lcdGoto+0x3e>
 254:	06 c0       	rjmp	.+12     	; 0x262 <lcdGoto+0x34>
        {
                case 0: offset = 0x00;
                                break;
                case 1: offset = 0x40;
 256:	20 e4       	ldi	r18, 0x40	; 64
 258:	30 e0       	ldi	r19, 0x00	; 0
                                break;
 25a:	08 c0       	rjmp	.+16     	; 0x26c <lcdGoto+0x3e>
                case 2: offset = 0x14;
 25c:	24 e1       	ldi	r18, 0x14	; 20
 25e:	30 e0       	ldi	r19, 0x00	; 0
                                break;
 260:	05 c0       	rjmp	.+10     	; 0x26c <lcdGoto+0x3e>
                case 3: offset = 0x54;
 262:	24 e5       	ldi	r18, 0x54	; 84
 264:	30 e0       	ldi	r19, 0x00	; 0
                                break;
 266:	02 c0       	rjmp	.+4      	; 0x26c <lcdGoto+0x3e>
        int offset;

        // Select the correct line of the display
        switch (y)
        {
                case 0: offset = 0x00;
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	30 e0       	ldi	r19, 0x00	; 0
                case 3: offset = 0x54;
                                break;
        }

        // Select the correct character of the line
        offset += x;
 26c:	b9 01       	movw	r22, r18
 26e:	60 0f       	add	r22, r16
 270:	71 1f       	adc	r23, r17

        // Send the command to the LCD
        lcdWrite(CMD_REG, LCD_SET_DDRAM | offset);
 272:	60 68       	ori	r22, 0x80	; 128
 274:	7f 6f       	ori	r23, 0xFF	; 255
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 61 00 	call	0xc2	; 0xc2 <lcdWrite>

        // Reset our internal cursor position
        lcdX = x;
 27c:	00 93 5b 01 	sts	0x015B, r16
        lcdY = y;
 280:	c0 93 5e 01 	sts	0x015E, r28
}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	08 95       	ret

0000028e <lcdPuts>:

// Output a string of characters to the display
void lcdPuts(const char *string)
{
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	e8 2e       	mov	r14, r24
 29c:	f9 2e       	mov	r15, r25
 29e:	08 2f       	mov	r16, r24
 2a0:	19 2f       	mov	r17, r25
        // Since the 4 line display is in the order line 1, line 3, line 2, line 4
        // we need to read the current cursor position and control how the text is
        // output, adjusting the cursor position as we go
        int loop;

        for (loop = 0; loop < strlen(string); loop++)
 2a2:	c0 e0       	ldi	r28, 0x00	; 0
 2a4:	d0 e0       	ldi	r29, 0x00	; 0
 2a6:	22 c0       	rjmp	.+68     	; 0x2ec <lcdPuts+0x5e>
        {
                // Write the character to the LCD
                lcdWrite(DATA_REG, string[loop]);
 2a8:	f8 01       	movw	r30, r16
 2aa:	61 91       	ld	r22, Z+
 2ac:	8f 01       	movw	r16, r30
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 61 00 	call	0xc2	; 0xc2 <lcdWrite>
                lcdX++;
 2b4:	20 91 5b 01 	lds	r18, 0x015B
 2b8:	2f 5f       	subi	r18, 0xFF	; 255

                // Have we reached the end of the line?
                if (lcdX == 40)
 2ba:	28 32       	cpi	r18, 0x28	; 40
 2bc:	19 f0       	breq	.+6      	; 0x2c4 <lcdPuts+0x36>

        for (loop = 0; loop < strlen(string); loop++)
        {
                // Write the character to the LCD
                lcdWrite(DATA_REG, string[loop]);
                lcdX++;
 2be:	20 93 5b 01 	sts	0x015B, r18
 2c2:	13 c0       	rjmp	.+38     	; 0x2ea <lcdPuts+0x5c>

                // Have we reached the end of the line?
                if (lcdX == 40)
                {
                        // Move to the start of the next line
                        lcdX = 0;
 2c4:	10 92 5b 01 	sts	0x015B, r1
                        lcdY++;
 2c8:	80 91 5e 01 	lds	r24, 0x015E
 2cc:	8f 5f       	subi	r24, 0xFF	; 255

                        // If we are off the bottom of the screen
                        // go back to the top line
                        if (lcdY == 2) lcdY = 0;
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	19 f0       	breq	.+6      	; 0x2d8 <lcdPuts+0x4a>
                // Have we reached the end of the line?
                if (lcdX == 40)
                {
                        // Move to the start of the next line
                        lcdX = 0;
                        lcdY++;
 2d2:	80 93 5e 01 	sts	0x015E, r24
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <lcdPuts+0x4e>

                        // If we are off the bottom of the screen
                        // go back to the top line
                        if (lcdY == 2) lcdY = 0;
 2d8:	10 92 5e 01 	sts	0x015E, r1

                        // Adjust the cursor position on the LCD
                        lcdGoto(lcdX, lcdY);
 2dc:	60 91 5e 01 	lds	r22, 0x015E
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 17 01 	call	0x22e	; 0x22e <lcdGoto>
        // Since the 4 line display is in the order line 1, line 3, line 2, line 4
        // we need to read the current cursor position and control how the text is
        // output, adjusting the cursor position as we go
        int loop;

        for (loop = 0; loop < strlen(string); loop++)
 2ea:	21 96       	adiw	r28, 0x01	; 1
 2ec:	ee 2d       	mov	r30, r14
 2ee:	ff 2d       	mov	r31, r15
 2f0:	df 01       	movw	r26, r30
 2f2:	0d 90       	ld	r0, X+
 2f4:	00 20       	and	r0, r0
 2f6:	e9 f7       	brne	.-6      	; 0x2f2 <lcdPuts+0x64>
 2f8:	11 97       	sbiw	r26, 0x01	; 1
 2fa:	ae 1b       	sub	r26, r30
 2fc:	bf 0b       	sbc	r27, r31
 2fe:	ca 17       	cp	r28, r26
 300:	db 07       	cpc	r29, r27
 302:	90 f2       	brcs	.-92     	; 0x2a8 <lcdPuts+0x1a>

                        // Adjust the cursor position on the LCD
                        lcdGoto(lcdX, lcdY);
                }
        }
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	ff 90       	pop	r15
 30e:	ef 90       	pop	r14
 310:	08 95       	ret

00000312 <i2c_init>:
*************************************************************************/ 
void i2c_init(void) 
{ 
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */ 
  
  TWSR = 0;                         /* no prescaler */ 
 312:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */ 
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	80 93 b8 00 	sts	0x00B8, r24
 31c:	08 95       	ret

0000031e <i2c_start>:
unsigned char i2c_start(unsigned char address) 
{ 
    uint8_t   twst; 

   // send START condition 
   TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); 
 31e:	94 ea       	ldi	r25, 0xA4	; 164
 320:	90 93 bc 00 	sts	0x00BC, r25

   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 
 324:	ec eb       	ldi	r30, 0xBC	; 188
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	90 81       	ld	r25, Z
 32a:	99 23       	and	r25, r25
 32c:	ec f7       	brge	.-6      	; 0x328 <i2c_start+0xa>

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
 32e:	90 91 b9 00 	lds	r25, 0x00B9
 332:	98 7f       	andi	r25, 0xF8	; 248
   if ( (twst != TW_START) && (twst != TW_REP_START)) return 1; 
 334:	98 30       	cpi	r25, 0x08	; 8
 336:	11 f0       	breq	.+4      	; 0x33c <i2c_start+0x1e>
 338:	90 31       	cpi	r25, 0x10	; 16
 33a:	a1 f4       	brne	.+40     	; 0x364 <i2c_start+0x46>

   // send device address 
   TWDR = address; 
 33c:	80 93 bb 00 	sts	0x00BB, r24
   TWCR = (1<<TWINT) | (1<<TWEN); 
 340:	84 e8       	ldi	r24, 0x84	; 132
 342:	80 93 bc 00 	sts	0x00BC, r24

   // wail until transmission completed and ACK/NACK has been received 
   while(!(TWCR & (1<<TWINT))); 
 346:	ec eb       	ldi	r30, 0xBC	; 188
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	88 23       	and	r24, r24
 34e:	ec f7       	brge	.-6      	; 0x34a <i2c_start+0x2c>

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
 350:	90 91 b9 00 	lds	r25, 0x00B9
 354:	98 7f       	andi	r25, 0xF8	; 248
   if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1; 
 356:	98 31       	cpi	r25, 0x18	; 24
 358:	39 f0       	breq	.+14     	; 0x368 <i2c_start+0x4a>
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 34       	cpi	r25, 0x40	; 64
 35e:	29 f4       	brne	.+10     	; 0x36a <i2c_start+0x4c>
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret
   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
   if ( (twst != TW_START) && (twst != TW_REP_START)) return 1; 
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	08 95       	ret

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
   if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1; 

   return 0; 
 368:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */ 
 36a:	08 95       	ret

0000036c <i2c_stop>:
 Terminates the data transfer and releases the I2C bus 
*************************************************************************/ 
void i2c_stop(void) 
{ 
    /* send stop condition */ 
   TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); 
 36c:	84 e9       	ldi	r24, 0x94	; 148
 36e:	80 93 bc 00 	sts	0x00BC, r24
    
   // wait until stop condition is executed and bus released 
   while(TWCR & (1<<TWSTO)); 
 372:	ec eb       	ldi	r30, 0xBC	; 188
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	84 fd       	sbrc	r24, 4
 37a:	fd cf       	rjmp	.-6      	; 0x376 <i2c_stop+0xa>

}/* i2c_stop */ 
 37c:	08 95       	ret

0000037e <i2c_write>:
unsigned char i2c_write( unsigned char data ) 
{    
    uint8_t   twst; 
    
   // send data to the previously addressed device 
   TWDR = data; 
 37e:	80 93 bb 00 	sts	0x00BB, r24
   TWCR = (1<<TWINT) | (1<<TWEN); 
 382:	84 e8       	ldi	r24, 0x84	; 132
 384:	80 93 bc 00 	sts	0x00BC, r24

   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 
 388:	ec eb       	ldi	r30, 0xBC	; 188
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	88 23       	and	r24, r24
 390:	ec f7       	brge	.-6      	; 0x38c <i2c_write+0xe>

   // check value of TWI Status Register. Mask prescaler bits 
   twst = TW_STATUS & 0xF8; 
 392:	90 91 b9 00 	lds	r25, 0x00B9
 396:	98 7f       	andi	r25, 0xF8	; 248
   if( twst != TW_MT_DATA_ACK) return 1; 
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	98 32       	cpi	r25, 0x28	; 40
 39c:	09 f4       	brne	.+2      	; 0x3a0 <i2c_write+0x22>
 39e:	80 e0       	ldi	r24, 0x00	; 0
   return 0; 

}/* i2c_write */ 
 3a0:	08 95       	ret

000003a2 <i2c_readAck>:
  
 Return:  byte read from I2C device 
*************************************************************************/ 
unsigned char i2c_readAck(void) 
{ 
   TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 3a2:	84 ec       	ldi	r24, 0xC4	; 196
 3a4:	80 93 bc 00 	sts	0x00BC, r24
   while(!(TWCR & (1<<TWINT)));    
 3a8:	ec eb       	ldi	r30, 0xBC	; 188
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	88 23       	and	r24, r24
 3b0:	ec f7       	brge	.-6      	; 0x3ac <i2c_readAck+0xa>

    return TWDR; 
 3b2:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */ 
 3b6:	08 95       	ret

000003b8 <i2c_readNak>:
  
 Return:  byte read from I2C device 
*************************************************************************/ 
unsigned char i2c_readNak(void) 
{ 
   TWCR = (1<<TWINT) | (1<<TWEN); 
 3b8:	84 e8       	ldi	r24, 0x84	; 132
 3ba:	80 93 bc 00 	sts	0x00BC, r24
   while(!(TWCR & (1<<TWINT))); 
 3be:	ec eb       	ldi	r30, 0xBC	; 188
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	88 23       	and	r24, r24
 3c6:	ec f7       	brge	.-6      	; 0x3c2 <i2c_readNak+0xa>
    
    return TWDR; 
 3c8:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */ 
 3cc:	08 95       	ret

000003ce <InitNunchuk>:

#define READ 0x01
#define WRITE 0x00

void InitNunchuk(void){
	i2c_init();
 3ce:	0e 94 89 01 	call	0x312	; 0x312 <i2c_init>
    i2c_start(NUNCHUK_ADDR);       
 3d2:	84 ea       	ldi	r24, 0xA4	; 164
 3d4:	0e 94 8f 01 	call	0x31e	; 0x31e <i2c_start>
    i2c_write(0xF0);
 3d8:	80 ef       	ldi	r24, 0xF0	; 240
 3da:	0e 94 bf 01 	call	0x37e	; 0x37e <i2c_write>
    i2c_write(0x55);
 3de:	85 e5       	ldi	r24, 0x55	; 85
 3e0:	0e 94 bf 01 	call	0x37e	; 0x37e <i2c_write>
    i2c_stop();
 3e4:	0e 94 b6 01 	call	0x36c	; 0x36c <i2c_stop>
    i2c_start(NUNCHUK_ADDR);
 3e8:	84 ea       	ldi	r24, 0xA4	; 164
 3ea:	0e 94 8f 01 	call	0x31e	; 0x31e <i2c_start>
    i2c_write(0xFB);
 3ee:	8b ef       	ldi	r24, 0xFB	; 251
 3f0:	0e 94 bf 01 	call	0x37e	; 0x37e <i2c_write>
    i2c_write(0x00);
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 bf 01 	call	0x37e	; 0x37e <i2c_write>
    i2c_stop();
 3fa:	0e 94 b6 01 	call	0x36c	; 0x36c <i2c_stop>
 3fe:	08 95       	ret

00000400 <ReadNunchuk>:
}

// Nunchuk Read: Read the six bytes of data from the nunchuk. The read must be
// preceded by sending a zero to the nunchuk.
void ReadNunchuk(unsigned char* array) {
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	ec 01       	movw	r28, r24
    
    i2c_start(NUNCHUK_ADDR);
 406:	84 ea       	ldi	r24, 0xA4	; 164
 408:	0e 94 8f 01 	call	0x31e	; 0x31e <i2c_start>
    i2c_write(0x00);
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 bf 01 	call	0x37e	; 0x37e <i2c_write>
    i2c_stop();                  
 412:	0e 94 b6 01 	call	0x36c	; 0x36c <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 416:	8f ec       	ldi	r24, 0xCF	; 207
 418:	97 e0       	ldi	r25, 0x07	; 7
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <ReadNunchuk+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <ReadNunchuk+0x20>
 420:	00 00       	nop
    _delay_ms(1);
	    
    i2c_start(NUNCHUK_ADDR + 0x01);
 422:	85 ea       	ldi	r24, 0xA5	; 165
 424:	0e 94 8f 01 	call	0x31e	; 0x31e <i2c_start>
    array[0] = i2c_readAck();
 428:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <i2c_readAck>
 42c:	88 83       	st	Y, r24
    array[1] = i2c_readAck();
 42e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <i2c_readAck>
 432:	89 83       	std	Y+1, r24	; 0x01
    array[2] = i2c_readAck();
 434:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <i2c_readAck>
 438:	8a 83       	std	Y+2, r24	; 0x02
    array[3] = i2c_readAck();
 43a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <i2c_readAck>
 43e:	8b 83       	std	Y+3, r24	; 0x03
    array[4] = i2c_readAck();
 440:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <i2c_readAck>
 444:	8c 83       	std	Y+4, r24	; 0x04
    array[5] = i2c_readNak();
 446:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <i2c_readNak>
 44a:	8d 83       	std	Y+5, r24	; 0x05
    i2c_stop();                  
 44c:	0e 94 b6 01 	call	0x36c	; 0x36c <i2c_stop>
}//ReadNunchuk
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <Write23008>:
//Created: 6 Oct 2013
//Mike Litster

#include "portexpander.h"

void Write23008(unsigned char reg, unsigned char data){
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	d8 2f       	mov	r29, r24
 45c:	c6 2f       	mov	r28, r22
	i2c_start((CTRL_BYTE_23008<<1) | I2C_WRITE); // Slave address.  Shift 7-bit address one bit, and clear the read bit (bit0).)
 45e:	80 e4       	ldi	r24, 0x40	; 64
 460:	0e 94 8f 01 	call	0x31e	; 0x31e <i2c_start>
	i2c_write(reg);
 464:	8d 2f       	mov	r24, r29
 466:	0e 94 bf 01 	call	0x37e	; 0x37e <i2c_write>
	i2c_write(data);
 46a:	8c 2f       	mov	r24, r28
 46c:	0e 94 bf 01 	call	0x37e	; 0x37e <i2c_write>
	i2c_stop();
 470:	0e 94 b6 01 	call	0x36c	; 0x36c <i2c_stop>
}
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <displayLCD>:
unsigned char  nunchuk[20];                  // Nunchuk data array
unsigned int  Z, C;							// Buttons on nunchuk
char line1[40], line2[40];         // LCD line arrays

void displayLCD(void){
	lcdGoto(0,0);
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 17 01 	call	0x22e	; 0x22e <lcdGoto>
	lcdPuts(line1);		// Display line 1
 486:	81 e6       	ldi	r24, 0x61	; 97
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 47 01 	call	0x28e	; 0x28e <lcdPuts>
	lcdGoto(0,1);		// Skip to next line
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 17 01 	call	0x22e	; 0x22e <lcdGoto>
	lcdPuts(line2);
 49a:	8b e8       	ldi	r24, 0x8B	; 139
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	0e 94 47 01 	call	0x28e	; 0x28e <lcdPuts>
 4a2:	08 95       	ret

000004a4 <init>:
}

void init(void){
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
	InitNunchuk();
 4a8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <InitNunchuk>
	lcdInit();
 4ac:	0e 94 cd 00 	call	0x19a	; 0x19a <lcdInit>
	lcdClearDisplay();
 4b0:	0e 94 b6 00 	call	0x16c	; 0x16c <lcdClearDisplay>
	sprintf(line1, "myQ Atmega168 Dev Board rev0");
 4b4:	8d e1       	ldi	r24, 0x1D	; 29
 4b6:	e0 e0       	ldi	r30, 0x00	; 0
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	a1 e6       	ldi	r26, 0x61	; 97
 4bc:	b1 e0       	ldi	r27, 0x01	; 1
 4be:	01 90       	ld	r0, Z+
 4c0:	0d 92       	st	X+, r0
 4c2:	8a 95       	dec	r24
 4c4:	e1 f7       	brne	.-8      	; 0x4be <init+0x1a>
	sprintf(line2, "Nunchuk display basic");
 4c6:	86 e1       	ldi	r24, 0x16	; 22
 4c8:	ed e1       	ldi	r30, 0x1D	; 29
 4ca:	f1 e0       	ldi	r31, 0x01	; 1
 4cc:	ab e8       	ldi	r26, 0x8B	; 139
 4ce:	b1 e0       	ldi	r27, 0x01	; 1
 4d0:	01 90       	ld	r0, Z+
 4d2:	0d 92       	st	X+, r0
 4d4:	8a 95       	dec	r24
 4d6:	e1 f7       	brne	.-8      	; 0x4d0 <init+0x2c>
	displayLCD();
 4d8:	0e 94 3d 02 	call	0x47a	; 0x47a <displayLCD>
 4dc:	ce e1       	ldi	r28, 0x1E	; 30
 4de:	d0 e0       	ldi	r29, 0x00	; 0
	
	//scroll display to the left 30 times
	for(int i=0;i<30;i++){
		lcdWrite(CMD_REG, LCD_SHIFT | LCD_SHIFT_DISPLAY | LCD_SHIFT_LEFT);
 4e0:	68 e1       	ldi	r22, 0x18	; 24
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	0e 94 61 00 	call	0xc2	; 0xc2 <lcdWrite>
 4e8:	2f ef       	ldi	r18, 0xFF	; 255
 4ea:	80 e7       	ldi	r24, 0x70	; 112
 4ec:	92 e0       	ldi	r25, 0x02	; 2
 4ee:	21 50       	subi	r18, 0x01	; 1
 4f0:	80 40       	sbci	r24, 0x00	; 0
 4f2:	90 40       	sbci	r25, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <init+0x4a>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <init+0x54>
 4f8:	00 00       	nop
 4fa:	21 97       	sbiw	r28, 0x01	; 1
	sprintf(line1, "myQ Atmega168 Dev Board rev0");
	sprintf(line2, "Nunchuk display basic");
	displayLCD();
	
	//scroll display to the left 30 times
	for(int i=0;i<30;i++){
 4fc:	89 f7       	brne	.-30     	; 0x4e0 <init+0x3c>
		lcdWrite(CMD_REG, LCD_SHIFT | LCD_SHIFT_DISPLAY | LCD_SHIFT_LEFT);
		_delay_ms(100);
	}
	lcdClearDisplay();
 4fe:	0e 94 b6 00 	call	0x16c	; 0x16c <lcdClearDisplay>
}
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	08 95       	ret

00000508 <displayNunchuk>:



void displayNunchuk(void){

	ReadNunchuk(nunchuk);                        // Read data from nunchuk
 508:	83 eb       	ldi	r24, 0xB3	; 179
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	0e 94 00 02 	call	0x400	; 0x400 <ReadNunchuk>
	Z = (nunchuk[5] & 0b1) ^ 0b1;              // Extract Z button bit
 510:	80 91 b8 01 	lds	r24, 0x01B8
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	28 2f       	mov	r18, r24
 518:	29 27       	eor	r18, r25
 51a:	21 70       	andi	r18, 0x01	; 1
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	20 93 89 01 	sts	0x0189, r18
 522:	30 93 8a 01 	sts	0x018A, r19
	C = (nunchuk[5]>>1 & 0b1) ^ 0b1;           // Extract C button bit
 526:	86 95       	lsr	r24
 528:	98 27       	eor	r25, r24
 52a:	89 2f       	mov	r24, r25
 52c:	81 70       	andi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	80 93 5f 01 	sts	0x015F, r24
 534:	90 93 60 01 	sts	0x0160, r25
	
	sprintf(line1, "SX%02X Y%02X C%d Z%d",      // Format joystick and
 538:	3f 93       	push	r19
 53a:	2f 93       	push	r18
 53c:	9f 93       	push	r25
 53e:	8f 93       	push	r24
 540:	80 91 b4 01 	lds	r24, 0x01B4
 544:	1f 92       	push	r1
 546:	8f 93       	push	r24
 548:	80 91 b3 01 	lds	r24, 0x01B3
 54c:	1f 92       	push	r1
 54e:	8f 93       	push	r24
 550:	83 e3       	ldi	r24, 0x33	; 51
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	9f 93       	push	r25
 556:	8f 93       	push	r24
 558:	81 e6       	ldi	r24, 0x61	; 97
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	9f 93       	push	r25
 55e:	8f 93       	push	r24
 560:	0e 94 ee 02 	call	0x5dc	; 0x5dc <sprintf>
	nunchuk[0], nunchuk[1], C, Z);			//  button data
	sprintf(line2,"X%02X Y%02X Z%02X",       // Format accelerometer
 564:	80 91 b7 01 	lds	r24, 0x01B7
 568:	1f 92       	push	r1
 56a:	8f 93       	push	r24
 56c:	80 91 b6 01 	lds	r24, 0x01B6
 570:	1f 92       	push	r1
 572:	8f 93       	push	r24
 574:	80 91 b5 01 	lds	r24, 0x01B5
 578:	1f 92       	push	r1
 57a:	8f 93       	push	r24
 57c:	88 e4       	ldi	r24, 0x48	; 72
 57e:	91 e0       	ldi	r25, 0x01	; 1
 580:	9f 93       	push	r25
 582:	8f 93       	push	r24
 584:	8b e8       	ldi	r24, 0x8B	; 139
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	9f 93       	push	r25
 58a:	8f 93       	push	r24
 58c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <sprintf>
	nunchuk[2], nunchuk[3], nunchuk[4]);   //  data
	displayLCD();	
 590:	0e 94 3d 02 	call	0x47a	; 0x47a <displayLCD>
 594:	8d b7       	in	r24, 0x3d	; 61
 596:	9e b7       	in	r25, 0x3e	; 62
 598:	46 96       	adiw	r24, 0x16	; 22
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	9e bf       	out	0x3e, r25	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	8d bf       	out	0x3d, r24	; 61
 5a4:	08 95       	ret

000005a6 <main>:
}

int main(void)
{
	
	init();
 5a6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <init>
	
    while(1)
    {
       ReadNunchuk(nunchuk);                        // Read data from nunchuk
       Z = (nunchuk[5] & 0b1) ^ 0b1;              // Extract Z button bit
 5aa:	c8 eb       	ldi	r28, 0xB8	; 184
 5ac:	d1 e0       	ldi	r29, 0x01	; 1
 5ae:	11 e0       	ldi	r17, 0x01	; 1
	
	init();
	
    while(1)
    {
       ReadNunchuk(nunchuk);                        // Read data from nunchuk
 5b0:	83 eb       	ldi	r24, 0xB3	; 179
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	0e 94 00 02 	call	0x400	; 0x400 <ReadNunchuk>
       Z = (nunchuk[5] & 0b1) ^ 0b1;              // Extract Z button bit
 5b8:	88 81       	ld	r24, Y
 5ba:	98 2f       	mov	r25, r24
 5bc:	91 27       	eor	r25, r17
 5be:	91 70       	andi	r25, 0x01	; 1
 5c0:	90 93 89 01 	sts	0x0189, r25
 5c4:	10 92 8a 01 	sts	0x018A, r1
       C = (nunchuk[5]>>1 & 0b1) ^ 0b1;           // Extract C button bit
 5c8:	86 95       	lsr	r24
 5ca:	81 27       	eor	r24, r17
 5cc:	81 70       	andi	r24, 0x01	; 1
 5ce:	80 93 5f 01 	sts	0x015F, r24
 5d2:	10 92 60 01 	sts	0x0160, r1
	   displayNunchuk();
 5d6:	0e 94 84 02 	call	0x508	; 0x508 <displayNunchuk>
 5da:	ea cf       	rjmp	.-44     	; 0x5b0 <main+0xa>

000005dc <sprintf>:
 5dc:	ae e0       	ldi	r26, 0x0E	; 14
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	e4 ef       	ldi	r30, 0xF4	; 244
 5e2:	f2 e0       	ldi	r31, 0x02	; 2
 5e4:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__prologue_saves__+0x1c>
 5e8:	0d 89       	ldd	r16, Y+21	; 0x15
 5ea:	1e 89       	ldd	r17, Y+22	; 0x16
 5ec:	86 e0       	ldi	r24, 0x06	; 6
 5ee:	8c 83       	std	Y+4, r24	; 0x04
 5f0:	1a 83       	std	Y+2, r17	; 0x02
 5f2:	09 83       	std	Y+1, r16	; 0x01
 5f4:	8f ef       	ldi	r24, 0xFF	; 255
 5f6:	9f e7       	ldi	r25, 0x7F	; 127
 5f8:	9e 83       	std	Y+6, r25	; 0x06
 5fa:	8d 83       	std	Y+5, r24	; 0x05
 5fc:	ce 01       	movw	r24, r28
 5fe:	49 96       	adiw	r24, 0x19	; 25
 600:	ac 01       	movw	r20, r24
 602:	6f 89       	ldd	r22, Y+23	; 0x17
 604:	78 8d       	ldd	r23, Y+24	; 0x18
 606:	ce 01       	movw	r24, r28
 608:	01 96       	adiw	r24, 0x01	; 1
 60a:	0e 94 10 03 	call	0x620	; 0x620 <vfprintf>
 60e:	ef 81       	ldd	r30, Y+7	; 0x07
 610:	f8 85       	ldd	r31, Y+8	; 0x08
 612:	e0 0f       	add	r30, r16
 614:	f1 1f       	adc	r31, r17
 616:	10 82       	st	Z, r1
 618:	2e 96       	adiw	r28, 0x0e	; 14
 61a:	e4 e0       	ldi	r30, 0x04	; 4
 61c:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__epilogue_restores__+0x1c>

00000620 <vfprintf>:
 620:	ac e0       	ldi	r26, 0x0C	; 12
 622:	b0 e0       	ldi	r27, 0x00	; 0
 624:	e6 e1       	ldi	r30, 0x16	; 22
 626:	f3 e0       	ldi	r31, 0x03	; 3
 628:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__prologue_saves__>
 62c:	7c 01       	movw	r14, r24
 62e:	6b 01       	movw	r12, r22
 630:	8a 01       	movw	r16, r20
 632:	fc 01       	movw	r30, r24
 634:	17 82       	std	Z+7, r1	; 0x07
 636:	16 82       	std	Z+6, r1	; 0x06
 638:	83 81       	ldd	r24, Z+3	; 0x03
 63a:	81 ff       	sbrs	r24, 1
 63c:	c6 c1       	rjmp	.+908    	; 0x9ca <vfprintf+0x3aa>
 63e:	88 24       	eor	r8, r8
 640:	83 94       	inc	r8
 642:	91 2c       	mov	r9, r1
 644:	8c 0e       	add	r8, r28
 646:	9d 1e       	adc	r9, r29
 648:	f7 01       	movw	r30, r14
 64a:	93 81       	ldd	r25, Z+3	; 0x03
 64c:	f6 01       	movw	r30, r12
 64e:	93 fd       	sbrc	r25, 3
 650:	85 91       	lpm	r24, Z+
 652:	93 ff       	sbrs	r25, 3
 654:	81 91       	ld	r24, Z+
 656:	6f 01       	movw	r12, r30
 658:	88 23       	and	r24, r24
 65a:	09 f4       	brne	.+2      	; 0x65e <vfprintf+0x3e>
 65c:	b2 c1       	rjmp	.+868    	; 0x9c2 <vfprintf+0x3a2>
 65e:	85 32       	cpi	r24, 0x25	; 37
 660:	39 f4       	brne	.+14     	; 0x670 <vfprintf+0x50>
 662:	93 fd       	sbrc	r25, 3
 664:	85 91       	lpm	r24, Z+
 666:	93 ff       	sbrs	r25, 3
 668:	81 91       	ld	r24, Z+
 66a:	6f 01       	movw	r12, r30
 66c:	85 32       	cpi	r24, 0x25	; 37
 66e:	29 f4       	brne	.+10     	; 0x67a <vfprintf+0x5a>
 670:	b7 01       	movw	r22, r14
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 02 05 	call	0xa04	; 0xa04 <fputc>
 678:	e7 cf       	rjmp	.-50     	; 0x648 <vfprintf+0x28>
 67a:	51 2c       	mov	r5, r1
 67c:	31 2c       	mov	r3, r1
 67e:	20 e0       	ldi	r18, 0x00	; 0
 680:	20 32       	cpi	r18, 0x20	; 32
 682:	a8 f4       	brcc	.+42     	; 0x6ae <vfprintf+0x8e>
 684:	8b 32       	cpi	r24, 0x2B	; 43
 686:	61 f0       	breq	.+24     	; 0x6a0 <vfprintf+0x80>
 688:	28 f4       	brcc	.+10     	; 0x694 <vfprintf+0x74>
 68a:	80 32       	cpi	r24, 0x20	; 32
 68c:	51 f0       	breq	.+20     	; 0x6a2 <vfprintf+0x82>
 68e:	83 32       	cpi	r24, 0x23	; 35
 690:	71 f4       	brne	.+28     	; 0x6ae <vfprintf+0x8e>
 692:	0b c0       	rjmp	.+22     	; 0x6aa <vfprintf+0x8a>
 694:	8d 32       	cpi	r24, 0x2D	; 45
 696:	39 f0       	breq	.+14     	; 0x6a6 <vfprintf+0x86>
 698:	80 33       	cpi	r24, 0x30	; 48
 69a:	49 f4       	brne	.+18     	; 0x6ae <vfprintf+0x8e>
 69c:	21 60       	ori	r18, 0x01	; 1
 69e:	28 c0       	rjmp	.+80     	; 0x6f0 <vfprintf+0xd0>
 6a0:	22 60       	ori	r18, 0x02	; 2
 6a2:	24 60       	ori	r18, 0x04	; 4
 6a4:	25 c0       	rjmp	.+74     	; 0x6f0 <vfprintf+0xd0>
 6a6:	28 60       	ori	r18, 0x08	; 8
 6a8:	23 c0       	rjmp	.+70     	; 0x6f0 <vfprintf+0xd0>
 6aa:	20 61       	ori	r18, 0x10	; 16
 6ac:	21 c0       	rjmp	.+66     	; 0x6f0 <vfprintf+0xd0>
 6ae:	27 fd       	sbrc	r18, 7
 6b0:	27 c0       	rjmp	.+78     	; 0x700 <vfprintf+0xe0>
 6b2:	38 2f       	mov	r19, r24
 6b4:	30 53       	subi	r19, 0x30	; 48
 6b6:	3a 30       	cpi	r19, 0x0A	; 10
 6b8:	78 f4       	brcc	.+30     	; 0x6d8 <vfprintf+0xb8>
 6ba:	26 ff       	sbrs	r18, 6
 6bc:	06 c0       	rjmp	.+12     	; 0x6ca <vfprintf+0xaa>
 6be:	fa e0       	ldi	r31, 0x0A	; 10
 6c0:	5f 9e       	mul	r5, r31
 6c2:	30 0d       	add	r19, r0
 6c4:	11 24       	eor	r1, r1
 6c6:	53 2e       	mov	r5, r19
 6c8:	13 c0       	rjmp	.+38     	; 0x6f0 <vfprintf+0xd0>
 6ca:	8a e0       	ldi	r24, 0x0A	; 10
 6cc:	38 9e       	mul	r3, r24
 6ce:	30 0d       	add	r19, r0
 6d0:	11 24       	eor	r1, r1
 6d2:	33 2e       	mov	r3, r19
 6d4:	20 62       	ori	r18, 0x20	; 32
 6d6:	0c c0       	rjmp	.+24     	; 0x6f0 <vfprintf+0xd0>
 6d8:	8e 32       	cpi	r24, 0x2E	; 46
 6da:	21 f4       	brne	.+8      	; 0x6e4 <vfprintf+0xc4>
 6dc:	26 fd       	sbrc	r18, 6
 6de:	71 c1       	rjmp	.+738    	; 0x9c2 <vfprintf+0x3a2>
 6e0:	20 64       	ori	r18, 0x40	; 64
 6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <vfprintf+0xd0>
 6e4:	8c 36       	cpi	r24, 0x6C	; 108
 6e6:	11 f4       	brne	.+4      	; 0x6ec <vfprintf+0xcc>
 6e8:	20 68       	ori	r18, 0x80	; 128
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <vfprintf+0xd0>
 6ec:	88 36       	cpi	r24, 0x68	; 104
 6ee:	41 f4       	brne	.+16     	; 0x700 <vfprintf+0xe0>
 6f0:	f6 01       	movw	r30, r12
 6f2:	93 fd       	sbrc	r25, 3
 6f4:	85 91       	lpm	r24, Z+
 6f6:	93 ff       	sbrs	r25, 3
 6f8:	81 91       	ld	r24, Z+
 6fa:	6f 01       	movw	r12, r30
 6fc:	81 11       	cpse	r24, r1
 6fe:	c0 cf       	rjmp	.-128    	; 0x680 <vfprintf+0x60>
 700:	98 2f       	mov	r25, r24
 702:	95 54       	subi	r25, 0x45	; 69
 704:	93 30       	cpi	r25, 0x03	; 3
 706:	18 f0       	brcs	.+6      	; 0x70e <vfprintf+0xee>
 708:	90 52       	subi	r25, 0x20	; 32
 70a:	93 30       	cpi	r25, 0x03	; 3
 70c:	28 f4       	brcc	.+10     	; 0x718 <vfprintf+0xf8>
 70e:	0c 5f       	subi	r16, 0xFC	; 252
 710:	1f 4f       	sbci	r17, 0xFF	; 255
 712:	ff e3       	ldi	r31, 0x3F	; 63
 714:	f9 83       	std	Y+1, r31	; 0x01
 716:	0d c0       	rjmp	.+26     	; 0x732 <vfprintf+0x112>
 718:	83 36       	cpi	r24, 0x63	; 99
 71a:	31 f0       	breq	.+12     	; 0x728 <vfprintf+0x108>
 71c:	83 37       	cpi	r24, 0x73	; 115
 71e:	71 f0       	breq	.+28     	; 0x73c <vfprintf+0x11c>
 720:	83 35       	cpi	r24, 0x53	; 83
 722:	09 f0       	breq	.+2      	; 0x726 <vfprintf+0x106>
 724:	5e c0       	rjmp	.+188    	; 0x7e2 <vfprintf+0x1c2>
 726:	23 c0       	rjmp	.+70     	; 0x76e <vfprintf+0x14e>
 728:	f8 01       	movw	r30, r16
 72a:	80 81       	ld	r24, Z
 72c:	89 83       	std	Y+1, r24	; 0x01
 72e:	0e 5f       	subi	r16, 0xFE	; 254
 730:	1f 4f       	sbci	r17, 0xFF	; 255
 732:	44 24       	eor	r4, r4
 734:	43 94       	inc	r4
 736:	51 2c       	mov	r5, r1
 738:	54 01       	movw	r10, r8
 73a:	15 c0       	rjmp	.+42     	; 0x766 <vfprintf+0x146>
 73c:	38 01       	movw	r6, r16
 73e:	f2 e0       	ldi	r31, 0x02	; 2
 740:	6f 0e       	add	r6, r31
 742:	71 1c       	adc	r7, r1
 744:	f8 01       	movw	r30, r16
 746:	a0 80       	ld	r10, Z
 748:	b1 80       	ldd	r11, Z+1	; 0x01
 74a:	26 ff       	sbrs	r18, 6
 74c:	03 c0       	rjmp	.+6      	; 0x754 <vfprintf+0x134>
 74e:	65 2d       	mov	r22, r5
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	02 c0       	rjmp	.+4      	; 0x758 <vfprintf+0x138>
 754:	6f ef       	ldi	r22, 0xFF	; 255
 756:	7f ef       	ldi	r23, 0xFF	; 255
 758:	c5 01       	movw	r24, r10
 75a:	2c 87       	std	Y+12, r18	; 0x0c
 75c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <strnlen>
 760:	2c 01       	movw	r4, r24
 762:	83 01       	movw	r16, r6
 764:	2c 85       	ldd	r18, Y+12	; 0x0c
 766:	6f e7       	ldi	r22, 0x7F	; 127
 768:	26 2e       	mov	r2, r22
 76a:	22 22       	and	r2, r18
 76c:	18 c0       	rjmp	.+48     	; 0x79e <vfprintf+0x17e>
 76e:	38 01       	movw	r6, r16
 770:	f2 e0       	ldi	r31, 0x02	; 2
 772:	6f 0e       	add	r6, r31
 774:	71 1c       	adc	r7, r1
 776:	f8 01       	movw	r30, r16
 778:	a0 80       	ld	r10, Z
 77a:	b1 80       	ldd	r11, Z+1	; 0x01
 77c:	26 ff       	sbrs	r18, 6
 77e:	03 c0       	rjmp	.+6      	; 0x786 <vfprintf+0x166>
 780:	65 2d       	mov	r22, r5
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	02 c0       	rjmp	.+4      	; 0x78a <vfprintf+0x16a>
 786:	6f ef       	ldi	r22, 0xFF	; 255
 788:	7f ef       	ldi	r23, 0xFF	; 255
 78a:	c5 01       	movw	r24, r10
 78c:	2c 87       	std	Y+12, r18	; 0x0c
 78e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <strnlen_P>
 792:	2c 01       	movw	r4, r24
 794:	2c 85       	ldd	r18, Y+12	; 0x0c
 796:	50 e8       	ldi	r21, 0x80	; 128
 798:	25 2e       	mov	r2, r21
 79a:	22 2a       	or	r2, r18
 79c:	83 01       	movw	r16, r6
 79e:	23 fc       	sbrc	r2, 3
 7a0:	1c c0       	rjmp	.+56     	; 0x7da <vfprintf+0x1ba>
 7a2:	06 c0       	rjmp	.+12     	; 0x7b0 <vfprintf+0x190>
 7a4:	b7 01       	movw	r22, r14
 7a6:	80 e2       	ldi	r24, 0x20	; 32
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 02 05 	call	0xa04	; 0xa04 <fputc>
 7ae:	3a 94       	dec	r3
 7b0:	83 2d       	mov	r24, r3
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	48 16       	cp	r4, r24
 7b6:	59 06       	cpc	r5, r25
 7b8:	a8 f3       	brcs	.-22     	; 0x7a4 <vfprintf+0x184>
 7ba:	0f c0       	rjmp	.+30     	; 0x7da <vfprintf+0x1ba>
 7bc:	f5 01       	movw	r30, r10
 7be:	27 fc       	sbrc	r2, 7
 7c0:	85 91       	lpm	r24, Z+
 7c2:	27 fe       	sbrs	r2, 7
 7c4:	81 91       	ld	r24, Z+
 7c6:	5f 01       	movw	r10, r30
 7c8:	b7 01       	movw	r22, r14
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 02 05 	call	0xa04	; 0xa04 <fputc>
 7d0:	31 10       	cpse	r3, r1
 7d2:	3a 94       	dec	r3
 7d4:	f1 e0       	ldi	r31, 0x01	; 1
 7d6:	4f 1a       	sub	r4, r31
 7d8:	51 08       	sbc	r5, r1
 7da:	41 14       	cp	r4, r1
 7dc:	51 04       	cpc	r5, r1
 7de:	71 f7       	brne	.-36     	; 0x7bc <vfprintf+0x19c>
 7e0:	ed c0       	rjmp	.+474    	; 0x9bc <vfprintf+0x39c>
 7e2:	84 36       	cpi	r24, 0x64	; 100
 7e4:	11 f0       	breq	.+4      	; 0x7ea <vfprintf+0x1ca>
 7e6:	89 36       	cpi	r24, 0x69	; 105
 7e8:	41 f5       	brne	.+80     	; 0x83a <vfprintf+0x21a>
 7ea:	f8 01       	movw	r30, r16
 7ec:	27 ff       	sbrs	r18, 7
 7ee:	07 c0       	rjmp	.+14     	; 0x7fe <vfprintf+0x1de>
 7f0:	60 81       	ld	r22, Z
 7f2:	71 81       	ldd	r23, Z+1	; 0x01
 7f4:	82 81       	ldd	r24, Z+2	; 0x02
 7f6:	93 81       	ldd	r25, Z+3	; 0x03
 7f8:	0c 5f       	subi	r16, 0xFC	; 252
 7fa:	1f 4f       	sbci	r17, 0xFF	; 255
 7fc:	08 c0       	rjmp	.+16     	; 0x80e <vfprintf+0x1ee>
 7fe:	60 81       	ld	r22, Z
 800:	71 81       	ldd	r23, Z+1	; 0x01
 802:	88 27       	eor	r24, r24
 804:	77 fd       	sbrc	r23, 7
 806:	80 95       	com	r24
 808:	98 2f       	mov	r25, r24
 80a:	0e 5f       	subi	r16, 0xFE	; 254
 80c:	1f 4f       	sbci	r17, 0xFF	; 255
 80e:	4f e6       	ldi	r20, 0x6F	; 111
 810:	b4 2e       	mov	r11, r20
 812:	b2 22       	and	r11, r18
 814:	97 ff       	sbrs	r25, 7
 816:	09 c0       	rjmp	.+18     	; 0x82a <vfprintf+0x20a>
 818:	90 95       	com	r25
 81a:	80 95       	com	r24
 81c:	70 95       	com	r23
 81e:	61 95       	neg	r22
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	8f 4f       	sbci	r24, 0xFF	; 255
 824:	9f 4f       	sbci	r25, 0xFF	; 255
 826:	f0 e8       	ldi	r31, 0x80	; 128
 828:	bf 2a       	or	r11, r31
 82a:	2a e0       	ldi	r18, 0x0A	; 10
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	a4 01       	movw	r20, r8
 830:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__ultoa_invert>
 834:	a8 2e       	mov	r10, r24
 836:	a8 18       	sub	r10, r8
 838:	43 c0       	rjmp	.+134    	; 0x8c0 <vfprintf+0x2a0>
 83a:	85 37       	cpi	r24, 0x75	; 117
 83c:	31 f4       	brne	.+12     	; 0x84a <vfprintf+0x22a>
 83e:	3f ee       	ldi	r19, 0xEF	; 239
 840:	b3 2e       	mov	r11, r19
 842:	b2 22       	and	r11, r18
 844:	2a e0       	ldi	r18, 0x0A	; 10
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	24 c0       	rjmp	.+72     	; 0x892 <vfprintf+0x272>
 84a:	99 ef       	ldi	r25, 0xF9	; 249
 84c:	b9 2e       	mov	r11, r25
 84e:	b2 22       	and	r11, r18
 850:	8f 36       	cpi	r24, 0x6F	; 111
 852:	b9 f0       	breq	.+46     	; 0x882 <vfprintf+0x262>
 854:	20 f4       	brcc	.+8      	; 0x85e <vfprintf+0x23e>
 856:	88 35       	cpi	r24, 0x58	; 88
 858:	09 f0       	breq	.+2      	; 0x85c <vfprintf+0x23c>
 85a:	b3 c0       	rjmp	.+358    	; 0x9c2 <vfprintf+0x3a2>
 85c:	0d c0       	rjmp	.+26     	; 0x878 <vfprintf+0x258>
 85e:	80 37       	cpi	r24, 0x70	; 112
 860:	21 f0       	breq	.+8      	; 0x86a <vfprintf+0x24a>
 862:	88 37       	cpi	r24, 0x78	; 120
 864:	09 f0       	breq	.+2      	; 0x868 <vfprintf+0x248>
 866:	ad c0       	rjmp	.+346    	; 0x9c2 <vfprintf+0x3a2>
 868:	02 c0       	rjmp	.+4      	; 0x86e <vfprintf+0x24e>
 86a:	20 e1       	ldi	r18, 0x10	; 16
 86c:	b2 2a       	or	r11, r18
 86e:	b4 fe       	sbrs	r11, 4
 870:	0b c0       	rjmp	.+22     	; 0x888 <vfprintf+0x268>
 872:	84 e0       	ldi	r24, 0x04	; 4
 874:	b8 2a       	or	r11, r24
 876:	08 c0       	rjmp	.+16     	; 0x888 <vfprintf+0x268>
 878:	24 ff       	sbrs	r18, 4
 87a:	09 c0       	rjmp	.+18     	; 0x88e <vfprintf+0x26e>
 87c:	e6 e0       	ldi	r30, 0x06	; 6
 87e:	be 2a       	or	r11, r30
 880:	06 c0       	rjmp	.+12     	; 0x88e <vfprintf+0x26e>
 882:	28 e0       	ldi	r18, 0x08	; 8
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	05 c0       	rjmp	.+10     	; 0x892 <vfprintf+0x272>
 888:	20 e1       	ldi	r18, 0x10	; 16
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	02 c0       	rjmp	.+4      	; 0x892 <vfprintf+0x272>
 88e:	20 e1       	ldi	r18, 0x10	; 16
 890:	32 e0       	ldi	r19, 0x02	; 2
 892:	f8 01       	movw	r30, r16
 894:	b7 fe       	sbrs	r11, 7
 896:	07 c0       	rjmp	.+14     	; 0x8a6 <vfprintf+0x286>
 898:	60 81       	ld	r22, Z
 89a:	71 81       	ldd	r23, Z+1	; 0x01
 89c:	82 81       	ldd	r24, Z+2	; 0x02
 89e:	93 81       	ldd	r25, Z+3	; 0x03
 8a0:	0c 5f       	subi	r16, 0xFC	; 252
 8a2:	1f 4f       	sbci	r17, 0xFF	; 255
 8a4:	06 c0       	rjmp	.+12     	; 0x8b2 <vfprintf+0x292>
 8a6:	60 81       	ld	r22, Z
 8a8:	71 81       	ldd	r23, Z+1	; 0x01
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 5f       	subi	r16, 0xFE	; 254
 8b0:	1f 4f       	sbci	r17, 0xFF	; 255
 8b2:	a4 01       	movw	r20, r8
 8b4:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__ultoa_invert>
 8b8:	a8 2e       	mov	r10, r24
 8ba:	a8 18       	sub	r10, r8
 8bc:	ff e7       	ldi	r31, 0x7F	; 127
 8be:	bf 22       	and	r11, r31
 8c0:	b6 fe       	sbrs	r11, 6
 8c2:	0b c0       	rjmp	.+22     	; 0x8da <vfprintf+0x2ba>
 8c4:	2b 2d       	mov	r18, r11
 8c6:	2e 7f       	andi	r18, 0xFE	; 254
 8c8:	a5 14       	cp	r10, r5
 8ca:	50 f4       	brcc	.+20     	; 0x8e0 <vfprintf+0x2c0>
 8cc:	b4 fe       	sbrs	r11, 4
 8ce:	0a c0       	rjmp	.+20     	; 0x8e4 <vfprintf+0x2c4>
 8d0:	b2 fc       	sbrc	r11, 2
 8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <vfprintf+0x2c4>
 8d4:	2b 2d       	mov	r18, r11
 8d6:	2e 7e       	andi	r18, 0xEE	; 238
 8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <vfprintf+0x2c4>
 8da:	7a 2c       	mov	r7, r10
 8dc:	2b 2d       	mov	r18, r11
 8de:	03 c0       	rjmp	.+6      	; 0x8e6 <vfprintf+0x2c6>
 8e0:	7a 2c       	mov	r7, r10
 8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <vfprintf+0x2c6>
 8e4:	75 2c       	mov	r7, r5
 8e6:	24 ff       	sbrs	r18, 4
 8e8:	0d c0       	rjmp	.+26     	; 0x904 <vfprintf+0x2e4>
 8ea:	fe 01       	movw	r30, r28
 8ec:	ea 0d       	add	r30, r10
 8ee:	f1 1d       	adc	r31, r1
 8f0:	80 81       	ld	r24, Z
 8f2:	80 33       	cpi	r24, 0x30	; 48
 8f4:	11 f4       	brne	.+4      	; 0x8fa <vfprintf+0x2da>
 8f6:	29 7e       	andi	r18, 0xE9	; 233
 8f8:	09 c0       	rjmp	.+18     	; 0x90c <vfprintf+0x2ec>
 8fa:	22 ff       	sbrs	r18, 2
 8fc:	06 c0       	rjmp	.+12     	; 0x90a <vfprintf+0x2ea>
 8fe:	73 94       	inc	r7
 900:	73 94       	inc	r7
 902:	04 c0       	rjmp	.+8      	; 0x90c <vfprintf+0x2ec>
 904:	82 2f       	mov	r24, r18
 906:	86 78       	andi	r24, 0x86	; 134
 908:	09 f0       	breq	.+2      	; 0x90c <vfprintf+0x2ec>
 90a:	73 94       	inc	r7
 90c:	23 fd       	sbrc	r18, 3
 90e:	14 c0       	rjmp	.+40     	; 0x938 <vfprintf+0x318>
 910:	20 ff       	sbrs	r18, 0
 912:	0f c0       	rjmp	.+30     	; 0x932 <vfprintf+0x312>
 914:	5a 2c       	mov	r5, r10
 916:	73 14       	cp	r7, r3
 918:	60 f4       	brcc	.+24     	; 0x932 <vfprintf+0x312>
 91a:	53 0c       	add	r5, r3
 91c:	57 18       	sub	r5, r7
 91e:	73 2c       	mov	r7, r3
 920:	08 c0       	rjmp	.+16     	; 0x932 <vfprintf+0x312>
 922:	b7 01       	movw	r22, r14
 924:	80 e2       	ldi	r24, 0x20	; 32
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	2c 87       	std	Y+12, r18	; 0x0c
 92a:	0e 94 02 05 	call	0xa04	; 0xa04 <fputc>
 92e:	73 94       	inc	r7
 930:	2c 85       	ldd	r18, Y+12	; 0x0c
 932:	73 14       	cp	r7, r3
 934:	b0 f3       	brcs	.-20     	; 0x922 <vfprintf+0x302>
 936:	04 c0       	rjmp	.+8      	; 0x940 <vfprintf+0x320>
 938:	73 14       	cp	r7, r3
 93a:	10 f4       	brcc	.+4      	; 0x940 <vfprintf+0x320>
 93c:	37 18       	sub	r3, r7
 93e:	01 c0       	rjmp	.+2      	; 0x942 <vfprintf+0x322>
 940:	31 2c       	mov	r3, r1
 942:	24 ff       	sbrs	r18, 4
 944:	12 c0       	rjmp	.+36     	; 0x96a <vfprintf+0x34a>
 946:	b7 01       	movw	r22, r14
 948:	80 e3       	ldi	r24, 0x30	; 48
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	2c 87       	std	Y+12, r18	; 0x0c
 94e:	0e 94 02 05 	call	0xa04	; 0xa04 <fputc>
 952:	2c 85       	ldd	r18, Y+12	; 0x0c
 954:	22 ff       	sbrs	r18, 2
 956:	1e c0       	rjmp	.+60     	; 0x994 <vfprintf+0x374>
 958:	21 ff       	sbrs	r18, 1
 95a:	03 c0       	rjmp	.+6      	; 0x962 <vfprintf+0x342>
 95c:	88 e5       	ldi	r24, 0x58	; 88
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	02 c0       	rjmp	.+4      	; 0x966 <vfprintf+0x346>
 962:	88 e7       	ldi	r24, 0x78	; 120
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	b7 01       	movw	r22, r14
 968:	0c c0       	rjmp	.+24     	; 0x982 <vfprintf+0x362>
 96a:	82 2f       	mov	r24, r18
 96c:	86 78       	andi	r24, 0x86	; 134
 96e:	91 f0       	breq	.+36     	; 0x994 <vfprintf+0x374>
 970:	21 fd       	sbrc	r18, 1
 972:	02 c0       	rjmp	.+4      	; 0x978 <vfprintf+0x358>
 974:	80 e2       	ldi	r24, 0x20	; 32
 976:	01 c0       	rjmp	.+2      	; 0x97a <vfprintf+0x35a>
 978:	8b e2       	ldi	r24, 0x2B	; 43
 97a:	27 fd       	sbrc	r18, 7
 97c:	8d e2       	ldi	r24, 0x2D	; 45
 97e:	b7 01       	movw	r22, r14
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	0e 94 02 05 	call	0xa04	; 0xa04 <fputc>
 986:	06 c0       	rjmp	.+12     	; 0x994 <vfprintf+0x374>
 988:	b7 01       	movw	r22, r14
 98a:	80 e3       	ldi	r24, 0x30	; 48
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 02 05 	call	0xa04	; 0xa04 <fputc>
 992:	5a 94       	dec	r5
 994:	a5 14       	cp	r10, r5
 996:	c0 f3       	brcs	.-16     	; 0x988 <vfprintf+0x368>
 998:	aa 94       	dec	r10
 99a:	f4 01       	movw	r30, r8
 99c:	ea 0d       	add	r30, r10
 99e:	f1 1d       	adc	r31, r1
 9a0:	b7 01       	movw	r22, r14
 9a2:	80 81       	ld	r24, Z
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	0e 94 02 05 	call	0xa04	; 0xa04 <fputc>
 9aa:	a1 10       	cpse	r10, r1
 9ac:	f5 cf       	rjmp	.-22     	; 0x998 <vfprintf+0x378>
 9ae:	06 c0       	rjmp	.+12     	; 0x9bc <vfprintf+0x39c>
 9b0:	b7 01       	movw	r22, r14
 9b2:	80 e2       	ldi	r24, 0x20	; 32
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	0e 94 02 05 	call	0xa04	; 0xa04 <fputc>
 9ba:	3a 94       	dec	r3
 9bc:	31 10       	cpse	r3, r1
 9be:	f8 cf       	rjmp	.-16     	; 0x9b0 <vfprintf+0x390>
 9c0:	43 ce       	rjmp	.-890    	; 0x648 <vfprintf+0x28>
 9c2:	f7 01       	movw	r30, r14
 9c4:	26 81       	ldd	r18, Z+6	; 0x06
 9c6:	37 81       	ldd	r19, Z+7	; 0x07
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <vfprintf+0x3ae>
 9ca:	2f ef       	ldi	r18, 0xFF	; 255
 9cc:	3f ef       	ldi	r19, 0xFF	; 255
 9ce:	c9 01       	movw	r24, r18
 9d0:	2c 96       	adiw	r28, 0x0c	; 12
 9d2:	e2 e1       	ldi	r30, 0x12	; 18
 9d4:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__epilogue_restores__>

000009d8 <strnlen_P>:
 9d8:	fc 01       	movw	r30, r24
 9da:	05 90       	lpm	r0, Z+
 9dc:	61 50       	subi	r22, 0x01	; 1
 9de:	70 40       	sbci	r23, 0x00	; 0
 9e0:	01 10       	cpse	r0, r1
 9e2:	d8 f7       	brcc	.-10     	; 0x9da <strnlen_P+0x2>
 9e4:	80 95       	com	r24
 9e6:	90 95       	com	r25
 9e8:	8e 0f       	add	r24, r30
 9ea:	9f 1f       	adc	r25, r31
 9ec:	08 95       	ret

000009ee <strnlen>:
 9ee:	fc 01       	movw	r30, r24
 9f0:	61 50       	subi	r22, 0x01	; 1
 9f2:	70 40       	sbci	r23, 0x00	; 0
 9f4:	01 90       	ld	r0, Z+
 9f6:	01 10       	cpse	r0, r1
 9f8:	d8 f7       	brcc	.-10     	; 0x9f0 <strnlen+0x2>
 9fa:	80 95       	com	r24
 9fc:	90 95       	com	r25
 9fe:	8e 0f       	add	r24, r30
 a00:	9f 1f       	adc	r25, r31
 a02:	08 95       	ret

00000a04 <fputc>:
 a04:	0f 93       	push	r16
 a06:	1f 93       	push	r17
 a08:	cf 93       	push	r28
 a0a:	df 93       	push	r29
 a0c:	8c 01       	movw	r16, r24
 a0e:	eb 01       	movw	r28, r22
 a10:	8b 81       	ldd	r24, Y+3	; 0x03
 a12:	81 fd       	sbrc	r24, 1
 a14:	03 c0       	rjmp	.+6      	; 0xa1c <fputc+0x18>
 a16:	0f ef       	ldi	r16, 0xFF	; 255
 a18:	1f ef       	ldi	r17, 0xFF	; 255
 a1a:	1a c0       	rjmp	.+52     	; 0xa50 <fputc+0x4c>
 a1c:	82 ff       	sbrs	r24, 2
 a1e:	0d c0       	rjmp	.+26     	; 0xa3a <fputc+0x36>
 a20:	2e 81       	ldd	r18, Y+6	; 0x06
 a22:	3f 81       	ldd	r19, Y+7	; 0x07
 a24:	8c 81       	ldd	r24, Y+4	; 0x04
 a26:	9d 81       	ldd	r25, Y+5	; 0x05
 a28:	28 17       	cp	r18, r24
 a2a:	39 07       	cpc	r19, r25
 a2c:	64 f4       	brge	.+24     	; 0xa46 <fputc+0x42>
 a2e:	e8 81       	ld	r30, Y
 a30:	f9 81       	ldd	r31, Y+1	; 0x01
 a32:	01 93       	st	Z+, r16
 a34:	f9 83       	std	Y+1, r31	; 0x01
 a36:	e8 83       	st	Y, r30
 a38:	06 c0       	rjmp	.+12     	; 0xa46 <fputc+0x42>
 a3a:	e8 85       	ldd	r30, Y+8	; 0x08
 a3c:	f9 85       	ldd	r31, Y+9	; 0x09
 a3e:	80 2f       	mov	r24, r16
 a40:	09 95       	icall
 a42:	89 2b       	or	r24, r25
 a44:	41 f7       	brne	.-48     	; 0xa16 <fputc+0x12>
 a46:	8e 81       	ldd	r24, Y+6	; 0x06
 a48:	9f 81       	ldd	r25, Y+7	; 0x07
 a4a:	01 96       	adiw	r24, 0x01	; 1
 a4c:	9f 83       	std	Y+7, r25	; 0x07
 a4e:	8e 83       	std	Y+6, r24	; 0x06
 a50:	c8 01       	movw	r24, r16
 a52:	df 91       	pop	r29
 a54:	cf 91       	pop	r28
 a56:	1f 91       	pop	r17
 a58:	0f 91       	pop	r16
 a5a:	08 95       	ret

00000a5c <__ultoa_invert>:
 a5c:	fa 01       	movw	r30, r20
 a5e:	aa 27       	eor	r26, r26
 a60:	28 30       	cpi	r18, 0x08	; 8
 a62:	51 f1       	breq	.+84     	; 0xab8 <__ultoa_invert+0x5c>
 a64:	20 31       	cpi	r18, 0x10	; 16
 a66:	81 f1       	breq	.+96     	; 0xac8 <__ultoa_invert+0x6c>
 a68:	e8 94       	clt
 a6a:	6f 93       	push	r22
 a6c:	6e 7f       	andi	r22, 0xFE	; 254
 a6e:	6e 5f       	subi	r22, 0xFE	; 254
 a70:	7f 4f       	sbci	r23, 0xFF	; 255
 a72:	8f 4f       	sbci	r24, 0xFF	; 255
 a74:	9f 4f       	sbci	r25, 0xFF	; 255
 a76:	af 4f       	sbci	r26, 0xFF	; 255
 a78:	b1 e0       	ldi	r27, 0x01	; 1
 a7a:	3e d0       	rcall	.+124    	; 0xaf8 <__ultoa_invert+0x9c>
 a7c:	b4 e0       	ldi	r27, 0x04	; 4
 a7e:	3c d0       	rcall	.+120    	; 0xaf8 <__ultoa_invert+0x9c>
 a80:	67 0f       	add	r22, r23
 a82:	78 1f       	adc	r23, r24
 a84:	89 1f       	adc	r24, r25
 a86:	9a 1f       	adc	r25, r26
 a88:	a1 1d       	adc	r26, r1
 a8a:	68 0f       	add	r22, r24
 a8c:	79 1f       	adc	r23, r25
 a8e:	8a 1f       	adc	r24, r26
 a90:	91 1d       	adc	r25, r1
 a92:	a1 1d       	adc	r26, r1
 a94:	6a 0f       	add	r22, r26
 a96:	71 1d       	adc	r23, r1
 a98:	81 1d       	adc	r24, r1
 a9a:	91 1d       	adc	r25, r1
 a9c:	a1 1d       	adc	r26, r1
 a9e:	20 d0       	rcall	.+64     	; 0xae0 <__ultoa_invert+0x84>
 aa0:	09 f4       	brne	.+2      	; 0xaa4 <__ultoa_invert+0x48>
 aa2:	68 94       	set
 aa4:	3f 91       	pop	r19
 aa6:	2a e0       	ldi	r18, 0x0A	; 10
 aa8:	26 9f       	mul	r18, r22
 aaa:	11 24       	eor	r1, r1
 aac:	30 19       	sub	r19, r0
 aae:	30 5d       	subi	r19, 0xD0	; 208
 ab0:	31 93       	st	Z+, r19
 ab2:	de f6       	brtc	.-74     	; 0xa6a <__ultoa_invert+0xe>
 ab4:	cf 01       	movw	r24, r30
 ab6:	08 95       	ret
 ab8:	46 2f       	mov	r20, r22
 aba:	47 70       	andi	r20, 0x07	; 7
 abc:	40 5d       	subi	r20, 0xD0	; 208
 abe:	41 93       	st	Z+, r20
 ac0:	b3 e0       	ldi	r27, 0x03	; 3
 ac2:	0f d0       	rcall	.+30     	; 0xae2 <__ultoa_invert+0x86>
 ac4:	c9 f7       	brne	.-14     	; 0xab8 <__ultoa_invert+0x5c>
 ac6:	f6 cf       	rjmp	.-20     	; 0xab4 <__ultoa_invert+0x58>
 ac8:	46 2f       	mov	r20, r22
 aca:	4f 70       	andi	r20, 0x0F	; 15
 acc:	40 5d       	subi	r20, 0xD0	; 208
 ace:	4a 33       	cpi	r20, 0x3A	; 58
 ad0:	18 f0       	brcs	.+6      	; 0xad8 <__ultoa_invert+0x7c>
 ad2:	49 5d       	subi	r20, 0xD9	; 217
 ad4:	31 fd       	sbrc	r19, 1
 ad6:	40 52       	subi	r20, 0x20	; 32
 ad8:	41 93       	st	Z+, r20
 ada:	02 d0       	rcall	.+4      	; 0xae0 <__ultoa_invert+0x84>
 adc:	a9 f7       	brne	.-22     	; 0xac8 <__ultoa_invert+0x6c>
 ade:	ea cf       	rjmp	.-44     	; 0xab4 <__ultoa_invert+0x58>
 ae0:	b4 e0       	ldi	r27, 0x04	; 4
 ae2:	a6 95       	lsr	r26
 ae4:	97 95       	ror	r25
 ae6:	87 95       	ror	r24
 ae8:	77 95       	ror	r23
 aea:	67 95       	ror	r22
 aec:	ba 95       	dec	r27
 aee:	c9 f7       	brne	.-14     	; 0xae2 <__ultoa_invert+0x86>
 af0:	00 97       	sbiw	r24, 0x00	; 0
 af2:	61 05       	cpc	r22, r1
 af4:	71 05       	cpc	r23, r1
 af6:	08 95       	ret
 af8:	9b 01       	movw	r18, r22
 afa:	ac 01       	movw	r20, r24
 afc:	0a 2e       	mov	r0, r26
 afe:	06 94       	lsr	r0
 b00:	57 95       	ror	r21
 b02:	47 95       	ror	r20
 b04:	37 95       	ror	r19
 b06:	27 95       	ror	r18
 b08:	ba 95       	dec	r27
 b0a:	c9 f7       	brne	.-14     	; 0xafe <__ultoa_invert+0xa2>
 b0c:	62 0f       	add	r22, r18
 b0e:	73 1f       	adc	r23, r19
 b10:	84 1f       	adc	r24, r20
 b12:	95 1f       	adc	r25, r21
 b14:	a0 1d       	adc	r26, r0
 b16:	08 95       	ret

00000b18 <__prologue_saves__>:
 b18:	2f 92       	push	r2
 b1a:	3f 92       	push	r3
 b1c:	4f 92       	push	r4
 b1e:	5f 92       	push	r5
 b20:	6f 92       	push	r6
 b22:	7f 92       	push	r7
 b24:	8f 92       	push	r8
 b26:	9f 92       	push	r9
 b28:	af 92       	push	r10
 b2a:	bf 92       	push	r11
 b2c:	cf 92       	push	r12
 b2e:	df 92       	push	r13
 b30:	ef 92       	push	r14
 b32:	ff 92       	push	r15
 b34:	0f 93       	push	r16
 b36:	1f 93       	push	r17
 b38:	cf 93       	push	r28
 b3a:	df 93       	push	r29
 b3c:	cd b7       	in	r28, 0x3d	; 61
 b3e:	de b7       	in	r29, 0x3e	; 62
 b40:	ca 1b       	sub	r28, r26
 b42:	db 0b       	sbc	r29, r27
 b44:	0f b6       	in	r0, 0x3f	; 63
 b46:	f8 94       	cli
 b48:	de bf       	out	0x3e, r29	; 62
 b4a:	0f be       	out	0x3f, r0	; 63
 b4c:	cd bf       	out	0x3d, r28	; 61
 b4e:	09 94       	ijmp

00000b50 <__epilogue_restores__>:
 b50:	2a 88       	ldd	r2, Y+18	; 0x12
 b52:	39 88       	ldd	r3, Y+17	; 0x11
 b54:	48 88       	ldd	r4, Y+16	; 0x10
 b56:	5f 84       	ldd	r5, Y+15	; 0x0f
 b58:	6e 84       	ldd	r6, Y+14	; 0x0e
 b5a:	7d 84       	ldd	r7, Y+13	; 0x0d
 b5c:	8c 84       	ldd	r8, Y+12	; 0x0c
 b5e:	9b 84       	ldd	r9, Y+11	; 0x0b
 b60:	aa 84       	ldd	r10, Y+10	; 0x0a
 b62:	b9 84       	ldd	r11, Y+9	; 0x09
 b64:	c8 84       	ldd	r12, Y+8	; 0x08
 b66:	df 80       	ldd	r13, Y+7	; 0x07
 b68:	ee 80       	ldd	r14, Y+6	; 0x06
 b6a:	fd 80       	ldd	r15, Y+5	; 0x05
 b6c:	0c 81       	ldd	r16, Y+4	; 0x04
 b6e:	1b 81       	ldd	r17, Y+3	; 0x03
 b70:	aa 81       	ldd	r26, Y+2	; 0x02
 b72:	b9 81       	ldd	r27, Y+1	; 0x01
 b74:	ce 0f       	add	r28, r30
 b76:	d1 1d       	adc	r29, r1
 b78:	0f b6       	in	r0, 0x3f	; 63
 b7a:	f8 94       	cli
 b7c:	de bf       	out	0x3e, r29	; 62
 b7e:	0f be       	out	0x3f, r0	; 63
 b80:	cd bf       	out	0x3d, r28	; 61
 b82:	ed 01       	movw	r28, r26
 b84:	08 95       	ret

00000b86 <_exit>:
 b86:	f8 94       	cli

00000b88 <__stop_program>:
 b88:	ff cf       	rjmp	.-2      	; 0xb88 <__stop_program>
