
i2cRGB practice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000017e  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000957  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000044b  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000027e  00000000  00000000  00000e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b9  00000000  00000000  000010d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001490  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a2  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023d  00000000  00000000  00001726  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001963  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  78:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <i2c_init>:
*************************************************************************/ 
void i2c_init(void) 
{ 
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */ 
  
  TWSR = 0;                         /* no prescaler */ 
  80:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */ 
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	80 93 b8 00 	sts	0x00B8, r24
  8a:	08 95       	ret

0000008c <i2c_start>:
unsigned char i2c_start(unsigned char address) 
{ 
    uint8_t   twst; 

   // send START condition 
   TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); 
  8c:	94 ea       	ldi	r25, 0xA4	; 164
  8e:	90 93 bc 00 	sts	0x00BC, r25

   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 
  92:	ec eb       	ldi	r30, 0xBC	; 188
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	90 81       	ld	r25, Z
  98:	99 23       	and	r25, r25
  9a:	ec f7       	brge	.-6      	; 0x96 <i2c_start+0xa>

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
  9c:	90 91 b9 00 	lds	r25, 0x00B9
  a0:	98 7f       	andi	r25, 0xF8	; 248
   if ( (twst != TW_START) && (twst != TW_REP_START)) return 1; 
  a2:	98 30       	cpi	r25, 0x08	; 8
  a4:	11 f0       	breq	.+4      	; 0xaa <i2c_start+0x1e>
  a6:	90 31       	cpi	r25, 0x10	; 16
  a8:	a1 f4       	brne	.+40     	; 0xd2 <i2c_start+0x46>

   // send device address 
   TWDR = address; 
  aa:	80 93 bb 00 	sts	0x00BB, r24
   TWCR = (1<<TWINT) | (1<<TWEN); 
  ae:	84 e8       	ldi	r24, 0x84	; 132
  b0:	80 93 bc 00 	sts	0x00BC, r24

   // wail until transmission completed and ACK/NACK has been received 
   while(!(TWCR & (1<<TWINT))); 
  b4:	ec eb       	ldi	r30, 0xBC	; 188
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 23       	and	r24, r24
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_start+0x2c>

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
  be:	90 91 b9 00 	lds	r25, 0x00B9
  c2:	98 7f       	andi	r25, 0xF8	; 248
   if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1; 
  c4:	98 31       	cpi	r25, 0x18	; 24
  c6:	39 f0       	breq	.+14     	; 0xd6 <i2c_start+0x4a>
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 34       	cpi	r25, 0x40	; 64
  cc:	29 f4       	brne	.+10     	; 0xd8 <i2c_start+0x4c>
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	08 95       	ret
   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
   if ( (twst != TW_START) && (twst != TW_REP_START)) return 1; 
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	08 95       	ret

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
   if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1; 

   return 0; 
  d6:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */ 
  d8:	08 95       	ret

000000da <i2c_stop>:
 Terminates the data transfer and releases the I2C bus 
*************************************************************************/ 
void i2c_stop(void) 
{ 
    /* send stop condition */ 
   TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); 
  da:	84 e9       	ldi	r24, 0x94	; 148
  dc:	80 93 bc 00 	sts	0x00BC, r24
    
   // wait until stop condition is executed and bus released 
   while(TWCR & (1<<TWSTO)); 
  e0:	ec eb       	ldi	r30, 0xBC	; 188
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	84 fd       	sbrc	r24, 4
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <i2c_stop+0xa>

}/* i2c_stop */ 
  ea:	08 95       	ret

000000ec <i2c_write>:
unsigned char i2c_write( unsigned char data ) 
{    
    uint8_t   twst; 
    
   // send data to the previously addressed device 
   TWDR = data; 
  ec:	80 93 bb 00 	sts	0x00BB, r24
   TWCR = (1<<TWINT) | (1<<TWEN); 
  f0:	84 e8       	ldi	r24, 0x84	; 132
  f2:	80 93 bc 00 	sts	0x00BC, r24

   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 
  f6:	ec eb       	ldi	r30, 0xBC	; 188
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 23       	and	r24, r24
  fe:	ec f7       	brge	.-6      	; 0xfa <i2c_write+0xe>

   // check value of TWI Status Register. Mask prescaler bits 
   twst = TW_STATUS & 0xF8; 
 100:	90 91 b9 00 	lds	r25, 0x00B9
 104:	98 7f       	andi	r25, 0xF8	; 248
   if( twst != TW_MT_DATA_ACK) return 1; 
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	98 32       	cpi	r25, 0x28	; 40
 10a:	09 f4       	brne	.+2      	; 0x10e <i2c_write+0x22>
 10c:	80 e0       	ldi	r24, 0x00	; 0
   return 0; 

}/* i2c_write */ 
 10e:	08 95       	ret

00000110 <init>:




void init(void){
	DDRB = 0xFF;		//all outputs port B
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	84 b9       	out	0x04, r24	; 4
	i2c_init();
 114:	0e 94 40 00 	call	0x80	; 0x80 <i2c_init>
 118:	08 95       	ret

0000011a <writeRGB>:
	
	
}

void writeRGB(unsigned char red, unsigned char green, unsigned char blue){
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	18 2f       	mov	r17, r24
 122:	d6 2f       	mov	r29, r22
 124:	c4 2f       	mov	r28, r20
	i2c_start(RGB_I2C_ADDR<<1);
 126:	84 e4       	ldi	r24, 0x44	; 68
 128:	0e 94 46 00 	call	0x8c	; 0x8c <i2c_start>
	
	i2c_write(red);
 12c:	81 2f       	mov	r24, r17
 12e:	0e 94 76 00 	call	0xec	; 0xec <i2c_write>
	i2c_write(green);
 132:	8d 2f       	mov	r24, r29
 134:	0e 94 76 00 	call	0xec	; 0xec <i2c_write>
	i2c_write(blue);
 138:	8c 2f       	mov	r24, r28
 13a:	0e 94 76 00 	call	0xec	; 0xec <i2c_write>
	i2c_stop();
 13e:	0e 94 6d 00 	call	0xda	; 0xda <i2c_stop>
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	08 95       	ret

0000014a <main>:

int main(void)
{
	unsigned char red=255, blue=255, green=255;
	init();
 14a:	0e 94 88 00 	call	0x110	; 0x110 <init>
	i2c_stop();
}

int main(void)
{
	unsigned char red=255, blue=255, green=255;
 14e:	1f ef       	ldi	r17, 0xFF	; 255
 150:	df ef       	ldi	r29, 0xFF	; 255
 152:	cf ef       	ldi	r28, 0xFF	; 255
	init();
	
	while(1)
	{
		PORTB ^= (1<<PB5);		//toggle LED
 154:	00 e2       	ldi	r16, 0x20	; 32
 156:	85 b1       	in	r24, 0x05	; 5
 158:	80 27       	eor	r24, r16
 15a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e1       	ldi	r24, 0x1F	; 31
 15e:	9e e4       	ldi	r25, 0x4E	; 78
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0x16>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x1c>
 166:	00 00       	nop
		_delay_ms(10);
		red -= 1;
 168:	c1 50       	subi	r28, 0x01	; 1
		green -=5;
 16a:	15 50       	subi	r17, 0x05	; 5
		blue -=10;
 16c:	da 50       	subi	r29, 0x0A	; 10
		writeRGB(red,green,blue);
 16e:	4d 2f       	mov	r20, r29
 170:	61 2f       	mov	r22, r17
 172:	8c 2f       	mov	r24, r28
 174:	0e 94 8d 00 	call	0x11a	; 0x11a <writeRGB>
 178:	ee cf       	rjmp	.-36     	; 0x156 <main+0xc>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
