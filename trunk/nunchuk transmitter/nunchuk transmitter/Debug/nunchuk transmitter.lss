
nunchuk transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000007d0  00000864  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010c  0080010c  00000870  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000fd3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002e8  00000000  00000000  00001002  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000030a1  00000000  00000000  000012ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000907  00000000  00000000  0000438b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d19  00000000  00000000  00004c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000734  00000000  00000000  000059ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b04  00000000  00000000  000060e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000019cd  00000000  00000000  00006be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000298  00000000  00000000  000085b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__vector_1>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	d9 03       	fmulsu	r21, r17

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d4 e0       	ldi	r29, 0x04	; 4
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e0 ed       	ldi	r30, 0xD0	; 208
  7e:	f7 e0       	ldi	r31, 0x07	; 7
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	ac 30       	cpi	r26, 0x0C	; 12
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	ac e0       	ldi	r26, 0x0C	; 12
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a4 31       	cpi	r26, 0x14	; 20
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	ca e6       	ldi	r28, 0x6A	; 106
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	22 97       	sbiw	r28, 0x02	; 2
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__tablejump__>
  ac:	c8 36       	cpi	r28, 0x68	; 104
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 9d 03 	call	0x73a	; 0x73a <main>
  b6:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <i2c_init>:
*************************************************************************/ 
void i2c_init(void) 
{ 
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */ 
  
  TWSR = 0;                         /* no prescaler */ 
  be:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */ 
  c2:	8c e0       	ldi	r24, 0x0C	; 12
  c4:	80 93 b8 00 	sts	0x00B8, r24
  c8:	08 95       	ret

000000ca <i2c_start>:
unsigned char i2c_start(unsigned char address) 
{ 
    uint8_t   twst; 

   // send START condition 
   TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); 
  ca:	94 ea       	ldi	r25, 0xA4	; 164
  cc:	90 93 bc 00 	sts	0x00BC, r25

   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 
  d0:	ec eb       	ldi	r30, 0xBC	; 188
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	90 81       	ld	r25, Z
  d6:	99 23       	and	r25, r25
  d8:	ec f7       	brge	.-6      	; 0xd4 <i2c_start+0xa>

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
  da:	90 91 b9 00 	lds	r25, 0x00B9
  de:	98 7f       	andi	r25, 0xF8	; 248
   if ( (twst != TW_START) && (twst != TW_REP_START)) return 1; 
  e0:	98 30       	cpi	r25, 0x08	; 8
  e2:	11 f0       	breq	.+4      	; 0xe8 <i2c_start+0x1e>
  e4:	90 31       	cpi	r25, 0x10	; 16
  e6:	a1 f4       	brne	.+40     	; 0x110 <i2c_start+0x46>

   // send device address 
   TWDR = address; 
  e8:	80 93 bb 00 	sts	0x00BB, r24
   TWCR = (1<<TWINT) | (1<<TWEN); 
  ec:	84 e8       	ldi	r24, 0x84	; 132
  ee:	80 93 bc 00 	sts	0x00BC, r24

   // wail until transmission completed and ACK/NACK has been received 
   while(!(TWCR & (1<<TWINT))); 
  f2:	ec eb       	ldi	r30, 0xBC	; 188
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 23       	and	r24, r24
  fa:	ec f7       	brge	.-6      	; 0xf6 <i2c_start+0x2c>

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
  fc:	90 91 b9 00 	lds	r25, 0x00B9
 100:	98 7f       	andi	r25, 0xF8	; 248
   if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1; 
 102:	98 31       	cpi	r25, 0x18	; 24
 104:	39 f0       	breq	.+14     	; 0x114 <i2c_start+0x4a>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 34       	cpi	r25, 0x40	; 64
 10a:	29 f4       	brne	.+10     	; 0x116 <i2c_start+0x4c>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	08 95       	ret
   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
   if ( (twst != TW_START) && (twst != TW_REP_START)) return 1; 
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	08 95       	ret

   // check value of TWI Status Register. Mask prescaler bits. 
   twst = TW_STATUS & 0xF8; 
   if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1; 

   return 0; 
 114:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */ 
 116:	08 95       	ret

00000118 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus 
*************************************************************************/ 
void i2c_stop(void) 
{ 
    /* send stop condition */ 
   TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); 
 118:	84 e9       	ldi	r24, 0x94	; 148
 11a:	80 93 bc 00 	sts	0x00BC, r24
    
   // wait until stop condition is executed and bus released 
   while(TWCR & (1<<TWSTO)); 
 11e:	ec eb       	ldi	r30, 0xBC	; 188
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	84 fd       	sbrc	r24, 4
 126:	fd cf       	rjmp	.-6      	; 0x122 <i2c_stop+0xa>

}/* i2c_stop */ 
 128:	08 95       	ret

0000012a <i2c_write>:
unsigned char i2c_write( unsigned char data ) 
{    
    uint8_t   twst; 
    
   // send data to the previously addressed device 
   TWDR = data; 
 12a:	80 93 bb 00 	sts	0x00BB, r24
   TWCR = (1<<TWINT) | (1<<TWEN); 
 12e:	84 e8       	ldi	r24, 0x84	; 132
 130:	80 93 bc 00 	sts	0x00BC, r24

   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 
 134:	ec eb       	ldi	r30, 0xBC	; 188
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	ec f7       	brge	.-6      	; 0x138 <i2c_write+0xe>

   // check value of TWI Status Register. Mask prescaler bits 
   twst = TW_STATUS & 0xF8; 
 13e:	90 91 b9 00 	lds	r25, 0x00B9
 142:	98 7f       	andi	r25, 0xF8	; 248
   if( twst != TW_MT_DATA_ACK) return 1; 
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	98 32       	cpi	r25, 0x28	; 40
 148:	09 f4       	brne	.+2      	; 0x14c <i2c_write+0x22>
 14a:	80 e0       	ldi	r24, 0x00	; 0
   return 0; 

}/* i2c_write */ 
 14c:	08 95       	ret

0000014e <i2c_readAck>:
  
 Return:  byte read from I2C device 
*************************************************************************/ 
unsigned char i2c_readAck(void) 
{ 
   TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 14e:	84 ec       	ldi	r24, 0xC4	; 196
 150:	80 93 bc 00 	sts	0x00BC, r24
   while(!(TWCR & (1<<TWINT)));    
 154:	ec eb       	ldi	r30, 0xBC	; 188
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	ec f7       	brge	.-6      	; 0x158 <i2c_readAck+0xa>

    return TWDR; 
 15e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */ 
 162:	08 95       	ret

00000164 <i2c_readNak>:
  
 Return:  byte read from I2C device 
*************************************************************************/ 
unsigned char i2c_readNak(void) 
{ 
   TWCR = (1<<TWINT) | (1<<TWEN); 
 164:	84 e8       	ldi	r24, 0x84	; 132
 166:	80 93 bc 00 	sts	0x00BC, r24
   while(!(TWCR & (1<<TWINT))); 
 16a:	ec eb       	ldi	r30, 0xBC	; 188
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	88 23       	and	r24, r24
 172:	ec f7       	brge	.-6      	; 0x16e <i2c_readNak+0xa>
    
    return TWDR; 
 174:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */ 
 178:	08 95       	ret

0000017a <spiInit>:


void spiInit()
// Initialize pins for spi communication
{
    DDR_SPI &= ~((1<<DD_MOSI)|(1<<DD_MISO)|(1<<DD_SS)|(1<<DD_SCK));
 17a:	84 b1       	in	r24, 0x04	; 4
 17c:	83 7c       	andi	r24, 0xC3	; 195
 17e:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    DDR_SPI |= ((1<<DD_MOSI)|(1<<DD_SS)|(1<<DD_SCK));
 180:	84 b1       	in	r24, 0x04	; 4
 182:	8c 62       	ori	r24, 0x2C	; 44
 184:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
 186:	81 e5       	ldi	r24, 0x51	; 81
 188:	8c bd       	out	0x2c, r24	; 44
 18a:	08 95       	ret

0000018c <spiRead>:

void spiRead (uint8_t * datain, uint8_t length)
// sends out 0x00 while receiving full length of datain
{
	uint8_t i;
	for (i = 0; i < length; i++) {
 18c:	66 23       	and	r22, r22
 18e:	69 f0       	breq	.+26     	; 0x1aa <spiRead+0x1e>
 190:	28 2f       	mov	r18, r24
 192:	e8 2f       	mov	r30, r24
 194:	f9 2f       	mov	r31, r25
		SPDR = 0x00;					//dummy byte
 196:	1e bc       	out	0x2e, r1	; 46
		while((SPSR & (1<<SPIF))==0);	//wait until data is transferred
 198:	0d b4       	in	r0, 0x2d	; 45
 19a:	07 fe       	sbrs	r0, 7
 19c:	fd cf       	rjmp	.-6      	; 0x198 <spiRead+0xc>
		datain[i] = SPDR;
 19e:	8e b5       	in	r24, 0x2e	; 46
 1a0:	81 93       	st	Z+, r24

void spiRead (uint8_t * datain, uint8_t length)
// sends out 0x00 while receiving full length of datain
{
	uint8_t i;
	for (i = 0; i < length; i++) {
 1a2:	8e 2f       	mov	r24, r30
 1a4:	82 1b       	sub	r24, r18
 1a6:	86 17       	cp	r24, r22
 1a8:	b0 f3       	brcs	.-20     	; 0x196 <spiRead+0xa>
 1aa:	08 95       	ret

000001ac <spiWrite>:

void spiWrite (uint8_t * dataout, uint8_t length)
// Shift full array to target device without receiving any byte
{
       uint8_t i;      
       for (i = 0; i < length; i++) {
 1ac:	66 23       	and	r22, r22
 1ae:	61 f0       	breq	.+24     	; 0x1c8 <spiWrite+0x1c>
 1b0:	28 2f       	mov	r18, r24
 1b2:	e8 2f       	mov	r30, r24
 1b4:	f9 2f       	mov	r31, r25
             SPDR = dataout[i];
 1b6:	81 91       	ld	r24, Z+
 1b8:	8e bd       	out	0x2e, r24	; 46
             while((SPSR & (1<<SPIF))==0);
 1ba:	0d b4       	in	r0, 0x2d	; 45
 1bc:	07 fe       	sbrs	r0, 7
 1be:	fd cf       	rjmp	.-6      	; 0x1ba <spiWrite+0xe>

void spiWrite (uint8_t * dataout, uint8_t length)
// Shift full array to target device without receiving any byte
{
       uint8_t i;      
       for (i = 0; i < length; i++) {
 1c0:	8e 2f       	mov	r24, r30
 1c2:	82 1b       	sub	r24, r18
 1c4:	86 17       	cp	r24, r22
 1c6:	b8 f3       	brcs	.-18     	; 0x1b6 <spiWrite+0xa>
 1c8:	08 95       	ret

000001ca <spiTransfer1byte>:
}

uint8_t spiTransfer1byte (uint8_t dataout)
// Clocks only one byte to target device and returns the received one
{
    SPDR = dataout;
 1ca:	8e bd       	out	0x2e, r24	; 46
    while((SPSR & (1<<SPIF))==0);
 1cc:	0d b4       	in	r0, 0x2d	; 45
 1ce:	07 fe       	sbrs	r0, 7
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <spiTransfer1byte+0x2>
    return SPDR;
 1d2:	8e b5       	in	r24, 0x2e	; 46
}
 1d4:	08 95       	ret

000001d6 <_Z5setCEv>:

///@description	CE needs to be be high to take the nRF out of standby mode
///					into either TX or RX mode.
///@brief	Sets the CE pin high.
void setCE(){
	NRF_CE_PORT |= (1<<NRF_CE_PIN);
 1d6:	28 9a       	sbi	0x05, 0	; 5
 1d8:	08 95       	ret

000001da <_Z7clearCEv>:
}

///@description Clearing the CE pin puts the nRF into standby mode.
///@brief	Clears the CE pin to low.
void clearCE(){
	NRF_CE_PORT &= ~(1<<NRF_CE_PIN);
 1da:	28 98       	cbi	0x05, 0	; 5
 1dc:	08 95       	ret

000001de <_Z6setCSNv>:
}

///@description
///@brief		Sets the CSN(/Cable Select), disabling SPI communication to the nRF.
void setCSN(){
	NRF_CSN_PORT |= (1<<NRF_CSN_PIN);
 1de:	29 9a       	sbi	0x05, 1	; 5
 1e0:	08 95       	ret

000001e2 <_Z8clearCSNv>:
}

///@description		All SPI commands need to be started by a high to low transisition on CSN.
///@brief			Clears the CSN(/Cable Select) pin to low.  
void clearCSN(){
	NRF_CSN_PORT &= ~(1<<NRF_CSN_PIN);
 1e2:	29 98       	cbi	0x05, 1	; 5
 1e4:	08 95       	ret

000001e6 <_Z18getDataPipeAddressh>:

///@description	Returns the receive address of the dataPipe
///@param	dataPipe	The dataPipe index. 0-5
///@returns	The address of the referenced dataPipe.
uint8_t getDataPipeAddress(uint8_t dataPipe){
	switch (dataPipe){
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	69 f0       	breq	.+26     	; 0x204 <_Z18getDataPipeAddressh+0x1e>
 1ea:	28 f4       	brcc	.+10     	; 0x1f6 <_Z18getDataPipeAddressh+0x10>
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	41 f0       	breq	.+16     	; 0x200 <_Z18getDataPipeAddressh+0x1a>
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	71 f4       	brne	.+28     	; 0x210 <_Z18getDataPipeAddressh+0x2a>
 1f4:	0f c0       	rjmp	.+30     	; 0x214 <_Z18getDataPipeAddressh+0x2e>
 1f6:	84 30       	cpi	r24, 0x04	; 4
 1f8:	39 f0       	breq	.+14     	; 0x208 <_Z18getDataPipeAddressh+0x22>
 1fa:	85 30       	cpi	r24, 0x05	; 5
 1fc:	49 f4       	brne	.+18     	; 0x210 <_Z18getDataPipeAddressh+0x2a>
 1fe:	06 c0       	rjmp	.+12     	; 0x20c <_Z18getDataPipeAddressh+0x26>
		case 1:
			return (NRF_RX_ADDR_P1);
 200:	8b e0       	ldi	r24, 0x0B	; 11
 202:	08 95       	ret
			break;
		case 2:
			return (NRF_RX_ADDR_P2);
			break;
		case 3:
			return (NRF_RX_ADDR_P3);
 204:	8d e0       	ldi	r24, 0x0D	; 13
 206:	08 95       	ret
			break;
		case 4:
			return (NRF_RX_ADDR_P4);
 208:	8e e0       	ldi	r24, 0x0E	; 14
 20a:	08 95       	ret
			break;
		case 5:
			return (NRF_RX_ADDR_P5);
 20c:	8f e0       	ldi	r24, 0x0F	; 15
 20e:	08 95       	ret
			break;
		default:
			return (NRF_RX_ADDR_P0);
 210:	8a e0       	ldi	r24, 0x0A	; 10
 212:	08 95       	ret
	switch (dataPipe){
		case 1:
			return (NRF_RX_ADDR_P1);
			break;
		case 2:
			return (NRF_RX_ADDR_P2);
 214:	8c e0       	ldi	r24, 0x0C	; 12
			break;
		default:
			return (NRF_RX_ADDR_P0);
			break;
	}//end switch
}//end getDataPipeAddress
 216:	08 95       	ret

00000218 <_Z30getDataPipePayloadWidthAddressh>:

///@description	Returns the address of the dataPipe width.
///@param	dataPipe	The dataPipe index. 0-5.
///@returns	The address of the referenced dataPipe's width.
uint8_t getDataPipePayloadWidthAddress(uint8_t dataPipe){
	switch (dataPipe){
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	69 f0       	breq	.+26     	; 0x236 <_Z30getDataPipePayloadWidthAddressh+0x1e>
 21c:	28 f4       	brcc	.+10     	; 0x228 <_Z30getDataPipePayloadWidthAddressh+0x10>
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	41 f0       	breq	.+16     	; 0x232 <_Z30getDataPipePayloadWidthAddressh+0x1a>
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	71 f4       	brne	.+28     	; 0x242 <_Z30getDataPipePayloadWidthAddressh+0x2a>
 226:	0f c0       	rjmp	.+30     	; 0x246 <_Z30getDataPipePayloadWidthAddressh+0x2e>
 228:	84 30       	cpi	r24, 0x04	; 4
 22a:	39 f0       	breq	.+14     	; 0x23a <_Z30getDataPipePayloadWidthAddressh+0x22>
 22c:	85 30       	cpi	r24, 0x05	; 5
 22e:	49 f4       	brne	.+18     	; 0x242 <_Z30getDataPipePayloadWidthAddressh+0x2a>
 230:	06 c0       	rjmp	.+12     	; 0x23e <_Z30getDataPipePayloadWidthAddressh+0x26>
		case 1:
		return (NRF_RX_PW_P1);
 232:	82 e1       	ldi	r24, 0x12	; 18
 234:	08 95       	ret
		break;
		case 2:
		return (NRF_RX_PW_P2);
		break;
		case 3:
		return (NRF_RX_PW_P3);
 236:	84 e1       	ldi	r24, 0x14	; 20
 238:	08 95       	ret
		break;
		case 4:
		return (NRF_RX_PW_P4);
 23a:	85 e1       	ldi	r24, 0x15	; 21
 23c:	08 95       	ret
		break;
		case 5:
		return (NRF_RX_PW_P5);
 23e:	86 e1       	ldi	r24, 0x16	; 22
 240:	08 95       	ret
		break;
		default:
		return (NRF_RX_PW_P0);
 242:	81 e1       	ldi	r24, 0x11	; 17
 244:	08 95       	ret
	switch (dataPipe){
		case 1:
		return (NRF_RX_PW_P1);
		break;
		case 2:
		return (NRF_RX_PW_P2);
 246:	83 e1       	ldi	r24, 0x13	; 19
		break;
		default:
		return (NRF_RX_PW_P0);
		break;
	}//end switch
}//end getDataPipeAddress
 248:	08 95       	ret

0000024a <_ZN3NRF4readEh>:

///@description		Sets status = STATUS register
///@brief			Reads one byte from the specified register.
///@param reg		The register to be accessed.
///@returns			Data read from register.
uint8_t NRF::read(uint8_t reg){
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ec 01       	movw	r28, r24
 252:	16 2f       	mov	r17, r22
	uint8_t data;
	clearCSN();
 254:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z8clearCSNv>
		status = spiTransfer1byte(NRF_R_REGISTER | reg);
 258:	81 2f       	mov	r24, r17
 25a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <spiTransfer1byte>
 25e:	88 83       	st	Y, r24
		data = spiTransfer1byte(0x00);				//dummy byte
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 e5 00 	call	0x1ca	; 0x1ca <spiTransfer1byte>
 266:	c8 2f       	mov	r28, r24
	setCSN();
 268:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z6setCSNv>
	return data;
}
 26c:	8c 2f       	mov	r24, r28
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	08 95       	ret

00000276 <_ZN3NRF4readEhPhh>:
///@description		Sets status = STATUS register
///@brief			Reads multiple bytes from the specified register.
///@param reg		The register to be accessed.
///@param val		Pointer to values to be read.
///@param length	Number of bytes to be written.
void NRF::read(uint8_t reg, uint8_t * val, uint8_t length){
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	8c 01       	movw	r16, r24
 284:	e6 2e       	mov	r14, r22
 286:	ea 01       	movw	r28, r20
 288:	f2 2e       	mov	r15, r18
	clearCSN();
 28a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z8clearCSNv>
		status = spiTransfer1byte(NRF_R_REGISTER | reg);
 28e:	8e 2d       	mov	r24, r14
 290:	0e 94 e5 00 	call	0x1ca	; 0x1ca <spiTransfer1byte>
 294:	f8 01       	movw	r30, r16
 296:	80 83       	st	Z, r24
		spiRead(val, length);
 298:	6f 2d       	mov	r22, r15
 29a:	ce 01       	movw	r24, r28
 29c:	0e 94 c6 00 	call	0x18c	; 0x18c <spiRead>
	setCSN();
 2a0:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z6setCSNv>
}
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	08 95       	ret

000002b2 <_ZN3NRF5writeEh>:

///@description		Used for 1-byte commands that return no value after the STATUS byte.
///					Sets status = STATUS register
///@brief			Sends a 1-byte command into the assigned register.
///@param reg		The register to be accessed.
void NRF::write(uint8_t reg){
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	ec 01       	movw	r28, r24
 2ba:	16 2f       	mov	r17, r22
	clearCSN();
 2bc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z8clearCSNv>
		status = spiTransfer1byte(NRF_W_REGISTER | reg);
 2c0:	81 2f       	mov	r24, r17
 2c2:	80 62       	ori	r24, 0x20	; 32
 2c4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <spiTransfer1byte>
 2c8:	88 83       	st	Y, r24
	setCSN();
 2ca:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z6setCSNv>
}
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	08 95       	ret

000002d6 <_ZN3NRF5writeEhh>:
///@description		Used for registers that have 1-byte values written to them.
///					Sets status = STATUS register
///@brief			Writes 1 byte into the specified register.
///@param reg		The register to be accessed.
///@param data		The data you want written there.
void NRF::write(uint8_t reg, uint8_t data){
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	ec 01       	movw	r28, r24
 2e0:	06 2f       	mov	r16, r22
 2e2:	14 2f       	mov	r17, r20
	clearCSN();
 2e4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z8clearCSNv>
		status = spiTransfer1byte(NRF_W_REGISTER | reg);
 2e8:	80 2f       	mov	r24, r16
 2ea:	80 62       	ori	r24, 0x20	; 32
 2ec:	0e 94 e5 00 	call	0x1ca	; 0x1ca <spiTransfer1byte>
 2f0:	88 83       	st	Y, r24
		spiTransfer1byte(data);
 2f2:	81 2f       	mov	r24, r17
 2f4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <spiTransfer1byte>
	setCSN();
 2f8:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z6setCSNv>
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	08 95       	ret

00000306 <_ZN3NRF5writeEhPhh>:
///@description		Used for registers that have multiple bytes written to them.
///@brief			Writes multiple bytes into the specified register.
///@param reg		The register to be accessed
///@param val		Pointer to values to be written
///@param length	Number of bytes to be written
void NRF::write(uint8_t reg, uint8_t * data, uint8_t length){
 306:	ef 92       	push	r14
 308:	ff 92       	push	r15
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	8c 01       	movw	r16, r24
 314:	e6 2e       	mov	r14, r22
 316:	ea 01       	movw	r28, r20
 318:	f2 2e       	mov	r15, r18
	clearCSN();
 31a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z8clearCSNv>
		status = spiTransfer1byte(NRF_W_REGISTER | reg);
 31e:	8e 2d       	mov	r24, r14
 320:	80 62       	ori	r24, 0x20	; 32
 322:	0e 94 e5 00 	call	0x1ca	; 0x1ca <spiTransfer1byte>
 326:	f8 01       	movw	r30, r16
 328:	80 83       	st	Z, r24
		spiWrite(data, length);
 32a:	6f 2d       	mov	r22, r15
 32c:	ce 01       	movw	r24, r28
 32e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <spiWrite>
	setCSN();
 332:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z6setCSNv>
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	08 95       	ret

00000344 <_ZN3NRF4initEv>:
///@description		Initializes MCU pins, interrupt, and SPI module.				
///					Should be called during startup.
///@brief			Initializes MCU to communicate with nRF25L01 module.
void NRF::init(){
	//define CE and CSN as Outputs
	NRF_CE_DDR		|= (1<<NRF_CE_PIN);
 344:	20 9a       	sbi	0x04, 0	; 4
	NRF_CSN_DDR	|= (1<<NRF_CSN_PIN);
 346:	21 9a       	sbi	0x04, 1	; 4
	
	//default values for CE & CSN
	clearCE();
 348:	0e 94 ed 00 	call	0x1da	; 0x1da <_Z7clearCEv>
	setCSN();
 34c:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z6setCSNv>
		
	//////////////////////////////////////////////////////////////////////////
	//Interrupts
	//////////////////////////////////////////////////////////////////////////
	//External Interrupt Mask Register
	EIMSK |= (1<<INT0);	//turn on interrupt 0 (PD2)
 350:	e8 9a       	sbi	0x1d, 0	; 29
	
	////External Interrupt Control Register A
	EICRA = 0x02;		//Interrupt on falling edge of INT0
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	80 93 69 00 	sts	0x0069, r24
	*/
	//////////////////////////////////////////////////////////////////////////
	
	
	//Initialize SPI module
	spiInit();
 358:	0e 94 bd 00 	call	0x17a	; 0x17a <spiInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35c:	2f e7       	ldi	r18, 0x7F	; 127
 35e:	88 e3       	ldi	r24, 0x38	; 56
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	21 50       	subi	r18, 0x01	; 1
 364:	80 40       	sbci	r24, 0x00	; 0
 366:	90 40       	sbci	r25, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <_ZN3NRF4initEv+0x1e>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <_ZN3NRF4initEv+0x28>
 36c:	00 00       	nop
	
	_delay_ms(50);
	
	//Interrupt LED
	DDRB |= (1<<PB7);			//Set PB7 as output
 36e:	27 9a       	sbi	0x04, 7	; 4
 370:	08 95       	ret

00000372 <_ZN3NRF7flushTXEv>:
}	//init()

///@description		
///@brief			Flushes TX FIFO
void NRF::flushTX(){
	write(NRF_FLUSH_TX);
 372:	61 ee       	ldi	r22, 0xE1	; 225
 374:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_ZN3NRF5writeEh>
 378:	08 95       	ret

0000037a <_ZN3NRF7flushRXEv>:
}

///@description
///@brief			Flushes RX FIFO
void NRF::flushRX(){
	write(NRF_FLUSH_RX);
 37a:	62 ee       	ldi	r22, 0xE2	; 226
 37c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_ZN3NRF5writeEh>
 380:	08 95       	ret

00000382 <_ZN3NRF9setConfigEh>:

///@description 
///@brief			Sets the CONFIG register to specified value.
///@param val		Value to set CONFIG register to. 
void NRF::setConfig(uint8_t val){	
	write(NRF_CONFIG, val & 0x7F);
 382:	46 2f       	mov	r20, r22
 384:	4f 77       	andi	r20, 0x7F	; 127
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN3NRF5writeEhh>
 38c:	08 95       	ret

0000038e <_ZN3NRF9getConfigEv>:
///@description
///@brief			Gets the value of the CONFIG register.
///@returns			Value of the CONFIG register.
uint8_t NRF::getConfig(){
	uint8_t config;
	config = read(NRF_CONFIG);
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN3NRF4readEh>
	
	return(config);
	//return (read(NRF_CONFIG));	
	
}
 394:	08 95       	ret

00000396 <_ZN3NRF7powerUpEv>:
	irq &= 0x70;							//Mask valid values of irq
	setConfig((getConfig() & 0x0F) |(irq));
}
///@description		Sets the PWR_UP bit of the CONFIG register to high.
///@brief			Powers up the nRF.
void NRF::powerUp(){
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	ec 01       	movw	r28, r24
	setConfig (getConfig() | (1<<NRF_PWR_UP));
 39c:	0e 94 c7 01 	call	0x38e	; 0x38e <_ZN3NRF9getConfigEv>
 3a0:	68 2f       	mov	r22, r24
 3a2:	62 60       	ori	r22, 0x02	; 2
 3a4:	ce 01       	movw	r24, r28
 3a6:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN3NRF9setConfigEh>
}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <_ZN3NRF6setCRCEh>:
}

///@description	Cyclic redundancy check can either be off, 1-byte or 2-bytes.
///@brief		Sets up the CRC for the nRF.
///@param	crc	Valid values:	NRF_CRC_OFF, NRF_CRC_1BYTE, NRF_CRC_2BYTE
void NRF::setCRC(uint8_t crc){
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	ec 01       	movw	r28, r24
 3b8:	16 2f       	mov	r17, r22
	crc &= 0x03;
	setConfig((getConfig() & 0xF3) | (crc<<NRF_CRCO));
 3ba:	0e 94 c7 01 	call	0x38e	; 0x38e <_ZN3NRF9getConfigEv>
 3be:	83 7f       	andi	r24, 0xF3	; 243

///@description	Cyclic redundancy check can either be off, 1-byte or 2-bytes.
///@brief		Sets up the CRC for the nRF.
///@param	crc	Valid values:	NRF_CRC_OFF, NRF_CRC_1BYTE, NRF_CRC_2BYTE
void NRF::setCRC(uint8_t crc){
	crc &= 0x03;
 3c0:	61 2f       	mov	r22, r17
 3c2:	63 70       	andi	r22, 0x03	; 3
	setConfig((getConfig() & 0xF3) | (crc<<NRF_CRCO));
 3c4:	66 0f       	add	r22, r22
 3c6:	66 0f       	add	r22, r22
 3c8:	68 2b       	or	r22, r24
 3ca:	ce 01       	movw	r24, r28
 3cc:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN3NRF9setConfigEh>
}
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	08 95       	ret

000003d8 <_ZN3NRF7setModeEh>:

///@description
///@brief			Sets power up and RX/TX modes in CONFIG register.
///@returns			NRF_MODE_TX or NRF_MODE_RX
void NRF::setMode(uint8_t mode){
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	ec 01       	movw	r28, r24
 3e0:	16 2f       	mov	r17, r22
	uint8_t config = read(NRF_CONFIG);
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN3NRF4readEh>
	config &= 0x7E;			//mask unaltered bits
 3e8:	68 2f       	mov	r22, r24
 3ea:	6e 77       	andi	r22, 0x7E	; 126
	if (mode == NRF_MODE_RX)
 3ec:	11 11       	cpse	r17, r1
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <_ZN3NRF7setModeEh+0x1a>
	config |= (1<<NRF_PRIM_RX);
 3f0:	61 60       	ori	r22, 0x01	; 1
	setConfig(config);
 3f2:	ce 01       	movw	r24, r28
 3f4:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN3NRF9setConfigEh>
}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	08 95       	ret

00000400 <_ZN3NRF15setAddressWidthEh>:
///@brief			Sets the width of addresses for all data pipes.
///@param	addressWidth	Valid values: NRF_AW_3BYTES, NRF_AW_4BYTES,
///								NRF_AW_5BYTES
void NRF::setAddressWidth(uint8_t addressWidth){
	//clearCE();
	write(NRF_SETUP_AW, addressWidth & 0x03);
 400:	46 2f       	mov	r20, r22
 402:	43 70       	andi	r20, 0x03	; 3
 404:	63 e0       	ldi	r22, 0x03	; 3
 406:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN3NRF5writeEhh>
 40a:	08 95       	ret

0000040c <_ZN3NRF15setupRetransmitEh>:
///						0000 = 250uS, 0001 = 500uS .... 1111 = 4000uS 
///						(xxxx<<NRF_ARD) where xxxx is the 4-bit value
///						bits 3:0 are the Auto Retransmit Count.
///						0000 = disabled, 0001 = Up to 1 .... 1111 = Up to 15 Re-Transmit on fail of AA
///						(xxxx<<NRF_ARC) where xxxx is the 4-bit value
void NRF::setupRetransmit(uint8_t val){
 40c:	46 2f       	mov	r20, r22
	write(NRF_SETUP_RETR, val);
 40e:	64 e0       	ldi	r22, 0x04	; 4
 410:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN3NRF5writeEhh>
 414:	08 95       	ret

00000416 <_ZN3NRF10setChannelEh>:
///@description	Writes to the RF_CH register.
///				1 MHz steps.  Freq = 2400 + RF_CH [MHz].
///@brief		Sets the frequency channel NRF operates on.
///@param		ch	Channel.  Must be between 0 and 127(0x7F).
void NRF::setChannel(uint8_t ch){	
	write(NRF_RF_CH, ch & 0x7F);
 416:	46 2f       	mov	r20, r22
 418:	4f 77       	andi	r20, 0x7F	; 127
 41a:	65 e0       	ldi	r22, 0x05	; 5
 41c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN3NRF5writeEhh>
 420:	08 95       	ret

00000422 <_ZN3NRF7setupRFEh>:
///@param	val		Valid values: NRF_RF_DR_1MHZ, NRF_RF_DR_2MHZ,
///						NRF_RF_PWR_18DB, NRF_RF_PWR_12DB,
///						NRF_RF_PWR_6DB, NRF_RF_PWR_0DB,
///						NRF_LNA_HCURR
void	NRF::setupRF(uint8_t val){
	write(NRF_RF_SETUP, val & 0xAE);
 422:	46 2f       	mov	r20, r22
 424:	4e 7a       	andi	r20, 0xAE	; 174
 426:	66 e0       	ldi	r22, 0x06	; 6
 428:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN3NRF5writeEhh>
 42c:	08 95       	ret

0000042e <_ZN3NRF14clearInterruptEh>:
///@description
///@brief		Clears specified interrupt.
///@param		interrupt	Valid values are: NRF_RX_DR, NRF_TX_DS,
///								NRF_MAX_RT
void NRF::clearInterrupt(uint8_t interrupt){
	write(NRF_STATUS, 1<<interrupt);
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	a9 01       	movw	r20, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <_ZN3NRF14clearInterruptEh+0xc>
 436:	44 0f       	add	r20, r20
 438:	55 1f       	adc	r21, r21
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <_ZN3NRF14clearInterruptEh+0x8>
 43e:	67 e0       	ldi	r22, 0x07	; 7
 440:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN3NRF5writeEhh>
 444:	08 95       	ret

00000446 <_ZN3NRF12setRXAddressEhPh>:
}

///@description Sets the receive address of any data pipe.
///@param	dataPipe	Value 0 through 5 representing the index of the datapipe to be addressed.
///@param	address	The 5-byte address to assign to data pipe 0.
void NRF::setRXAddress(uint8_t dataPipe, uint8_t * address){
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	ec 01       	movw	r28, r24
 450:	86 2f       	mov	r24, r22
 452:	8a 01       	movw	r16, r20
	//clearCE();
	write(getDataPipeAddress(dataPipe), address, 5);
 454:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z18getDataPipeAddressh>
 458:	25 e0       	ldi	r18, 0x05	; 5
 45a:	a8 01       	movw	r20, r16
 45c:	68 2f       	mov	r22, r24
 45e:	ce 01       	movw	r24, r28
 460:	0e 94 83 01 	call	0x306	; 0x306 <_ZN3NRF5writeEhPhh>
	//setCE();
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	08 95       	ret

0000046e <_ZN3NRF12setTXAddressEPh>:
///					Set the receive address of data pipe 0 to the same address to handle
///					automatic acknowledge if this is a PTX device with
///					Enhanced Shockburst enabled. (see NRF datasheet)
///@brief	Sets the transmit address.
///@param	address	The 5-byte address to assign to data pipe 0.
void NRF::setTXAddress(uint8_t * address){
 46e:	ab 01       	movw	r20, r22
	//clearCE();
	write(NRF_TX_ADDR, address, 5);
 470:	25 e0       	ldi	r18, 0x05	; 5
 472:	60 e1       	ldi	r22, 0x10	; 16
 474:	0e 94 83 01 	call	0x306	; 0x306 <_ZN3NRF5writeEhPhh>
 478:	08 95       	ret

0000047a <_ZN3NRF16setPayloadLengthEh>:


///@description		1-32 bytes long.
///@brief			Sets the length of the payload to be in data pipe 0.
void NRF::setPayloadLength(uint8_t length){
	payloadLength = length & 0x3F;			//bits 7:6 must be 0
 47a:	46 2f       	mov	r20, r22
 47c:	4f 73       	andi	r20, 0x3F	; 63
 47e:	fc 01       	movw	r30, r24
 480:	41 83       	std	Z+1, r20	; 0x01
	write(NRF_RX_PW_P0, payloadLength);
 482:	61 e1       	ldi	r22, 0x11	; 17
 484:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN3NRF5writeEhh>
 488:	08 95       	ret

0000048a <_ZN3NRFC1Ehh>:
}

///@description	Custom constructor.
///@param ch		Custom channel.
///@param pl		Custom payload length.
NRF::NRF(uint8_t ch, uint8_t pl){
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	ec 01       	movw	r28, r24
 494:	06 2f       	mov	r16, r22
 496:	14 2f       	mov	r17, r20
	
	init();
 498:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN3NRF4initEv>
	setChannel(ch);					//set channel
 49c:	60 2f       	mov	r22, r16
 49e:	ce 01       	movw	r24, r28
 4a0:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN3NRF10setChannelEh>
	setPayloadLength(pl);			//set length of payloads (RX)
 4a4:	61 2f       	mov	r22, r17
 4a6:	ce 01       	movw	r24, r28
 4a8:	0e 94 3d 02 	call	0x47a	; 0x47a <_ZN3NRF16setPayloadLengthEh>
	//setMode(NRF_MODE_RX);		//start receiving
}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	1f 91       	pop	r17
 4b2:	0f 91       	pop	r16
 4b4:	08 95       	ret

000004b6 <_ZN3NRF16setPayloadLengthEhh>:

///@description		1-32 bytes long.
///@brief			Sets the length of the payload to be in specified data pipe.
///@param dataPipe	Index of data pipe (0-5).
///@param length	Length of specified data pipe (1-32).
void NRF::setPayloadLength(uint8_t dataPipe, uint8_t length){
 4b6:	1f 93       	push	r17
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	ec 01       	movw	r28, r24
 4be:	86 2f       	mov	r24, r22
	payloadLength = length & 0x3F;			//bits 7:6 must be 0
 4c0:	14 2f       	mov	r17, r20
 4c2:	1f 73       	andi	r17, 0x3F	; 63
 4c4:	19 83       	std	Y+1, r17	; 0x01
	write(getDataPipePayloadWidthAddress(dataPipe), payloadLength);
 4c6:	0e 94 0c 01 	call	0x218	; 0x218 <_Z30getDataPipePayloadWidthAddressh>
 4ca:	41 2f       	mov	r20, r17
 4cc:	68 2f       	mov	r22, r24
 4ce:	ce 01       	movw	r24, r28
 4d0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN3NRF5writeEhh>
}
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	08 95       	ret

000004dc <_ZN3NRF9isTXEmptyEv>:

///@description
///@brief		Returns empty status of tX_FIFO buffer.
///@returns		1 if TX FIFO buffer is empty, 0 if data in TX FIFO buffer.
uint8_t NRF::isTXEmpty(){
	return ((read(NRF_FIFO_STATUS) & (1<<NRF_TX_EMPTY))>>NRF_TX_EMPTY);
 4dc:	67 e1       	ldi	r22, 0x17	; 23
 4de:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN3NRF4readEh>
}
 4e2:	82 95       	swap	r24
 4e4:	81 70       	andi	r24, 0x01	; 1
 4e6:	08 95       	ret

000004e8 <_ZN3NRF10getPayloadEPh>:

///@description	Read RX-Payload, length is determined by function setPayloadLength().
///				Starts with byte 0.  Payload is deleted by NRF after it is read.
///				Data Ready (RX_DR) bit of STATUS register is reset.  Used in RX mode.
///@param		datain		Pointer to be filled with payload. 
void NRF::getPayload(uint8_t * datain){
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	ec 01       	movw	r28, r24
 4ee:	ab 01       	movw	r20, r22
	 read(NRF_R_RX_PAYLOAD, datain, payloadLength);
 4f0:	29 81       	ldd	r18, Y+1	; 0x01
 4f2:	61 e6       	ldi	r22, 0x61	; 97
 4f4:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN3NRF4readEhPhh>
	 write(NRF_STATUS,(1<<NRF_RX_DR));	// Reset status register	
 4f8:	40 e4       	ldi	r20, 0x40	; 64
 4fa:	67 e0       	ldi	r22, 0x07	; 7
 4fc:	ce 01       	movw	r24, r28
 4fe:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN3NRF5writeEhh>
}
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	08 95       	ret

00000508 <_ZN3NRF11sendPayloadEPhh>:
///				Always starts at byte 0 used in TX payload.
///				Adds to TX FIFO if not empty.
///@brief		Sends out a multiple-byte payload.
///@param		dataout		Pointer to data to be sent.
///@param		length		Number of bytes in dataout.
void NRF::sendPayload(uint8_t * dataout, uint8_t length){
 508:	ff 92       	push	r15
 50a:	0f 93       	push	r16
 50c:	1f 93       	push	r17
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	ec 01       	movw	r28, r24
 514:	8b 01       	movw	r16, r22
 516:	f4 2e       	mov	r15, r20
	
//is this necessary?											
	//clearCE();								// Put nRF into standby-I mode

		powerUp();
 518:	0e 94 cb 01 	call	0x396	; 0x396 <_ZN3NRF7powerUpEv>
		setMode(NRF_MODE_TX);			// Set to transmitter mode
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	ce 01       	movw	r24, r28
 520:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_ZN3NRF7setModeEh>
		//flushTX();							// Flush TX FIFO
		write(NRF_W_TX_PAYLOAD, 
				dataout, length & 0x1F);	//write payload
 524:	2f 2d       	mov	r18, r15
 526:	2f 71       	andi	r18, 0x1F	; 31
 528:	a8 01       	movw	r20, r16
 52a:	60 ea       	ldi	r22, 0xA0	; 160
 52c:	ce 01       	movw	r24, r28
 52e:	0e 94 83 01 	call	0x306	; 0x306 <_ZN3NRF5writeEhPhh>
	setCE();								// Start transmission
 532:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <_Z5setCEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 536:	85 e3       	ldi	r24, 0x35	; 53
 538:	8a 95       	dec	r24
 53a:	f1 f7       	brne	.-4      	; 0x538 <_ZN3NRF11sendPayloadEPhh+0x30>
 53c:	00 00       	nop
	_delay_us(20);
	clearCE();
 53e:	0e 94 ed 00 	call	0x1da	; 0x1da <_Z7clearCEv>
}
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	08 95       	ret

0000054e <__vector_1>:
//////////////////////////////////////////////////////////////////////////
//Interrupt
//////////////////////////////////////////////////////////////////////////

//Should this whole function be in the main.cpp file?
ISR(INT0_vect){
 54e:	1f 92       	push	r1
 550:	0f 92       	push	r0
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	0f 92       	push	r0
 556:	11 24       	eor	r1, r1
 558:	2f 93       	push	r18
 55a:	3f 93       	push	r19
 55c:	4f 93       	push	r20
 55e:	5f 93       	push	r21
 560:	6f 93       	push	r22
 562:	7f 93       	push	r23
 564:	8f 93       	push	r24
 566:	9f 93       	push	r25
 568:	af 93       	push	r26
 56a:	bf 93       	push	r27
 56c:	cf 93       	push	r28
 56e:	ef 93       	push	r30
 570:	ff 93       	push	r31
	extern uint8_t payload[];
	uint8_t config;
	
	asm volatile ("cli"::);		//deactivate interrupts
 572:	f8 94       	cli
	PORTB |= (1<<PB7);		//Turn on LED				//testing
 574:	2f 9a       	sbi	0x05, 7	; 5
	//				Write 1 to clear bit.
	//		MAX_RT	Maximum number of TX retransmits interrupt
	//				Write 1 to clear bit. If MAX_RT is asserted it must
	//				be cleared to enable further communication.
	
	config = transmitter.getConfig();	//this will also update status
 576:	82 e1       	ldi	r24, 0x12	; 18
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 c7 01 	call	0x38e	; 0x38e <_ZN3NRF9getConfigEv>
 57e:	c8 2f       	mov	r28, r24
	
	//Data Sent
	//TX_DS is not disabled			and			TX_DS caused the Interrupt
	if (!(config & (1<<NRF_MASK_TX_DS)) && (transmitter.status &  (1<< NRF_TX_DS )) ) {
 580:	85 fd       	sbrc	r24, 5
 582:	10 c0       	rjmp	.+32     	; 0x5a4 <__vector_1+0x56>
 584:	80 91 12 01 	lds	r24, 0x0112
 588:	85 ff       	sbrs	r24, 5
 58a:	0c c0       	rjmp	.+24     	; 0x5a4 <__vector_1+0x56>
		
		// The payload should be removed from the TX FIFO automagically
		
		//put into standby-I mode if TX FIFO is empty
		if (transmitter.isTXEmpty())
 58c:	82 e1       	ldi	r24, 0x12	; 18
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_ZN3NRF9isTXEmptyEv>
 594:	81 11       	cpse	r24, r1
		clearCE();
 596:	0e 94 ed 00 	call	0x1da	; 0x1da <_Z7clearCEv>
		
		//clear interrupt
		transmitter.clearInterrupt(NRF_TX_DS);
 59a:	65 e0       	ldi	r22, 0x05	; 5
 59c:	82 e1       	ldi	r24, 0x12	; 18
 59e:	91 e0       	ldi	r25, 0x01	; 1
 5a0:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN3NRF14clearInterruptEh>
	}
	
	//Data Ready
	//RX_DR is not disabled
	if (!(config & (1<<NRF_MASK_RX_DR)) && (transmitter.status &  (1<< NRF_RX_DR )) )  {
 5a4:	c6 fd       	sbrc	r28, 6
 5a6:	0f c0       	rjmp	.+30     	; 0x5c6 <__vector_1+0x78>
 5a8:	80 91 12 01 	lds	r24, 0x0112
 5ac:	86 ff       	sbrs	r24, 6
 5ae:	0b c0       	rjmp	.+22     	; 0x5c6 <__vector_1+0x78>
		
		//TODO:
		//Data is ready, read the data
		transmitter.getPayload(payload);
 5b0:	6c e0       	ldi	r22, 0x0C	; 12
 5b2:	71 e0       	ldi	r23, 0x01	; 1
 5b4:	82 e1       	ldi	r24, 0x12	; 18
 5b6:	91 e0       	ldi	r25, 0x01	; 1
 5b8:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN3NRF10getPayloadEPh>
		//Should the RX FIFO be flushed here?
		
		//clear interrupt
		transmitter.clearInterrupt(NRF_RX_DR);
 5bc:	66 e0       	ldi	r22, 0x06	; 6
 5be:	82 e1       	ldi	r24, 0x12	; 18
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN3NRF14clearInterruptEh>
	}
	
	//Maximum Retransmits
	//MAX_RT is not disabled	and		MAX_RT interrupt flag is set
	if (!(config & (1<<NRF_MASK_MAX_RT)) && (transmitter.status &  (1<< NRF_MAX_RT)) )  {
 5c6:	c4 fd       	sbrc	r28, 4
 5c8:	09 c0       	rjmp	.+18     	; 0x5dc <__vector_1+0x8e>
 5ca:	80 91 12 01 	lds	r24, 0x0112
 5ce:	84 ff       	sbrs	r24, 4
 5d0:	05 c0       	rjmp	.+10     	; 0x5dc <__vector_1+0x8e>
		//TODO:
		
		//Max retries has been reached
		
		//clear interrupt
		transmitter.clearInterrupt(NRF_MAX_RT);
 5d2:	64 e0       	ldi	r22, 0x04	; 4
 5d4:	82 e1       	ldi	r24, 0x12	; 18
 5d6:	91 e0       	ldi	r25, 0x01	; 1
 5d8:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN3NRF14clearInterruptEh>
	//////////////////////////////////////////////////////////////////////////
	//TODO: test - take this out
	//payload[0] = 0x42;
	//////////////////////////////////////////////////////////////////////////
	
	asm volatile ("sei"::);		//activate interrupts
 5dc:	78 94       	sei
}
 5de:	ff 91       	pop	r31
 5e0:	ef 91       	pop	r30
 5e2:	cf 91       	pop	r28
 5e4:	bf 91       	pop	r27
 5e6:	af 91       	pop	r26
 5e8:	9f 91       	pop	r25
 5ea:	8f 91       	pop	r24
 5ec:	7f 91       	pop	r23
 5ee:	6f 91       	pop	r22
 5f0:	5f 91       	pop	r21
 5f2:	4f 91       	pop	r20
 5f4:	3f 91       	pop	r19
 5f6:	2f 91       	pop	r18
 5f8:	0f 90       	pop	r0
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	0f 90       	pop	r0
 5fe:	1f 90       	pop	r1
 600:	18 95       	reti

00000602 <InitNunchuk>:
#define READ 0x01
#define WRITE 0x00

void InitNunchuk(void){
	
	i2c_init();
 602:	0e 94 5f 00 	call	0xbe	; 0xbe <i2c_init>
    i2c_start(NUNCHUK_ADDR);       
 606:	84 ea       	ldi	r24, 0xA4	; 164
 608:	0e 94 65 00 	call	0xca	; 0xca <i2c_start>
    i2c_write(0xF0);
 60c:	80 ef       	ldi	r24, 0xF0	; 240
 60e:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_write>
    i2c_write(0x55);
 612:	85 e5       	ldi	r24, 0x55	; 85
 614:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_write>
    i2c_stop();
 618:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_stop>
    i2c_start(NUNCHUK_ADDR);
 61c:	84 ea       	ldi	r24, 0xA4	; 164
 61e:	0e 94 65 00 	call	0xca	; 0xca <i2c_start>
    i2c_write(0xFB);
 622:	8b ef       	ldi	r24, 0xFB	; 251
 624:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_write>
    i2c_write(0x00);
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_write>
    i2c_stop();
 62e:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_stop>
 632:	08 95       	ret

00000634 <ReadNunchuk>:
}

// Nunchuk Read: Read the six bytes of data from the nunchuk. The read must be
// preceded by sending a zero to the nunchuk.
void ReadNunchuk(unsigned char* array) {
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	ec 01       	movw	r28, r24
    
    i2c_start(NUNCHUK_ADDR);
 63a:	84 ea       	ldi	r24, 0xA4	; 164
 63c:	0e 94 65 00 	call	0xca	; 0xca <i2c_start>
    i2c_write(0x00);
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_write>
    i2c_stop();                  
 646:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 64a:	8f ec       	ldi	r24, 0xCF	; 207
 64c:	97 e0       	ldi	r25, 0x07	; 7
 64e:	01 97       	sbiw	r24, 0x01	; 1
 650:	f1 f7       	brne	.-4      	; 0x64e <ReadNunchuk+0x1a>
 652:	00 c0       	rjmp	.+0      	; 0x654 <ReadNunchuk+0x20>
 654:	00 00       	nop
    _delay_ms(1);
	    
    i2c_start(NUNCHUK_ADDR | 0x01);
 656:	85 ea       	ldi	r24, 0xA5	; 165
 658:	0e 94 65 00 	call	0xca	; 0xca <i2c_start>
    array[0] = i2c_readAck();
 65c:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_readAck>
 660:	88 83       	st	Y, r24
    array[1] = i2c_readAck();
 662:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_readAck>
 666:	89 83       	std	Y+1, r24	; 0x01
    array[2] = i2c_readAck();
 668:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_readAck>
 66c:	8a 83       	std	Y+2, r24	; 0x02
    array[3] = i2c_readAck();
 66e:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_readAck>
 672:	8b 83       	std	Y+3, r24	; 0x03
    array[4] = i2c_readAck();
 674:	0e 94 a7 00 	call	0x14e	; 0x14e <i2c_readAck>
 678:	8c 83       	std	Y+4, r24	; 0x04
    array[5] = i2c_readNak();
 67a:	0e 94 b2 00 	call	0x164	; 0x164 <i2c_readNak>
 67e:	8d 83       	std	Y+5, r24	; 0x05
    i2c_stop();                  
 680:	0e 94 8c 00 	call	0x118	; 0x118 <i2c_stop>
}//ReadNunchuk
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	08 95       	ret

0000068a <_Z4initv>:
NRF transmitter(1,6);
uint8_t payload[6];

unsigned char nunchuk[6]={0,1,2,3,4,5};
	
void init(void){
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	00 d0       	rcall	.+0      	; 0x690 <_Z4initv+0x6>
 690:	00 d0       	rcall	.+0      	; 0x692 <_Z4initv+0x8>
 692:	1f 92       	push	r1
 694:	cd b7       	in	r28, 0x3d	; 61
 696:	de b7       	in	r29, 0x3e	; 62
	uint8_t address[5] = {0x42,0x42,0x42,0x42,0x42};
 698:	85 e0       	ldi	r24, 0x05	; 5
 69a:	e6 e0       	ldi	r30, 0x06	; 6
 69c:	f1 e0       	ldi	r31, 0x01	; 1
 69e:	de 01       	movw	r26, r28
 6a0:	11 96       	adiw	r26, 0x01	; 1
 6a2:	01 90       	ld	r0, Z+
 6a4:	0d 92       	st	X+, r0
 6a6:	8a 95       	dec	r24
 6a8:	e1 f7       	brne	.-8      	; 0x6a2 <_Z4initv+0x18>
	//////////////////////////////////////////////////////////////////////////
	//nRF inits
	//////////////////////////////////////////////////////////////////////////
	
	//setup channel
	transmitter.setChannel(1);
 6aa:	61 e0       	ldi	r22, 0x01	; 1
 6ac:	82 e1       	ldi	r24, 0x12	; 18
 6ae:	91 e0       	ldi	r25, 0x01	; 1
 6b0:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN3NRF10setChannelEh>
	
	//set payload length of data pipe 0 (6 bytes per package)
	transmitter.setPayloadLength(0,6);
 6b4:	46 e0       	ldi	r20, 0x06	; 6
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	82 e1       	ldi	r24, 0x12	; 18
 6ba:	91 e0       	ldi	r25, 0x01	; 1
 6bc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN3NRF16setPayloadLengthEhh>
	
	//set receiver address (set RX_ADDR_P0 = TX_ADDR if EN_AA is enabled!!)
	transmitter.setRXAddress(0,address);
 6c0:	ae 01       	movw	r20, r28
 6c2:	4f 5f       	subi	r20, 0xFF	; 255
 6c4:	5f 4f       	sbci	r21, 0xFF	; 255
 6c6:	60 e0       	ldi	r22, 0x00	; 0
 6c8:	82 e1       	ldi	r24, 0x12	; 18
 6ca:	91 e0       	ldi	r25, 0x01	; 1
 6cc:	0e 94 23 02 	call	0x446	; 0x446 <_ZN3NRF12setRXAddressEhPh>
	//RX_ADDR_P1-05
	//Only one RX address is being used for this application.
	//transmitter.setRXAddress(1,address1);   //etc, etc
	
	//TX_ADDR this needs to be the same address as is assigned to the receiving device's RX_ADDR
	transmitter.setTXAddress(address);
 6d0:	be 01       	movw	r22, r28
 6d2:	6f 5f       	subi	r22, 0xFF	; 255
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255
 6d6:	82 e1       	ldi	r24, 0x12	; 18
 6d8:	91 e0       	ldi	r25, 0x01	; 1
 6da:	0e 94 37 02 	call	0x46e	; 0x46e <_ZN3NRF12setTXAddressEPh>
		//EN_AA - enable auto-acknowledgments on data pipe 0
		//	default is all on (0x3F)
		//transmitter.enableAutoAcknowledge(1<<NRF_ENAA_P0);	
		
		//SETUP_AW sets address width for all data pipes
		transmitter.setAddressWidth(NRF_AW_5BYTES);
 6de:	63 e0       	ldi	r22, 0x03	; 3
 6e0:	82 e1       	ldi	r24, 0x12	; 18
 6e2:	91 e0       	ldi	r25, 0x01	; 1
 6e4:	0e 94 00 02 	call	0x400	; 0x400 <_ZN3NRF15setAddressWidthEh>
		
		//choose power mode and data speed (1 vs 2 MHz or 250KHz)
		transmitter.setupRF(NRF_RF_DR_2MHZ | NRF_RF_PWR_0DB);
 6e8:	6e e0       	ldi	r22, 0x0E	; 14
 6ea:	82 e1       	ldi	r24, 0x12	; 18
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	0e 94 11 02 	call	0x422	; 0x422 <_ZN3NRF7setupRFEh>
		
		//disable retransmit, nunchuk updates continually, lost data is trivial
		transmitter.setupRetransmit(0x00);		
 6f2:	60 e0       	ldi	r22, 0x00	; 0
 6f4:	82 e1       	ldi	r24, 0x12	; 18
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	0e 94 06 02 	call	0x40c	; 0x40c <_ZN3NRF15setupRetransmitEh>
	
		//mask interrupts - default values.  Commented out as a placeholder.
		//transmitter.maskIRQ(0<<NRF_MASK_RX_DR | 0<<NRF_MASK_TX_DS | 0<<NRF_MASK_MAX_RT);
		
		//Set CRC to 2-byte
		transmitter.setCRC(NRF_CRC_2BYTE);
 6fc:	63 e0       	ldi	r22, 0x03	; 3
 6fe:	82 e1       	ldi	r24, 0x12	; 18
 700:	91 e0       	ldi	r25, 0x01	; 1
 702:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_ZN3NRF6setCRCEh>
		
		//set device to be primary transmitter and power up.
		transmitter.setMode(NRF_MODE_TX);
 706:	61 e0       	ldi	r22, 0x01	; 1
 708:	82 e1       	ldi	r24, 0x12	; 18
 70a:	91 e0       	ldi	r25, 0x01	; 1
 70c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_ZN3NRF7setModeEh>
 710:	2f ef       	ldi	r18, 0xFF	; 255
 712:	80 e7       	ldi	r24, 0x70	; 112
 714:	92 e0       	ldi	r25, 0x02	; 2
 716:	21 50       	subi	r18, 0x01	; 1
 718:	80 40       	sbci	r24, 0x00	; 0
 71a:	90 40       	sbci	r25, 0x00	; 0
 71c:	e1 f7       	brne	.-8      	; 0x716 <_Z4initv+0x8c>
 71e:	00 c0       	rjmp	.+0      	; 0x720 <_Z4initv+0x96>
 720:	00 00       	nop
		_delay_ms(100);
		transmitter.powerUp();	
 722:	82 e1       	ldi	r24, 0x12	; 18
 724:	91 e0       	ldi	r25, 0x01	; 1
 726:	0e 94 cb 01 	call	0x396	; 0x396 <_ZN3NRF7powerUpEv>
}
 72a:	0f 90       	pop	r0
 72c:	0f 90       	pop	r0
 72e:	0f 90       	pop	r0
 730:	0f 90       	pop	r0
 732:	0f 90       	pop	r0
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	08 95       	ret

0000073a <main>:

int main(void)
{
	uint8_t config = 0;
	init();
 73a:	0e 94 45 03 	call	0x68a	; 0x68a <_Z4initv>
	InitNunchuk();	
 73e:	0e 94 01 03 	call	0x602	; 0x602 <InitNunchuk>
	heartbeatInit();
 742:	57 9a       	sbi	0x0a, 7	; 10
	
	//toggle interrupt LED check
	PORTB |= (1<<PB7);
 744:	2f 9a       	sbi	0x05, 7	; 5
 746:	2f ef       	ldi	r18, 0xFF	; 255
 748:	80 e7       	ldi	r24, 0x70	; 112
 74a:	92 e0       	ldi	r25, 0x02	; 2
 74c:	21 50       	subi	r18, 0x01	; 1
 74e:	80 40       	sbci	r24, 0x00	; 0
 750:	90 40       	sbci	r25, 0x00	; 0
 752:	e1 f7       	brne	.-8      	; 0x74c <main+0x12>
 754:	00 c0       	rjmp	.+0      	; 0x756 <main+0x1c>
 756:	00 00       	nop
	_delay_ms(100);
	PORTB &= ~(1<<PB7);
 758:	2f 98       	cbi	0x05, 7	; 5
	
	//heartbeat LED check
	heartbeatOn();
 75a:	5f 9a       	sbi	0x0b, 7	; 11
 75c:	2f ef       	ldi	r18, 0xFF	; 255
 75e:	80 e7       	ldi	r24, 0x70	; 112
 760:	92 e0       	ldi	r25, 0x02	; 2
 762:	21 50       	subi	r18, 0x01	; 1
 764:	80 40       	sbci	r24, 0x00	; 0
 766:	90 40       	sbci	r25, 0x00	; 0
 768:	e1 f7       	brne	.-8      	; 0x762 <main+0x28>
 76a:	00 c0       	rjmp	.+0      	; 0x76c <main+0x32>
 76c:	00 00       	nop
	_delay_ms(100);
	heartbeatOff();
 76e:	5f 98       	cbi	0x0b, 7	; 11
	
	asm volatile ("sei"::);		//activate interrupts
 770:	78 94       	sei
    while(1)
    {
		//check if nRF has been reset to defaults, then reinitialize if necessary
		config = transmitter.getConfig();
 772:	82 e1       	ldi	r24, 0x12	; 18
 774:	91 e0       	ldi	r25, 0x01	; 1
 776:	0e 94 c7 01 	call	0x38e	; 0x38e <_ZN3NRF9getConfigEv>
		if ((config & 0x0E) != 0x0E) init();
 77a:	8e 70       	andi	r24, 0x0E	; 14
 77c:	8e 30       	cpi	r24, 0x0E	; 14
 77e:	11 f0       	breq	.+4      	; 0x784 <main+0x4a>
 780:	0e 94 45 03 	call	0x68a	; 0x68a <_Z4initv>
		
        transmitter.flushRX();
 784:	82 e1       	ldi	r24, 0x12	; 18
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN3NRF7flushRXEv>
		transmitter.flushTX();			
 78c:	82 e1       	ldi	r24, 0x12	; 18
 78e:	91 e0       	ldi	r25, 0x01	; 1
 790:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN3NRF7flushTXEv>
		transmitter.sendPayload(nunchuk, 6);
 794:	46 e0       	ldi	r20, 0x06	; 6
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	71 e0       	ldi	r23, 0x01	; 1
 79a:	82 e1       	ldi	r24, 0x12	; 18
 79c:	91 e0       	ldi	r25, 0x01	; 1
 79e:	0e 94 84 02 	call	0x508	; 0x508 <_ZN3NRF11sendPayloadEPhh>
		//_delay_ms(10);
				
		PORTB &= ~(1<<PB7);			//turn off interrupt LED
 7a2:	2f 98       	cbi	0x05, 7	; 5
		//heartbeatOn();
		//_delay_ms(1000);
		//heartbeatOff();
		//_delay_ms(1000);
		
		asm volatile ("cli"::);		//deactivate interrupts
 7a4:	f8 94       	cli
		ReadNunchuk(nunchuk);
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	91 e0       	ldi	r25, 0x01	; 1
 7aa:	0e 94 1a 03 	call	0x634	; 0x634 <ReadNunchuk>
		asm volatile ("sei"::);		//activate interrupts
 7ae:	78 94       	sei
	heartbeatOn();
	_delay_ms(100);
	heartbeatOff();
	
	asm volatile ("sei"::);		//activate interrupts
    while(1)
 7b0:	e0 cf       	rjmp	.-64     	; 0x772 <main+0x38>

000007b2 <_GLOBAL__sub_I_transmitter>:
#define heartbeatOn()		PORTD |= (1<<PD7)
#define heartbeatOff()		PORTD &= ~(1<<PD7)

//declare transmitter as global for interrupts
//channel 1, payload length 6
NRF transmitter(1,6);
 7b2:	46 e0       	ldi	r20, 0x06	; 6
 7b4:	61 e0       	ldi	r22, 0x01	; 1
 7b6:	82 e1       	ldi	r24, 0x12	; 18
 7b8:	91 e0       	ldi	r25, 0x01	; 1
 7ba:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN3NRFC1Ehh>
 7be:	08 95       	ret

000007c0 <__tablejump2__>:
 7c0:	ee 0f       	add	r30, r30
 7c2:	ff 1f       	adc	r31, r31

000007c4 <__tablejump__>:
 7c4:	05 90       	lpm	r0, Z+
 7c6:	f4 91       	lpm	r31, Z
 7c8:	e0 2d       	mov	r30, r0
 7ca:	09 94       	ijmp

000007cc <_exit>:
 7cc:	f8 94       	cli

000007ce <__stop_program>:
 7ce:	ff cf       	rjmp	.-2      	; 0x7ce <__stop_program>
