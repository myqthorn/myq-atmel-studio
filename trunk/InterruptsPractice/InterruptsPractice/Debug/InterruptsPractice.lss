
InterruptsPractice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000182  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000216  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000097b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002d5  00000000  00000000  000009ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001a1  00000000  00000000  00000cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000211  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000078  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000175  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000121  00000000  00000000  00001261  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00001382  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 98 00 	call	0x130	; 0x130 <main>
  88:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
			
		}
	}
}

	ISR(INT0_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	97 e2       	ldi	r25, 0x27	; 39
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <__vector_1+0x12>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <__vector_1+0x18>
  a8:	00 00       	nop
		//to debounce switch, wait 20ms, then check for low condition again
		_delay_ms(5);
		if (!(PIND & (1<<PD2))) 
  aa:	4a 99       	sbic	0x09, 2	; 9
  ac:	06 c0       	rjmp	.+12     	; 0xba <__vector_1+0x2a>
			button_was_pressed = 1;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	90 93 01 01 	sts	0x0101, r25
  b6:	80 93 00 01 	sts	0x0100, r24
		
	}
  ba:	9f 91       	pop	r25
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <EEPROM_write>:
	//good idea to disable interrupts before running this to avoid
	//failing to write
	void EEPROM_write(unsigned int address, unsigned char data){
		
		//wait for completion of previous write
		while (EECR & (1<<EEPE));
  c8:	f9 99       	sbic	0x1f, 1	; 31
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <EEPROM_write>
		
		//setup address and data registers
		EEAR = address;
  cc:	92 bd       	out	0x22, r25	; 34
  ce:	81 bd       	out	0x21, r24	; 33
		EEDR = data;
  d0:	60 bd       	out	0x20, r22	; 32
		
		//write a logical 1 to EEMPE
		EECR |= (1<<EEMPE);
  d2:	fa 9a       	sbi	0x1f, 2	; 31
		
		//start EEPROM write by setting EEPE
		//(this must be done within 4 clock cycles of setting EEMPE)
		EECR |= (1<<EEPE);
  d4:	f9 9a       	sbi	0x1f, 1	; 31
  d6:	08 95       	ret

000000d8 <EEPROM_read>:
	
	
	unsigned char EEPROM_read(unsigned int address){
		
		//wait for completion of previous write
		while (EECR & (1<<EEPE));
  d8:	f9 99       	sbic	0x1f, 1	; 31
  da:	fe cf       	rjmp	.-4      	; 0xd8 <EEPROM_read>
		
		//setup address register
		EEAR = address;
  dc:	92 bd       	out	0x22, r25	; 34
  de:	81 bd       	out	0x21, r24	; 33
		
		//start EEPROM read by setting EERE
		EECR |= (1<<EERE);
  e0:	f8 9a       	sbi	0x1f, 0	; 31
		
		//return data from data register
		return EEDR;
  e2:	80 b5       	in	r24, 0x20	; 32
		
		
	}
  e4:	08 95       	ret

000000e6 <blinkLight>:
	
	void blinkLight(unsigned char count){
		
		for (int i=0;i<count;i++){
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	18 16       	cp	r1, r24
  ea:	19 06       	cpc	r1, r25
  ec:	04 f5       	brge	.+64     	; 0x12e <blinkLight+0x48>
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
			PORTB ^= (1<<PB5);		//toggle LED
  f2:	40 e2       	ldi	r20, 0x20	; 32
  f4:	55 b1       	in	r21, 0x05	; 5
  f6:	54 27       	eor	r21, r20
  f8:	55 b9       	out	0x05, r21	; 5
  fa:	5f e7       	ldi	r21, 0x7F	; 127
  fc:	68 e3       	ldi	r22, 0x38	; 56
  fe:	71 e0       	ldi	r23, 0x01	; 1
 100:	51 50       	subi	r21, 0x01	; 1
 102:	60 40       	sbci	r22, 0x00	; 0
 104:	70 40       	sbci	r23, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <blinkLight+0x1a>
 108:	00 c0       	rjmp	.+0      	; 0x10a <blinkLight+0x24>
 10a:	00 00       	nop
			_delay_ms(50);
			PORTB ^= (1<<PB5);		//toggle LED
 10c:	55 b1       	in	r21, 0x05	; 5
 10e:	54 27       	eor	r21, r20
 110:	55 b9       	out	0x05, r21	; 5
 112:	5f e7       	ldi	r21, 0x7F	; 127
 114:	68 e3       	ldi	r22, 0x38	; 56
 116:	71 e0       	ldi	r23, 0x01	; 1
 118:	51 50       	subi	r21, 0x01	; 1
 11a:	60 40       	sbci	r22, 0x00	; 0
 11c:	70 40       	sbci	r23, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <blinkLight+0x32>
 120:	00 c0       	rjmp	.+0      	; 0x122 <blinkLight+0x3c>
 122:	00 00       	nop
		
	}
	
	void blinkLight(unsigned char count){
		
		for (int i=0;i<count;i++){
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	28 17       	cp	r18, r24
 12a:	39 07       	cpc	r19, r25
 12c:	1c f3       	brlt	.-58     	; 0xf4 <blinkLight+0xe>
 12e:	08 95       	ret

00000130 <main>:
int main(void)
{
	unsigned char numRuns;		//total number of times this code has run (stored in EEPROM)
	
	//Set up IO pins-----------------------------------------------------------------------------------------
	DDRB = 0x20;		//all inputs except B5 output
 130:	80 e2       	ldi	r24, 0x20	; 32
 132:	84 b9       	out	0x04, r24	; 4
	
	//INT0 is on PD2 pin, enable as input, turn on pullup
	DDRD = 0x00;		//all inputs
 134:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x04;		//pull up resistor on (PD2)
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	8b b9       	out	0x0b, r24	; 11
	
	//Set up Interrupts--------------------------------------------------------------------------------------
	//External Interrupt Mask Register
	EIMSK |= (1<<INT0);	//turn on interrupt 0 (PD2)
 13a:	e8 9a       	sbi	0x1d, 0	; 29
		
	////External Interrupt Control Register A
	EICRA = 0x02;		//Interrupt on falling edge of INT0
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	80 93 69 00 	sts	0x0069, r24
	
	//before interrupts are enabled, read numRuns from EEPROM, increment and write new value
	numRuns = EEPROM_read(EEADDRESS)+1;
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 6c 00 	call	0xd8	; 0xd8 <EEPROM_read>
 14a:	c8 2f       	mov	r28, r24
 14c:	cf 5f       	subi	r28, 0xFF	; 255
	EEPROM_write(EEADDRESS,numRuns);
 14e:	6c 2f       	mov	r22, r28
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 64 00 	call	0xc8	; 0xc8 <EEPROM_write>
	
	//blink light one time for each time the program has been run
	blinkLight(numRuns);
 158:	8c 2f       	mov	r24, r28
 15a:	0e 94 73 00 	call	0xe6	; 0xe6 <blinkLight>
	
	sei();						//enable global interrupts
 15e:	78 94       	sei
	
	while(1)
	{
		
		if (button_was_pressed){
			PORTB ^= (1<<PB5);		//toggle LED
 160:	20 e2       	ldi	r18, 0x20	; 32
	sei();						//enable global interrupts
	
	while(1)
	{
		
		if (button_was_pressed){
 162:	80 91 00 01 	lds	r24, 0x0100
 166:	90 91 01 01 	lds	r25, 0x0101
 16a:	89 2b       	or	r24, r25
 16c:	d1 f3       	breq	.-12     	; 0x162 <main+0x32>
			PORTB ^= (1<<PB5);		//toggle LED
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	82 27       	eor	r24, r18
 172:	85 b9       	out	0x05, r24	; 5
			button_was_pressed = 0;	//reset button press flag
 174:	10 92 01 01 	sts	0x0101, r1
 178:	10 92 00 01 	sts	0x0100, r1
 17c:	f2 cf       	rjmp	.-28     	; 0x162 <main+0x32>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
