
TimerPractice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008d7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000021b  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000166  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000021d  00000000  00000000  00000ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00000f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000012e  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000042  00000000  00000000  000010ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initTimer1>:

///@brief initialize AD converter on Atmega168 for
void	initTimer1(uint8_t prescalar, uint8_t WGMmode, uint16_t reload){
	
	// The PRTIM1 bit in the Power reduction register must be written to zero to enable Timer/Counter1 module.
	PRR &= ~(1<<PRTIM1);
  80:	e4 e6       	ldi	r30, 0x64	; 100
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	90 81       	ld	r25, Z
  86:	97 7f       	andi	r25, 0xF7	; 247
  88:	90 83       	st	Z, r25
	
	
	
	TCCR1A = (WGMmode & 0x03);		//normal timer operation, no PWM, etc
  8a:	96 2f       	mov	r25, r22
  8c:	93 70       	andi	r25, 0x03	; 3
  8e:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = ((WGMmode & 0x0C)<<WGM12) | (prescalar << CS10);
  92:	6c 70       	andi	r22, 0x0C	; 12
  94:	66 0f       	add	r22, r22
  96:	66 0f       	add	r22, r22
  98:	66 0f       	add	r22, r22
  9a:	86 2b       	or	r24, r22
  9c:	80 93 81 00 	sts	0x0081, r24
	TCCR1C = 0x00;		//force output compare off	
  a0:	10 92 82 00 	sts	0x0082, r1
	OCR1A = reload;
  a4:	50 93 89 00 	sts	0x0089, r21
  a8:	40 93 88 00 	sts	0x0088, r20
	TCNT1 = 0;
  ac:	10 92 85 00 	sts	0x0085, r1
  b0:	10 92 84 00 	sts	0x0084, r1
	
	TIFR1 = 1<<ICF1;			//Clear pending interrupts
  b4:	80 e2       	ldi	r24, 0x20	; 32
  b6:	86 bb       	out	0x16, r24	; 22
	
	TIMSK1 |= (1 << TOIE1) |	// Enable
  b8:	ef e6       	ldi	r30, 0x6F	; 111
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	83 60       	ori	r24, 0x03	; 3
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <isTimer1FlagSet>:
	(1<<OCIE1A);				// Enable capture event timer
	//sei();
}

uint8_t isTimer1FlagSet(){
	return ((TIFR1 & 1<<OCF1A)? 1:0);
  c4:	86 b3       	in	r24, 0x16	; 22
	//return ((EIFR & 1<< INTF0)?1:0);
}
  c6:	86 95       	lsr	r24
  c8:	81 70       	andi	r24, 0x01	; 1
  ca:	08 95       	ret

000000cc <clearTimer1Flag>:

void	clearTimer1Flag(){
	TIFR1 |= (1<<OCF1A);
  cc:	b1 9a       	sbi	0x16, 1	; 22
  ce:	08 95       	ret

000000d0 <main>:
}
#endif

int main(void)
{
	DDRD = 0xC0;			//set PD7:6 to outputs for LEDs
  d0:	80 ec       	ldi	r24, 0xC0	; 192
  d2:	8a b9       	out	0x0a, r24	; 10
	
	
	initTimer1(TIMER_DIV64, 4, 0x00FF);
  d4:	4f ef       	ldi	r20, 0xFF	; 255
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	64 e0       	ldi	r22, 0x04	; 4
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	0e 94 40 00 	call	0x80	; 0x80 <initTimer1>
	//TIMSK1 |= (1 << TOIE1) |	// Enable
		//(1<<OCIE1A);				// Enable capture event timer
	//
	//
	//sei();
	RED_ON;
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	8f 73       	andi	r24, 0x3F	; 63
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	8b b9       	out	0x0b, r24	; 11
// 	   }
// 	   	   if (TIFR1 & 1<< OCF1A){
// 		   	   TIFR1 |= (1<<OCF1A);
// 		   	   PORTD ^= (1<<PD7);
// 	   	   }
			   if (isTimer1FlagSet()){
  e8:	0e 94 62 00 	call	0xc4	; 0xc4 <isTimer1FlagSet>
  ec:	88 23       	and	r24, r24
  ee:	e1 f3       	breq	.-8      	; 0xe8 <main+0x18>
				   clearTimer1Flag();
  f0:	0e 94 66 00 	call	0xcc	; 0xcc <clearTimer1Flag>
				   PORTD ^= (1<<PD7);
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	80 58       	subi	r24, 0x80	; 128
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	f6 cf       	rjmp	.-20     	; 0xe8 <main+0x18>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
