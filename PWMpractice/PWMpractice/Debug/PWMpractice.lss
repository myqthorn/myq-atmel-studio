
PWMpractice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000014a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000923  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000326  00000000  00000000  00000982  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000125  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000239  00000000  00000000  00000dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001008  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010d  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  00001159  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000011de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  78:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ConfigurePorts>:
#include <avr/interrupt.h>


void ConfigurePorts(void){
	
	DDRB = 0x20;		//all inputs except B5 output
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
	
	//configure PORTD for output
	//PD3, 5 & 6 will be used for PWM
	DDRD = 0xFF;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	8a b9       	out	0x0a, r24	; 10
  88:	08 95       	ret

0000008a <InitPWM>:
	
}

void InitPWM(void){
	
	TCCR0A = (1<<COM0A1) | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00);
  8a:	83 ea       	ldi	r24, 0xA3	; 163
  8c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00);
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	85 bd       	out	0x25, r24	; 37
	TCCR2A = (1<<COM2B1) | (1<<COM0B1) | (1<<WGM21) | (1<<WGM20);
  92:	93 e2       	ldi	r25, 0x23	; 35
  94:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = (1<<CS20);
  98:	80 93 b1 00 	sts	0x00B1, r24
  9c:	08 95       	ret

0000009e <main>:
}

int main(void)
{
	ConfigurePorts();
  9e:	0e 94 40 00 	call	0x80	; 0x80 <ConfigurePorts>
	InitPWM();
  a2:	0e 94 45 00 	call	0x8a	; 0x8a <InitPWM>
	
	
    while(1)
    {
		PORTB ^= (1<<PB5);		//toggle LED
  a6:	60 e2       	ldi	r22, 0x20	; 32
		//_delay_ms(50);
        
		for(int i=255; i>=0; i--){ OCR0A=i; _delay_ms(5);}
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	50 e0       	ldi	r21, 0x00	; 0
		for(int i=0; i<=255; i++){ OCR0A=i; _delay_ms(5);}
		
		for(int i=255; i>=0; i--){ OCR0B=i; _delay_ms(5);}
		for(int i=0; i<=255; i++){ OCR0B=i; _delay_ms(5);}
		
		for(int i=255; i>=0; i--){ OCR2B=i; _delay_ms(5);}	
  b0:	e4 eb       	ldi	r30, 0xB4	; 180
  b2:	f0 e0       	ldi	r31, 0x00	; 0
	InitPWM();
	
	
    while(1)
    {
		PORTB ^= (1<<PB5);		//toggle LED
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	86 27       	eor	r24, r22
  b8:	85 b9       	out	0x05, r24	; 5
		//_delay_ms(50);
        
		for(int i=255; i>=0; i--){ OCR0A=i; _delay_ms(5);}
  ba:	c9 01       	movw	r24, r18
  bc:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	af e0       	ldi	r26, 0x0F	; 15
  c0:	b7 e2       	ldi	r27, 0x27	; 39
  c2:	11 97       	sbiw	r26, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x24>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x2a>
  c8:	00 00       	nop
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	b8 f7       	brcc	.-18     	; 0xbc <main+0x1e>
  ce:	ca 01       	movw	r24, r20
		for(int i=0; i<=255; i++){ OCR0A=i; _delay_ms(5);}
  d0:	87 bd       	out	0x27, r24	; 39
  d2:	af e0       	ldi	r26, 0x0F	; 15
  d4:	b7 e2       	ldi	r27, 0x27	; 39
  d6:	11 97       	sbiw	r26, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x38>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x3e>
  dc:	00 00       	nop
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	81 15       	cp	r24, r1
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	9b 07       	cpc	r25, r27
  e6:	a1 f7       	brne	.-24     	; 0xd0 <main+0x32>
  e8:	c9 01       	movw	r24, r18
		
		for(int i=255; i>=0; i--){ OCR0B=i; _delay_ms(5);}
  ea:	88 bd       	out	0x28, r24	; 40
  ec:	af e0       	ldi	r26, 0x0F	; 15
  ee:	b7 e2       	ldi	r27, 0x27	; 39
  f0:	11 97       	sbiw	r26, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x52>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x58>
  f6:	00 00       	nop
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	b8 f7       	brcc	.-18     	; 0xea <main+0x4c>
  fc:	ca 01       	movw	r24, r20
		for(int i=0; i<=255; i++){ OCR0B=i; _delay_ms(5);}
  fe:	88 bd       	out	0x28, r24	; 40
 100:	af e0       	ldi	r26, 0x0F	; 15
 102:	b7 e2       	ldi	r27, 0x27	; 39
 104:	11 97       	sbiw	r26, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x66>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x6c>
 10a:	00 00       	nop
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	81 15       	cp	r24, r1
 110:	b1 e0       	ldi	r27, 0x01	; 1
 112:	9b 07       	cpc	r25, r27
 114:	a1 f7       	brne	.-24     	; 0xfe <main+0x60>
 116:	c9 01       	movw	r24, r18
		
		for(int i=255; i>=0; i--){ OCR2B=i; _delay_ms(5);}	
 118:	80 83       	st	Z, r24
 11a:	af e0       	ldi	r26, 0x0F	; 15
 11c:	b7 e2       	ldi	r27, 0x27	; 39
 11e:	11 97       	sbiw	r26, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x80>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x86>
 124:	00 00       	nop
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	b8 f7       	brcc	.-18     	; 0x118 <main+0x7a>
 12a:	ca 01       	movw	r24, r20
		for(int i=0; i<=255; i++){ OCR2B=i; _delay_ms(5);}
 12c:	80 83       	st	Z, r24
 12e:	af e0       	ldi	r26, 0x0F	; 15
 130:	b7 e2       	ldi	r27, 0x27	; 39
 132:	11 97       	sbiw	r26, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x94>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x9a>
 138:	00 00       	nop
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	81 15       	cp	r24, r1
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	9b 07       	cpc	r25, r27
 142:	a1 f7       	brne	.-24     	; 0x12c <main+0x8e>
 144:	b7 cf       	rjmp	.-146    	; 0xb4 <main+0x16>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
