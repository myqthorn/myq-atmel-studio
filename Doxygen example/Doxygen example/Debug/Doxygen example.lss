
Doxygen example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000278  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000278  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000030c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000a6f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000170  00000000  00000000  00000a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001654  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005bc  00000000  00000000  00002262  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000646  00000000  00000000  0000281e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000414  00000000  00000000  00002e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000600  00000000  00000000  00003278  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001040  00000000  00000000  00003878  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  000048b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_1>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	2d 01       	movw	r4, r26

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d4 e0       	ldi	r29, 0x04	; 4
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 30       	cpi	r26, 0x04	; 4
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	ca e6       	ldi	r28, 0x6A	; 106
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
  8e:	22 97       	sbiw	r28, 0x02	; 2
  90:	fe 01       	movw	r30, r28
  92:	0e 94 36 01 	call	0x26c	; 0x26c <__tablejump__>
  96:	c8 36       	cpi	r28, 0x68	; 104
  98:	d1 07       	cpc	r29, r17
  9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
  9c:	0e 94 04 01 	call	0x208	; 0x208 <main>
  a0:	0c 94 3a 01 	jmp	0x274	; 0x274 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <spiInit>:


void spiInit()
// Initialize pins for spi communication
{
    DDR_SPI &= ~((1<<DD_MOSI)|(1<<DD_MISO)|(1<<DD_SS)|(1<<DD_SCK));
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	83 7c       	andi	r24, 0xC3	; 195
  ac:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    DDR_SPI |= ((1<<DD_MOSI)|(1<<DD_SS)|(1<<DD_SCK));
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	8c 62       	ori	r24, 0x2C	; 44
  b2:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
  b4:	81 e5       	ldi	r24, 0x51	; 81
  b6:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // Master/Slave select   
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X);              // Double Clock Rate
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	8d bd       	out	0x2d, r24	; 45
  bc:	08 95       	ret

000000be <spiTransfer1byte>:
}

uint8_t spiTransfer1byte (uint8_t dataout)
// Clocks only one byte to target device and returns the received one
{
    SPDR = dataout;
  be:	8e bd       	out	0x2e, r24	; 46
    while((SPSR & (1<<SPIF))==0);
  c0:	0d b4       	in	r0, 0x2d	; 45
  c2:	07 fe       	sbrs	r0, 7
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <spiTransfer1byte+0x2>
    return SPDR;
  c6:	8e b5       	in	r24, 0x2e	; 46
}
  c8:	08 95       	ret

000000ca <_Z7clearCEv>:
void setCE(){
	NRF24L01_CE_PORT |= (1<<NRF24L01_CE_PIN);
}

void clearCE(){
	NRF24L01_CE_PORT &= ~(1<<NRF24L01_CE_PIN);
  ca:	28 98       	cbi	0x05, 0	; 5
  cc:	08 95       	ret

000000ce <_Z6setCSNv>:
}

void setCSN(){
	NRF24L01_CSN_PORT |= (1<<NRF24L01_CSN_PIN);
  ce:	29 9a       	sbi	0x05, 1	; 5
  d0:	08 95       	ret

000000d2 <_Z8clearCSNv>:
}

void clearCSN(){
	NRF24L01_CSN_PORT &= ~(1<<NRF24L01_CSN_PIN);
  d2:	29 98       	cbi	0x05, 1	; 5
  d4:	08 95       	ret

000000d6 <_ZN8nRF24L015writeEhh>:
///@description		Used for registers that have 1-byte values written to them.
///					Sets status = STATUS register
///@brief			Writes 1 byte into the specified register.
///@param reg		The register to be accessed.
///@param data		The data you want written there.
void nRF24L01::write(uint8_t reg, uint8_t data){
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	ec 01       	movw	r28, r24
  e0:	06 2f       	mov	r16, r22
  e2:	14 2f       	mov	r17, r20
	clearCSN();
  e4:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z8clearCSNv>
		status = spiTransfer1byte(NRF24L01_W_REGISTER | reg);
  e8:	80 2f       	mov	r24, r16
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	0e 94 5f 00 	call	0xbe	; 0xbe <spiTransfer1byte>
  f0:	88 83       	st	Y, r24
		spiTransfer1byte(data);
  f2:	81 2f       	mov	r24, r17
  f4:	0e 94 5f 00 	call	0xbe	; 0xbe <spiTransfer1byte>
	setCSN();
  f8:	0e 94 67 00 	call	0xce	; 0xce <_Z6setCSNv>
}
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	1f 91       	pop	r17
 102:	0f 91       	pop	r16
 104:	08 95       	ret

00000106 <_ZN8nRF24L014initEv>:
///@description		Initializes MCU pins, interrupt, and SPI module.				
///					Should be called during startup.
///@brief			Initializes MCU to communicate with nRF25L01 module.
void nRF24L01::init(){
	//define CE and CSN as Outputs
	NRF24L01_CE_DDR		|= (1<<NRF24L01_CE_PIN);
 106:	20 9a       	sbi	0x04, 0	; 4
	NRF24L01_CSN_DDR	|= (1<<NRF24L01_CSN_PIN);
 108:	21 9a       	sbi	0x04, 1	; 4
	
	//default values for CE & CSN
	clearCE();
 10a:	0e 94 65 00 	call	0xca	; 0xca <_Z7clearCEv>
	setCSN();
 10e:	0e 94 67 00 	call	0xce	; 0xce <_Z6setCSNv>

	#if defined(__AVR_ATmega168__)
	// Initialize external interrupt on port PD6 (PCINT22)
	// First we set the pin as an input, then we set the mask(PCMSK2) so that the
	// pin isn't blocked, then we enable the group.
	DDRB &= ~(1<<PD6);			//Set PD6 as input
 112:	26 98       	cbi	0x04, 6	; 4
	PCMSK2 = (1<<PCINT22);		//Enable pin change interrupt for PCINT22 (PD6)
 114:	80 e4       	ldi	r24, 0x40	; 64
 116:	80 93 6d 00 	sts	0x006D, r24
	PCICR  = (1<<PCIE2);		//Enable pin change interrupt for PCINT23..16 (group)
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	80 93 68 00 	sts	0x0068, r24
	#endif // __AVR_ATmega168__
	
	//Initialize SPI module
	spiInit();
 120:	0e 94 54 00 	call	0xa8	; 0xa8 <spiInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	2f e7       	ldi	r18, 0x7F	; 127
 126:	88 e3       	ldi	r24, 0x38	; 56
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <_ZN8nRF24L014initEv+0x24>
 132:	00 c0       	rjmp	.+0      	; 0x134 <_ZN8nRF24L014initEv+0x2e>
 134:	00 00       	nop
	
	_delay_ms(50);
	
	//Activate interrupts
	asm volatile ("sei"::);
 136:	78 94       	sei
 138:	08 95       	ret

0000013a <_ZN8nRF24L017setModeEh>:

///@description 
///@brief			Sets mode to either receive	or transmit
///@param m			Set to either NRF24L01_MODE_RX or NRF24L01_MODE_TX.  
///					Defaults to RX if invalid value is sent.
void nRF24L01::setMode(uint8_t m){	
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	ec 01       	movw	r28, r24
	if (m == NRF24L01_MODE_TX){
 140:	61 30       	cpi	r22, 0x01	; 1
 142:	39 f4       	brne	.+14     	; 0x152 <_ZN8nRF24L017setModeEh+0x18>
		write(NRF24L01_CONFIG, NRF24L01_CONFIG_DEFAULT | (1<<NRF24L01_PWR_UP) | (0<<NRF24L01_PRIM_RX) );
 144:	4a e4       	ldi	r20, 0x4A	; 74
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZN8nRF24L015writeEhh>
		mode = NRF24L01_MODE_TX; 
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	05 c0       	rjmp	.+10     	; 0x15c <_ZN8nRF24L017setModeEh+0x22>
	}else{
		write(NRF24L01_CONFIG, NRF24L01_CONFIG_DEFAULT | (1<<NRF24L01_PWR_UP) | (1<<NRF24L01_PRIM_RX) );	
 152:	4b e4       	ldi	r20, 0x4B	; 75
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZN8nRF24L015writeEhh>
	mode = NRF24L01_MODE_RX;
 15a:	19 82       	std	Y+1, r1	; 0x01
	}
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <_ZN8nRF24L0112updateStatusEv>:

//TODO: make this private?
///@description	Sends a NOP command to nRF24L01, receiving STATUS back, which is 
///					written to the public variable status.
///@brief	Updates status of nRF24L01.
void nRF24L01::updateStatus(){
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	ec 01       	movw	r28, r24
	clearCSN();								// Pull down chip select
 168:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z8clearCSNv>
		status = spiTransfer1byte(NRF24L01_NOP);	// Read status register
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	0e 94 5f 00 	call	0xbe	; 0xbe <spiTransfer1byte>
 172:	88 83       	st	Y, r24
	setCSN();								// Pull up chip select
 174:	0e 94 67 00 	call	0xce	; 0xce <_Z6setCSNv>
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <_ZN8nRF24L0110setChannelEh>:
///@description	Writes to the RF_CH register.
///				1 MHz steps.  Freq = 2400 + RF_CH [MHz].
///@brief		Sets the frequency channel nRF24L01 operates on.
///@param		ch	Channel.  Must be between 0 and 127(0x7F).
void nRF24L01::setChannel(uint8_t ch){
	channel = ch & 0x7F;					//bit 7 must be 0
 17e:	46 2f       	mov	r20, r22
 180:	4f 77       	andi	r20, 0x7F	; 127
 182:	fc 01       	movw	r30, r24
 184:	42 83       	std	Z+2, r20	; 0x02
	write(NRF24L01_RF_CH, channel);
 186:	65 e0       	ldi	r22, 0x05	; 5
 188:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZN8nRF24L015writeEhh>
 18c:	08 95       	ret

0000018e <_ZN8nRF24L0116setPayloadLengthEh>:
}

///@description		1-32 bytes long.
///@brief			Sets the length of the payload to be in data pipe 0.
void nRF24L01::setPayloadLength(uint8_t length){
	payloadLength = length & 0x3F;			//bits 7:6 must be 0
 18e:	46 2f       	mov	r20, r22
 190:	4f 73       	andi	r20, 0x3F	; 63
 192:	fc 01       	movw	r30, r24
 194:	43 83       	std	Z+3, r20	; 0x03
	write(NRF24L01_RX_PW_P0, payloadLength);
 196:	61 e1       	ldi	r22, 0x11	; 17
 198:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZN8nRF24L015writeEhh>
 19c:	08 95       	ret

0000019e <_ZN8nRF24L01C1Ehh>:
}

///@description	Custom constructor.
///@param ch		Custom channel.
///@param pl		Custom payload length.
nRF24L01::nRF24L01(uint8_t ch, uint8_t pl){
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	ec 01       	movw	r28, r24
 1a8:	06 2f       	mov	r16, r22
 1aa:	14 2f       	mov	r17, r20
	
	init();
 1ac:	0e 94 83 00 	call	0x106	; 0x106 <_ZN8nRF24L014initEv>
	setChannel(ch);					//set channel
 1b0:	60 2f       	mov	r22, r16
 1b2:	ce 01       	movw	r24, r28
 1b4:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN8nRF24L0110setChannelEh>
	setPayloadLength(pl);			//set length of payloads (RX)
 1b8:	61 2f       	mov	r22, r17
 1ba:	ce 01       	movw	r24, r28
 1bc:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN8nRF24L0116setPayloadLengthEh>
	setMode(NRF24L01_MODE_RX);		//start receiving
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	ce 01       	movw	r24, r28
 1c4:	0e 94 9d 00 	call	0x13a	; 0x13a <_ZN8nRF24L017setModeEh>
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <_ZN8nRF24L0116interruptHandlerEv>:

//////////////////////////////////////////////////////////////////////////
//Interrupt
//////////////////////////////////////////////////////////////////////////

void nRF24L01::interruptHandler(void){
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
	
	// If still in transmitting mode then finish transmission
	if (mode == NRF24L01_MODE_TX) {
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	61 f4       	brne	.+24     	; 0x1f6 <_ZN8nRF24L0116interruptHandlerEv+0x24>
		
		// Read MiRF status
		updateStatus();
 1de:	ce 01       	movw	r24, r28
 1e0:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN8nRF24L0112updateStatusEv>

		setMode(NRF24L01_MODE_RX);
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	ce 01       	movw	r24, r28
 1e8:	0e 94 9d 00 	call	0x13a	; 0x13a <_ZN8nRF24L017setModeEh>
		
		// Reset status register for further interaction
		write(NRF24L01_STATUS,(1<<NRF24L01_TX_DS)|(1<<NRF24L01_MAX_RT)); // Reset status register
 1ec:	40 e3       	ldi	r20, 0x30	; 48
 1ee:	67 e0       	ldi	r22, 0x07	; 7
 1f0:	ce 01       	movw	r24, r28
 1f2:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZN8nRF24L015writeEhh>
	}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <_Z6configv>:

void config(void){
	//////////////////////////////////////////////////////////////////////////
	//Set up Interrupts
	//////////////////////////////////////////////////////////////////////////
	EIMSK |= (1<<INT0);			//turn on interrupt 0 (PD2)
 1fc:	e8 9a       	sbi	0x1d, 0	; 29
	
	////External Interrupt Control Register A
	EICRA = 0x02;				//Interrupt on falling edge of INT0
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	80 93 69 00 	sts	0x0069, r24
	
	asm volatile("sei"::);		//enable interrupts
 204:	78 94       	sei
 206:	08 95       	ret

00000208 <main>:
}


int main(void)
{
	config();
 208:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_Z6configv>
 20c:	ff cf       	rjmp	.-2      	; 0x20c <main+0x4>

0000020e <__vector_1>:
    {
        
    }
}

ISR(INT0_vect){
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	2f 93       	push	r18
 21a:	3f 93       	push	r19
 21c:	4f 93       	push	r20
 21e:	5f 93       	push	r21
 220:	6f 93       	push	r22
 222:	7f 93       	push	r23
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	af 93       	push	r26
 22a:	bf 93       	push	r27
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	transmitter.interruptHandler();
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_ZN8nRF24L0116interruptHandlerEv>
	
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <_GLOBAL__sub_I_transmitter>:
#include <avr/io.h>
#include <avr/interrupt.h>


//global
nRF24L01 transmitter(1,2);			//must be global for interrupts to work
 25a:	42 e0       	ldi	r20, 0x02	; 2
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN8nRF24L01C1Ehh>
 266:	08 95       	ret

00000268 <__tablejump2__>:
 268:	ee 0f       	add	r30, r30
 26a:	ff 1f       	adc	r31, r31

0000026c <__tablejump__>:
 26c:	05 90       	lpm	r0, Z+
 26e:	f4 91       	lpm	r31, Z
 270:	e0 2d       	mov	r30, r0
 272:	09 94       	ijmp

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
