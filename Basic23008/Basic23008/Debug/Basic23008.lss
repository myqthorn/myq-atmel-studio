
Basic23008.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000041e  000004b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080011a  0080011a  000004cc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000c2f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000160  00000000  00000000  00000c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001215  00000000  00000000  00000dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004c4  00000000  00000000  00001fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bdd  00000000  00000000  00002497  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002b0  00000000  00000000  00003074  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030e  00000000  00000000  00003324  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005bc  00000000  00000000  00003632  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000120  00000000  00000000  00003bee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 31       	cpi	r26, 0x1F	; 31
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	98 d1       	rcall	.+816    	; 0x3cc <main>
  9c:	be c1       	rjmp	.+892    	; 0x41a <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <lcdWriteNybble>:
}

void AssignCustomCharacters(void){
        makeCheckerboard(0x00);

        makeMY(0x01);
  a0:	20 e1       	ldi	r18, 0x10	; 16
  a2:	82 9f       	mul	r24, r18
  a4:	c0 01       	movw	r24, r0
  a6:	11 24       	eor	r1, r1
  a8:	60 91 1a 01 	lds	r22, 0x011A
  ac:	6f 70       	andi	r22, 0x0F	; 15
  ae:	68 2b       	or	r22, r24
  b0:	60 93 1a 01 	sts	0x011A, r22
  b4:	89 e0       	ldi	r24, 0x09	; 9
  b6:	7c c1       	rjmp	.+760    	; 0x3b0 <Write23008>

000000b8 <lcdWrite>:
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	d8 2f       	mov	r29, r24
  be:	c6 2f       	mov	r28, r22
  c0:	60 91 1a 01 	lds	r22, 0x011A
  c4:	6d 7f       	andi	r22, 0xFD	; 253
  c6:	60 93 1a 01 	sts	0x011A, r22
  ca:	89 e0       	ldi	r24, 0x09	; 9
  cc:	71 d1       	rcall	.+738    	; 0x3b0 <Write23008>
  ce:	d1 11       	cpse	r29, r1
  d0:	08 c0       	rjmp	.+16     	; 0xe2 <lcdWrite+0x2a>
  d2:	60 91 1a 01 	lds	r22, 0x011A
  d6:	6e 7f       	andi	r22, 0xFE	; 254
  d8:	60 93 1a 01 	sts	0x011A, r22
  dc:	89 e0       	ldi	r24, 0x09	; 9
  de:	68 d1       	rcall	.+720    	; 0x3b0 <Write23008>
  e0:	05 c0       	rjmp	.+10     	; 0xec <lcdWrite+0x34>
  e2:	80 91 1a 01 	lds	r24, 0x011A
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	80 93 1a 01 	sts	0x011A, r24
  ec:	60 91 1a 01 	lds	r22, 0x011A
  f0:	89 e0       	ldi	r24, 0x09	; 9
  f2:	5e d1       	rcall	.+700    	; 0x3b0 <Write23008>
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcdWrite+0x3e>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <lcdWrite+0x44>
  fc:	60 91 1a 01 	lds	r22, 0x011A
 100:	62 60       	ori	r22, 0x02	; 2
 102:	60 93 1a 01 	sts	0x011A, r22
 106:	89 e0       	ldi	r24, 0x09	; 9
 108:	53 d1       	rcall	.+678    	; 0x3b0 <Write23008>
 10a:	8c 2f       	mov	r24, r28
 10c:	82 95       	swap	r24
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	c7 df       	rcall	.-114    	; 0xa0 <lcdWriteNybble>
 112:	10 92 1d 01 	sts	0x011D, r1
 116:	10 92 1c 01 	sts	0x011C, r1
 11a:	60 91 1a 01 	lds	r22, 0x011A
 11e:	6d 7f       	andi	r22, 0xFD	; 253
 120:	60 93 1a 01 	sts	0x011A, r22
 124:	89 e0       	ldi	r24, 0x09	; 9
 126:	44 d1       	rcall	.+648    	; 0x3b0 <Write23008>
 128:	10 92 1d 01 	sts	0x011D, r1
 12c:	10 92 1c 01 	sts	0x011C, r1
 130:	60 91 1a 01 	lds	r22, 0x011A
 134:	62 60       	ori	r22, 0x02	; 2
 136:	60 93 1a 01 	sts	0x011A, r22
 13a:	89 e0       	ldi	r24, 0x09	; 9
 13c:	39 d1       	rcall	.+626    	; 0x3b0 <Write23008>
 13e:	8c 2f       	mov	r24, r28
 140:	8f 70       	andi	r24, 0x0F	; 15
 142:	ae df       	rcall	.-164    	; 0xa0 <lcdWriteNybble>
 144:	10 92 1d 01 	sts	0x011D, r1
 148:	10 92 1c 01 	sts	0x011C, r1
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <lcdClearDisplay>:
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	b0 df       	rcall	.-160    	; 0xb8 <lcdWrite>
 158:	10 92 1b 01 	sts	0x011B, r1
 15c:	10 92 1e 01 	sts	0x011E, r1
 160:	28 ec       	ldi	r18, 0xC8	; 200
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	44 e6       	ldi	r20, 0x64	; 100
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	ca 01       	movw	r24, r20
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcdClearDisplay+0x18>
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	31 09       	sbc	r19, r1
 172:	d1 f7       	brne	.-12     	; 0x168 <lcdClearDisplay+0x16>
 174:	10 92 1d 01 	sts	0x011D, r1
 178:	10 92 1c 01 	sts	0x011C, r1
 17c:	08 95       	ret

0000017e <lcdInit>:
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	16 d1       	rcall	.+556    	; 0x3b0 <Write23008>
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	89 e0       	ldi	r24, 0x09	; 9
 188:	13 d1       	rcall	.+550    	; 0x3b0 <Write23008>
 18a:	8f e2       	ldi	r24, 0x2F	; 47
 18c:	95 e7       	ldi	r25, 0x75	; 117
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcdInit+0x10>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcdInit+0x16>
 194:	00 00       	nop
 196:	60 91 1a 01 	lds	r22, 0x011A
 19a:	6d 7f       	andi	r22, 0xFD	; 253
 19c:	60 93 1a 01 	sts	0x011A, r22
 1a0:	89 e0       	ldi	r24, 0x09	; 9
 1a2:	06 d1       	rcall	.+524    	; 0x3b0 <Write23008>
 1a4:	60 91 1a 01 	lds	r22, 0x011A
 1a8:	6e 7f       	andi	r22, 0xFE	; 254
 1aa:	60 93 1a 01 	sts	0x011A, r22
 1ae:	89 e0       	ldi	r24, 0x09	; 9
 1b0:	ff d0       	rcall	.+510    	; 0x3b0 <Write23008>
 1b2:	92 e0       	ldi	r25, 0x02	; 2
 1b4:	9a 95       	dec	r25
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcdInit+0x36>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lcdInit+0x3c>
 1ba:	60 91 1a 01 	lds	r22, 0x011A
 1be:	62 60       	ori	r22, 0x02	; 2
 1c0:	60 93 1a 01 	sts	0x011A, r22
 1c4:	89 e0       	ldi	r24, 0x09	; 9
 1c6:	f4 d0       	rcall	.+488    	; 0x3b0 <Write23008>
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	6a df       	rcall	.-300    	; 0xa0 <lcdWriteNybble>
 1cc:	10 92 1d 01 	sts	0x011D, r1
 1d0:	10 92 1c 01 	sts	0x011C, r1
 1d4:	60 91 1a 01 	lds	r22, 0x011A
 1d8:	6d 7f       	andi	r22, 0xFD	; 253
 1da:	60 93 1a 01 	sts	0x011A, r22
 1de:	89 e0       	ldi	r24, 0x09	; 9
 1e0:	e7 d0       	rcall	.+462    	; 0x3b0 <Write23008>
 1e2:	68 e2       	ldi	r22, 0x28	; 40
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	68 df       	rcall	.-304    	; 0xb8 <lcdWrite>
 1e8:	6c e0       	ldi	r22, 0x0C	; 12
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	65 df       	rcall	.-310    	; 0xb8 <lcdWrite>
 1ee:	66 e0       	ldi	r22, 0x06	; 6
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	62 df       	rcall	.-316    	; 0xb8 <lcdWrite>
 1f4:	10 92 1b 01 	sts	0x011B, r1
 1f8:	10 92 1e 01 	sts	0x011E, r1
 1fc:	08 95       	ret

000001fe <lcdGoto>:
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	8c 01       	movw	r16, r24
 208:	eb 01       	movw	r28, r22
 20a:	61 30       	cpi	r22, 0x01	; 1
 20c:	71 05       	cpc	r23, r1
 20e:	59 f0       	breq	.+22     	; 0x226 <lcdGoto+0x28>
 210:	1c f4       	brge	.+6      	; 0x218 <lcdGoto+0x1a>
 212:	20 97       	sbiw	r28, 0x00	; 0
 214:	89 f0       	breq	.+34     	; 0x238 <lcdGoto+0x3a>
 216:	12 c0       	rjmp	.+36     	; 0x23c <lcdGoto+0x3e>
 218:	62 30       	cpi	r22, 0x02	; 2
 21a:	71 05       	cpc	r23, r1
 21c:	39 f0       	breq	.+14     	; 0x22c <lcdGoto+0x2e>
 21e:	63 30       	cpi	r22, 0x03	; 3
 220:	71 05       	cpc	r23, r1
 222:	61 f4       	brne	.+24     	; 0x23c <lcdGoto+0x3e>
 224:	06 c0       	rjmp	.+12     	; 0x232 <lcdGoto+0x34>
 226:	20 e4       	ldi	r18, 0x40	; 64
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	08 c0       	rjmp	.+16     	; 0x23c <lcdGoto+0x3e>
 22c:	24 e1       	ldi	r18, 0x14	; 20
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	05 c0       	rjmp	.+10     	; 0x23c <lcdGoto+0x3e>
 232:	24 e5       	ldi	r18, 0x54	; 84
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <lcdGoto+0x3e>
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	b9 01       	movw	r22, r18
 23e:	60 0f       	add	r22, r16
 240:	71 1f       	adc	r23, r17
 242:	60 68       	ori	r22, 0x80	; 128
 244:	7f 6f       	ori	r23, 0xFF	; 255
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	37 df       	rcall	.-402    	; 0xb8 <lcdWrite>
 24a:	00 93 1b 01 	sts	0x011B, r16
 24e:	c0 93 1e 01 	sts	0x011E, r28
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <lcdPuts>:
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	e8 2e       	mov	r14, r24
 26a:	f9 2e       	mov	r15, r25
 26c:	08 2f       	mov	r16, r24
 26e:	19 2f       	mov	r17, r25
 270:	c0 e0       	ldi	r28, 0x00	; 0
 272:	d0 e0       	ldi	r29, 0x00	; 0
 274:	20 c0       	rjmp	.+64     	; 0x2b6 <lcdPuts+0x5a>
 276:	f8 01       	movw	r30, r16
 278:	61 91       	ld	r22, Z+
 27a:	8f 01       	movw	r16, r30
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	1c df       	rcall	.-456    	; 0xb8 <lcdWrite>
 280:	20 91 1b 01 	lds	r18, 0x011B
 284:	2f 5f       	subi	r18, 0xFF	; 255
 286:	28 32       	cpi	r18, 0x28	; 40
 288:	19 f0       	breq	.+6      	; 0x290 <lcdPuts+0x34>
 28a:	20 93 1b 01 	sts	0x011B, r18
 28e:	12 c0       	rjmp	.+36     	; 0x2b4 <lcdPuts+0x58>
 290:	10 92 1b 01 	sts	0x011B, r1
 294:	80 91 1e 01 	lds	r24, 0x011E
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	19 f0       	breq	.+6      	; 0x2a4 <lcdPuts+0x48>
 29e:	80 93 1e 01 	sts	0x011E, r24
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <lcdPuts+0x4c>
 2a4:	10 92 1e 01 	sts	0x011E, r1
 2a8:	60 91 1e 01 	lds	r22, 0x011E
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	a5 df       	rcall	.-182    	; 0x1fe <lcdGoto>
 2b4:	21 96       	adiw	r28, 0x01	; 1
 2b6:	ee 2d       	mov	r30, r14
 2b8:	ff 2d       	mov	r31, r15
 2ba:	df 01       	movw	r26, r30
 2bc:	0d 90       	ld	r0, X+
 2be:	00 20       	and	r0, r0
 2c0:	e9 f7       	brne	.-6      	; 0x2bc <lcdPuts+0x60>
 2c2:	11 97       	sbiw	r26, 0x01	; 1
 2c4:	ae 1b       	sub	r26, r30
 2c6:	bf 0b       	sbc	r27, r31
 2c8:	ca 17       	cp	r28, r26
 2ca:	db 07       	cpc	r29, r27
 2cc:	a0 f2       	brcs	.-88     	; 0x276 <lcdPuts+0x1a>
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	ff 90       	pop	r15
 2d8:	ef 90       	pop	r14
 2da:	08 95       	ret

000002dc <LED1on>:
//
//     makeDownArrow(0x04);
}
//------end functions for custom characters-------------------------------------
void LED1on(void){
    toLCD |=0x04;
 2dc:	60 91 1a 01 	lds	r22, 0x011A
 2e0:	64 60       	ori	r22, 0x04	; 4
 2e2:	60 93 1a 01 	sts	0x011A, r22
    Write23008(GPIO, toLCD);
 2e6:	89 e0       	ldi	r24, 0x09	; 9
 2e8:	63 c0       	rjmp	.+198    	; 0x3b0 <Write23008>

000002ea <LED1off>:
}//LED1on

void LED1off(void){
    toLCD &=0xFB;
 2ea:	60 91 1a 01 	lds	r22, 0x011A
 2ee:	6b 7f       	andi	r22, 0xFB	; 251
 2f0:	60 93 1a 01 	sts	0x011A, r22
    Write23008(GPIO, toLCD);
 2f4:	89 e0       	ldi	r24, 0x09	; 9
 2f6:	5c c0       	rjmp	.+184    	; 0x3b0 <Write23008>

000002f8 <LED2on>:
}//LED1off

void LED2on(void){
    toLCD |=0x08;
 2f8:	60 91 1a 01 	lds	r22, 0x011A
 2fc:	68 60       	ori	r22, 0x08	; 8
 2fe:	60 93 1a 01 	sts	0x011A, r22
    Write23008(GPIO, toLCD);
 302:	89 e0       	ldi	r24, 0x09	; 9
 304:	55 c0       	rjmp	.+170    	; 0x3b0 <Write23008>

00000306 <LED2off>:
}//LED2on

void LED2off(void){
    toLCD &=0xF7;
 306:	60 91 1a 01 	lds	r22, 0x011A
 30a:	67 7f       	andi	r22, 0xF7	; 247
 30c:	60 93 1a 01 	sts	0x011A, r22
    Write23008(GPIO, toLCD);
 310:	89 e0       	ldi	r24, 0x09	; 9
 312:	4e c0       	rjmp	.+156    	; 0x3b0 <Write23008>

00000314 <toggleLED1>:
}//LED2off

void toggleLED1(void){
    if (toLCD & 0x04)  //test GP2
 314:	80 91 1a 01 	lds	r24, 0x011A
 318:	82 ff       	sbrs	r24, 2
 31a:	01 c0       	rjmp	.+2      	; 0x31e <toggleLED1+0xa>
        LED1off();
 31c:	e6 cf       	rjmp	.-52     	; 0x2ea <LED1off>
    else LED1on();
 31e:	de cf       	rjmp	.-68     	; 0x2dc <LED1on>

00000320 <toggleLED2>:
}

void toggleLED2(void){
    if (toLCD & 0x08)    //test GP3
 320:	80 91 1a 01 	lds	r24, 0x011A
 324:	83 ff       	sbrs	r24, 3
 326:	01 c0       	rjmp	.+2      	; 0x32a <toggleLED2+0xa>
        LED2off();
 328:	ee cf       	rjmp	.-36     	; 0x306 <LED2off>
    else LED2on();
 32a:	e6 cf       	rjmp	.-52     	; 0x2f8 <LED2on>

0000032c <i2c_start>:
*************************************************************************/ 
unsigned char i2c_rep_start(unsigned char address) 
{ 
    return i2c_start( address ); 

}/* i2c_rep_start */ 
 32c:	94 ea       	ldi	r25, 0xA4	; 164
 32e:	90 93 bc 00 	sts	0x00BC, r25
 332:	ec eb       	ldi	r30, 0xBC	; 188
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	90 81       	ld	r25, Z
 338:	99 23       	and	r25, r25
 33a:	ec f7       	brge	.-6      	; 0x336 <i2c_start+0xa>
 33c:	90 91 b9 00 	lds	r25, 0x00B9
 340:	98 7f       	andi	r25, 0xF8	; 248
 342:	98 30       	cpi	r25, 0x08	; 8
 344:	11 f0       	breq	.+4      	; 0x34a <i2c_start+0x1e>
 346:	90 31       	cpi	r25, 0x10	; 16
 348:	a1 f4       	brne	.+40     	; 0x372 <i2c_start+0x46>
 34a:	80 93 bb 00 	sts	0x00BB, r24
 34e:	84 e8       	ldi	r24, 0x84	; 132
 350:	80 93 bc 00 	sts	0x00BC, r24
 354:	ec eb       	ldi	r30, 0xBC	; 188
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	88 23       	and	r24, r24
 35c:	ec f7       	brge	.-6      	; 0x358 <i2c_start+0x2c>
 35e:	90 91 b9 00 	lds	r25, 0x00B9
 362:	98 7f       	andi	r25, 0xF8	; 248
 364:	98 31       	cpi	r25, 0x18	; 24
 366:	39 f0       	breq	.+14     	; 0x376 <i2c_start+0x4a>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 34       	cpi	r25, 0x40	; 64
 36c:	29 f4       	brne	.+10     	; 0x378 <i2c_start+0x4c>
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	08 95       	ret
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	08 95       	ret
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	08 95       	ret

0000037a <i2c_stop>:
 Terminates the data transfer and releases the I2C bus 
*************************************************************************/ 
void i2c_stop(void) 
{ 
    /* send stop condition */ 
   TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); 
 37a:	84 e9       	ldi	r24, 0x94	; 148
 37c:	80 93 bc 00 	sts	0x00BC, r24
    
   // wait until stop condition is executed and bus released 
   while(TWCR & (1<<TWSTO)); 
 380:	ec eb       	ldi	r30, 0xBC	; 188
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	84 fd       	sbrc	r24, 4
 388:	fd cf       	rjmp	.-6      	; 0x384 <i2c_stop+0xa>

}/* i2c_stop */ 
 38a:	08 95       	ret

0000038c <i2c_write>:
unsigned char i2c_write( unsigned char data ) 
{    
    uint8_t   twst; 
    
   // send data to the previously addressed device 
   TWDR = data; 
 38c:	80 93 bb 00 	sts	0x00BB, r24
   TWCR = (1<<TWINT) | (1<<TWEN); 
 390:	84 e8       	ldi	r24, 0x84	; 132
 392:	80 93 bc 00 	sts	0x00BC, r24

   // wait until transmission completed 
   while(!(TWCR & (1<<TWINT))); 
 396:	ec eb       	ldi	r30, 0xBC	; 188
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	88 23       	and	r24, r24
 39e:	ec f7       	brge	.-6      	; 0x39a <i2c_write+0xe>

   // check value of TWI Status Register. Mask prescaler bits 
   twst = TW_STATUS & 0xF8; 
 3a0:	90 91 b9 00 	lds	r25, 0x00B9
 3a4:	98 7f       	andi	r25, 0xF8	; 248
   if( twst != TW_MT_DATA_ACK) return 1; 
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	98 32       	cpi	r25, 0x28	; 40
 3aa:	09 f4       	brne	.+2      	; 0x3ae <i2c_write+0x22>
 3ac:	80 e0       	ldi	r24, 0x00	; 0
   return 0; 

}/* i2c_write */ 
 3ae:	08 95       	ret

000003b0 <Write23008>:
//Created: 6 Oct 2013
//Mike Litster

#include "portexpander.h"

void Write23008(unsigned char reg, unsigned char data){
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	d8 2f       	mov	r29, r24
 3b6:	c6 2f       	mov	r28, r22
	i2c_start((CTRL_BYTE_23008<<1) | I2C_WRITE); // Slave address.  Shift 7-bit address one bit, and clear the read bit (bit0).)
 3b8:	80 e4       	ldi	r24, 0x40	; 64
 3ba:	b8 df       	rcall	.-144    	; 0x32c <i2c_start>
	i2c_write(reg);
 3bc:	8d 2f       	mov	r24, r29
 3be:	e6 df       	rcall	.-52     	; 0x38c <i2c_write>
	i2c_write(data);
 3c0:	8c 2f       	mov	r24, r28
 3c2:	e4 df       	rcall	.-56     	; 0x38c <i2c_write>
	i2c_stop();
 3c4:	da df       	rcall	.-76     	; 0x37a <i2c_stop>
}
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void)
{
	DDRB = 0xFF;		//all outputs port B
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	84 b9       	out	0x04, r24	; 4
	lcdInit();	
 3d0:	d6 de       	rcall	.-596    	; 0x17e <lcdInit>
	lcdClearDisplay();
 3d2:	bf de       	rcall	.-642    	; 0x152 <lcdClearDisplay>
	
	lcdGoto(0,0);
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	10 df       	rcall	.-480    	; 0x1fe <lcdGoto>
	lcdPuts("Atmega168");
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	3c df       	rcall	.-392    	; 0x25c <lcdPuts>
	lcdGoto(0,1);
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	08 df       	rcall	.-496    	; 0x1fe <lcdGoto>
	lcdPuts("Dev Board rev0");
 3ee:	8a e0       	ldi	r24, 0x0A	; 10
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	34 df       	rcall	.-408    	; 0x25c <lcdPuts>
		
    while(1)
    {
		PORTB ^= (1<<PB5);		//toggle LED
 3f4:	c0 e2       	ldi	r28, 0x20	; 32
 3f6:	85 b1       	in	r24, 0x05	; 5
 3f8:	8c 27       	eor	r24, r28
 3fa:	85 b9       	out	0x05, r24	; 5
		toggleLED1();
 3fc:	8b df       	rcall	.-234    	; 0x314 <toggleLED1>
		toggleLED2();
 3fe:	90 df       	rcall	.-224    	; 0x320 <toggleLED2>
		lcdWrite(CMD_REG, LCD_SHIFT | LCD_SHIFT_DISPLAY | LCD_SHIFT_LEFT);
 400:	68 e1       	ldi	r22, 0x18	; 24
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	59 de       	rcall	.-846    	; 0xb8 <lcdWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 406:	2f e7       	ldi	r18, 0x7F	; 127
 408:	88 e3       	ldi	r24, 0x38	; 56
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	21 50       	subi	r18, 0x01	; 1
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	90 40       	sbci	r25, 0x00	; 0
 412:	e1 f7       	brne	.-8      	; 0x40c <main+0x40>
 414:	00 c0       	rjmp	.+0      	; 0x416 <main+0x4a>
 416:	00 00       	nop
 418:	ee cf       	rjmp	.-36     	; 0x3f6 <main+0x2a>

0000041a <_exit>:
 41a:	f8 94       	cli

0000041c <__stop_program>:
 41c:	ff cf       	rjmp	.-2      	; 0x41c <__stop_program>
