
TimerPractice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000080  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000681  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002c9  00000000  00000000  000008f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000024b  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000e8  00000000  00000000  00000e08  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000002cb  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000152  00000000  00000000  000011bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  0000130d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 89 00 	call	0x112	; 0x112 <main>
  78:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_ZN6TIMER1C1Ehhj>:
TIMER1::TIMER1(){
	TIMER1(TIMER_DIV1, 0, 0);
}

///@brief initialize AD converter on Atmega168 for
TIMER1::TIMER1(uint8_t pscalar, uint8_t WGMmode, uint16_t rload){
  80:	fc 01       	movw	r30, r24
	reload = rload;
  82:	33 83       	std	Z+3, r19	; 0x03
  84:	22 83       	std	Z+2, r18	; 0x02
	mode = WGMmode;
  86:	41 83       	std	Z+1, r20	; 0x01
	prescalar = pscalar;
  88:	60 83       	st	Z, r22
	
	// The PRTIM1 bit in the Power reduction register must be written to zero to enable Timer/Counter1 module.
	PRR &= ~(1<<PRTIM1);
  8a:	a4 e6       	ldi	r26, 0x64	; 100
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	8c 91       	ld	r24, X
  90:	87 7f       	andi	r24, 0xF7	; 247
  92:	8c 93       	st	X, r24
	
	//disable timer1
	TCCR1B = 0x00;
  94:	10 92 81 00 	sts	0x0081, r1
	
	//clear counter	
	TCNT1 = 0;
  98:	10 92 85 00 	sts	0x0085, r1
  9c:	10 92 84 00 	sts	0x0084, r1
	
	//set reload value
	if (mode == 4) OCR1A = reload;
  a0:	81 81       	ldd	r24, Z+1	; 0x01
  a2:	84 30       	cpi	r24, 0x04	; 4
  a4:	31 f4       	brne	.+12     	; 0xb2 <_ZN6TIMER1C1Ehhj+0x32>
  a6:	82 81       	ldd	r24, Z+2	; 0x02
  a8:	93 81       	ldd	r25, Z+3	; 0x03
  aa:	90 93 89 00 	sts	0x0089, r25
  ae:	80 93 88 00 	sts	0x0088, r24
	if (mode == 12) ICR1 = reload;
  b2:	81 81       	ldd	r24, Z+1	; 0x01
  b4:	8c 30       	cpi	r24, 0x0C	; 12
  b6:	31 f4       	brne	.+12     	; 0xc4 <_ZN6TIMER1C1Ehhj+0x44>
  b8:	82 81       	ldd	r24, Z+2	; 0x02
  ba:	93 81       	ldd	r25, Z+3	; 0x03
  bc:	90 93 87 00 	sts	0x0087, r25
  c0:	80 93 86 00 	sts	0x0086, r24
	if (mode == 0) TCNT1 = reload;
  c4:	81 81       	ldd	r24, Z+1	; 0x01
  c6:	81 11       	cpse	r24, r1
  c8:	06 c0       	rjmp	.+12     	; 0xd6 <_ZN6TIMER1C1Ehhj+0x56>
  ca:	82 81       	ldd	r24, Z+2	; 0x02
  cc:	93 81       	ldd	r25, Z+3	; 0x03
  ce:	90 93 85 00 	sts	0x0085, r25
  d2:	80 93 84 00 	sts	0x0084, r24
	
	//setup and enable timer
	TCCR1A = (mode & 0x03);		//normal timer operation, no PWM, etc
  d6:	81 81       	ldd	r24, Z+1	; 0x01
  d8:	83 70       	andi	r24, 0x03	; 3
  da:	80 93 80 00 	sts	0x0080, r24
	//TCCR1B = ((mode & 0x0C)<<WGM12) | (prescalar << CS10);
	TCCR1C = 0x00;		//force output compare off	
  de:	10 92 82 00 	sts	0x0082, r1
  e2:	08 95       	ret

000000e4 <_ZN6TIMER15startEv>:
	//sei();
}

void	TIMER1::start(void)
{
	TCCR1B = ((mode & 0x0C)<<WGM12) | (prescalar << CS10);
  e4:	fc 01       	movw	r30, r24
  e6:	21 81       	ldd	r18, Z+1	; 0x01
  e8:	2c 70       	andi	r18, 0x0C	; 12
  ea:	22 0f       	add	r18, r18
  ec:	22 0f       	add	r18, r18
  ee:	22 0f       	add	r18, r18
  f0:	90 81       	ld	r25, Z
  f2:	82 2f       	mov	r24, r18
  f4:	89 2b       	or	r24, r25
  f6:	80 93 81 00 	sts	0x0081, r24
  fa:	08 95       	ret

000000fc <_ZN6TIMER117isCompareAFlagSetEv>:
	return ((TIFR1 & 1<<TOV1)? 1:0);
	//return ((EIFR & 1<< INTF0)?1:0);
}

uint8_t TIMER1::isCompareAFlagSet(){
	return ((TIFR1 & 1<<OCF1A)? 1:0);
  fc:	86 b3       	in	r24, 0x16	; 22
	
}
  fe:	86 95       	lsr	r24
 100:	81 70       	andi	r24, 0x01	; 1
 102:	08 95       	ret

00000104 <_ZN6TIMER117clearCompareAFlagEv>:
	
	//EIFR = (1<<INTF0);		//Reset flag
}

void	TIMER1::clearCompareAFlag(){
	TIFR1 |= (1<<OCF1A);
 104:	b1 9a       	sbi	0x16, 1	; 22
 106:	08 95       	ret

00000108 <_ZN6TIMER18setCountEj>:
	
	//EIFR = (1<<INTF0);		//Reset flag
}

void	TIMER1::setCount(uint16_t count){
	TCNT1 = count;
 108:	70 93 85 00 	sts	0x0085, r23
 10c:	60 93 84 00 	sts	0x0084, r22
 110:	08 95       	ret

00000112 <main>:


#define RELOAD 0x0FFF

int main(void)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	00 d0       	rcall	.+0      	; 0x118 <main+0x6>
 118:	00 d0       	rcall	.+0      	; 0x11a <main+0x8>
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0xC0;			//set PD7:6 to outputs for LEDs
 11e:	80 ec       	ldi	r24, 0xC0	; 192
 120:	8a b9       	out	0x0a, r24	; 10
	
	
	TIMER1 timer(TIMER_DIV8, 4, 0x2B67);
 122:	27 e6       	ldi	r18, 0x67	; 103
 124:	3b e2       	ldi	r19, 0x2B	; 43
 126:	44 e0       	ldi	r20, 0x04	; 4
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	ce 01       	movw	r24, r28
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	0e 94 40 00 	call	0x80	; 0x80 <_ZN6TIMER1C1Ehhj>
	
	RED_ON;
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	8f 73       	andi	r24, 0x3F	; 63
 136:	80 68       	ori	r24, 0x80	; 128
 138:	8b b9       	out	0x0b, r24	; 11
	timer.start();
 13a:	ce 01       	movw	r24, r28
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	0e 94 72 00 	call	0xe4	; 0xe4 <_ZN6TIMER15startEv>
    while(1)
    {

			   if (timer.isCompareAFlagSet()){
 142:	ce 01       	movw	r24, r28
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	0e 94 7e 00 	call	0xfc	; 0xfc <_ZN6TIMER117isCompareAFlagSetEv>
 14a:	88 23       	and	r24, r24
 14c:	d1 f3       	breq	.-12     	; 0x142 <main+0x30>
				   timer.clearCompareAFlag();
 14e:	ce 01       	movw	r24, r28
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	0e 94 82 00 	call	0x104	; 0x104 <_ZN6TIMER117clearCompareAFlagEv>
				   timer.setCount(0);
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	0e 94 84 00 	call	0x108	; 0x108 <_ZN6TIMER18setCountEj>
				   PORTD ^= (1<<PD7);
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	80 58       	subi	r24, 0x80	; 128
 166:	8b b9       	out	0x0b, r24	; 11
 168:	ec cf       	rjmp	.-40     	; 0x142 <main+0x30>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
